{
  "repair_end": "2018-12-01 15:12:22.827677", 
  "repair_begin": "2018-12-01 14:47:33.816754", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_360/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:31.321168111 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_360/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:57:31.325168111 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_251/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:56:17.481196410 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_251/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:56:17.481196410 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_364/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:32.873168030 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_364/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:32.877168030 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1199/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:44.545625644 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1199/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:44.549625647 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_292/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:56:45.677179600 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_292/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:56:45.677179600 -0500\n@@ -218,7 +218,7 @@\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n-          case SHEQ:            return \"SHEQ\";\n+          case SHEQ:            ;\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_292/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:56:45.681179598 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 221, 
          "faulty": "return \"SHEQ\";", 
          "type": "Delete", 
          "seed": "case SUB:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_948/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:53.137519755 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_948/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:53.141519761 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1431/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:21.485759722 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1431/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:09:21.485759722 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1066/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:05:13.857614780 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1066/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:05:13.857614780 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_904/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:25.705478730 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_904/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:03:25.709478736 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_904/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:03:25.709478736 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1460/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:38.485776484 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1460/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:38.485776484 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_416/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:05.653170597 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_416/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:58:05.653170597 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_172/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:55:23.241145145 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 08:47:12.536609775 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_172/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 08:55:23.241145145 -0500\n@@ -108,7 +108,7 @@\n    * state.\n    */\n   boolean mayEffectMutableState(Node n) {\n-    return NodeUtil.mayEffectMutableState(n, compiler);\n+    return false;\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 111, 
          "faulty": "return NodeUtil.mayEffectMutableState(n,compiler);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_808/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:26.265395209 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_808/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:26.265395209 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_24/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:53:38.544953204 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_658/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:43.593273260 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_658/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:00:43.597273264 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_839/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:45.037420719 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_839/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:45.037420719 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_106/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:54:37.897059360 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1017/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:41.061594577 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1017/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:04:41.061594577 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_383/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:44.905168039 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_383/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:44.905168039 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_989/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:21.941564280 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_989/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:04:21.945564286 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1168/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:24.481611555 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1168/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:06:24.481611555 -0500\n@@ -218,7 +218,7 @@\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n-          case SHEQ:            return \"SHEQ\";\n+          case SHEQ:            ;\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 221, 
          "faulty": "return \"SHEQ\";", 
          "type": "Delete", 
          "seed": "case SUB:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_810/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:27.005396199 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_810/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:02:27.005396199 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_436/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:17.461173408 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_436/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:58:17.461173408 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1247/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:07:18.313651046 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1247/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:07:18.313651046 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_611/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:14.665245431 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_611/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:00:14.665245431 -0500\n@@ -774,28 +774,6 @@\n         // if(x)a=1;else a=2; -> a=x?1:2;\n         if (NodeUtil.isAssignmentOp(thenOp)) {\n           Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n         }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 777, 
          "faulty": "if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n  n.removeChild(cond);\n  Node assignName=thenOp.removeFirstChild();\n  Node thenExpr=thenOp.removeFirstChild();\n  Node elseExpr=elseOp.getLastChild();\n  elseOp.removeChild(elseExpr);\n  Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n  Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n  Node expr=NodeUtil.newExpr(assign);\n  parent.replaceChild(n,expr);\n  reportCodeChange();\n  return expr;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1315/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:05.441689813 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1315/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:08:05.441689813 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 794, 
          "faulty": "parent.replaceChild(n,expr);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_718/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:24.705318139 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_718/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:01:24.709318143 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_718/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:01:24.709318143 -0500\n@@ -794,7 +794,7 @@\n             parent.replaceChild(n, expr);\n             reportCodeChange();\n \n-            return expr;\n+            return null;\n           }\n         }\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 797, 
          "faulty": "return expr;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_939/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:47.857511749 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_939/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:03:47.861511756 -0500\n@@ -218,7 +218,7 @@\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n-          case SHEQ:            return \"SHEQ\";\n+          case SHEQ:            return \"EMPTY\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 221, 
          "faulty": "return \"SHEQ\";", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1145/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:09.921601818 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1145/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:09.925601821 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_474/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:41.869182113 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_474/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:58:41.873182115 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_504/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:02.353192216 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_504/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:59:02.357192218 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_617/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:18.261248706 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_617/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:00:18.261248706 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1628/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:31.061896634 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1628/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:11:31.061896634 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1397/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:59.805738924 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1397/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:08:59.809738928 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1397/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:08:59.809738928 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_337/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:17.009169779 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_337/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:17.013169778 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_223/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:55:57.593212242 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_223/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:55:57.597212249 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_651/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:39.133268755 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_651/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:00:39.133268755 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_458/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:32.281178245 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_458/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:58:32.281178245 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1675/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:02.697932976 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1675/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:12:02.697932976 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_644/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:35.493265135 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_644/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:00:35.497265139 -0500\n@@ -338,8 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1175/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:28.929614612 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1175/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:28.933614614 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_853/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:54.145433397 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_853/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:54.145433397 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 794, 
          "faulty": "parent.replaceChild(n,expr);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1571/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:52.257853527 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1571/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:10:52.257853527 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_887/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:15.265463502 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_887/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:15.269463508 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1490/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:57.761795956 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1490/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:09:57.761795956 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 788, 
          "faulty": "elseOp.removeChild(elseExpr);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_885/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:14.529462437 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_885/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:14.529462437 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1632/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:33.297899169 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1632/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:11:33.301899173 -0500\n@@ -338,9 +338,7 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_273/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:56:33.089186116 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_273/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:56:33.089186116 -0500\n@@ -771,32 +771,7 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n+        return null;\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_341/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:18.497169528 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_341/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:57:18.497169528 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_341/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:18.497169528 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1407/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:06.345745129 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1407/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:06.349745133 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1165/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:23.005610548 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1165/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:23.009610551 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_855/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:54.953434531 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_855/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:54.957434537 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 794, 
          "faulty": "parent.replaceChild(n,expr);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1441/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:27.373765484 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1441/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:09:27.373765484 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1568/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:50.793851934 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1568/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:10:50.797851939 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1672/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:01.181931210 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1672/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:12:01.181931210 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_471/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:40.401181485 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_471/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:58:40.401181485 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_305/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:56:54.377175983 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_305/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:56:54.377175983 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_913/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:31.501487278 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_913/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:31.501487278 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1605/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:14.217877717 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1605/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:11:14.217877717 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_813/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:28.513398219 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_813/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:28.517398225 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_648/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:37.725267349 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_648/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:00:37.729267352 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1413/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:10.169748784 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1413/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:10.173748788 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_447/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:24.889175654 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_447/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:58:24.893175656 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1597/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:09.053871981 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1597/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:11:09.053871981 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1429/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:20.697758955 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1429/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:20.701758959 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1377/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:46.381726384 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1377/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:08:46.381726384 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_925/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:38.145497158 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_925/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:38.149497164 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_570/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:45.325220807 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_570/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:59:45.325220807 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_570/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:59:45.329220810 -0500\n@@ -338,9 +338,7 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1021/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:43.409598336 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1021/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:04:43.413598342 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1258/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:07:25.757656920 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1258/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:07:25.757656920 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_971/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:09.449544798 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_971/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:04:09.449544798 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1092/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:05:32.613606751 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1092/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:05:32.617606750 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_567/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:43.777219617 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_567/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:59:43.777219617 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_668/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:49.645279491 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_668/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:00:49.645279491 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1654/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:49.365917535 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1654/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:11:49.369917539 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1654/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:11:49.369917539 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_865/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:01.613443932 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_865/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:01.617443937 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1547/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:36.673836697 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1547/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:10:36.673836697 -0500\n@@ -774,28 +774,6 @@\n         // if(x)a=1;else a=2; -> a=x?1:2;\n         if (NodeUtil.isAssignmentOp(thenOp)) {\n           Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n         }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 777, 
          "faulty": "if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n  n.removeChild(cond);\n  Node assignName=thenOp.removeFirstChild();\n  Node thenExpr=thenOp.removeFirstChild();\n  Node elseExpr=elseOp.getLastChild();\n  elseOp.removeChild(elseExpr);\n  Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n  Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n  Node expr=NodeUtil.newExpr(assign);\n  parent.replaceChild(n,expr);\n  reportCodeChange();\n  return expr;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 795, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1389/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:54.633734062 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1389/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:08:54.633734062 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 797, 
          "faulty": "return expr;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1419/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:14.017752484 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1419/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:14.021752488 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_398/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:54.405168823 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_398/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:54.405168823 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_352/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:26.073168528 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_352/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:57:26.073168528 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 777, 
          "faulty": "if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n  n.removeChild(cond);\n  Node assignName=thenOp.removeFirstChild();\n  Node thenExpr=thenOp.removeFirstChild();\n  Node elseExpr=elseOp.getLastChild();\n  elseOp.removeChild(elseExpr);\n  Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n  Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n  Node expr=NodeUtil.newExpr(assign);\n  parent.replaceChild(n,expr);\n  reportCodeChange();\n  return expr;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_619/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:18.997249383 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_619/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:00:18.997249383 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1517/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:16.857815715 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1517/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:10:16.857815715 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1551/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:39.045839240 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1551/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:10:39.045839240 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1551/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:10:39.049839245 -0500\n@@ -794,7 +794,7 @@\n             parent.replaceChild(n, expr);\n             reportCodeChange();\n \n-            return expr;\n+            return null;\n           }\n         }\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 797, 
          "faulty": "return expr;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_917/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:33.765490635 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_917/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:03:33.765490635 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_366/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:33.661167997 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_366/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:33.661167997 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_110/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:54:40.089063421 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_110/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:54:40.089063421 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_177/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:55:26.341151138 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_177/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:55:26.341151138 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_945/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:51.677517537 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_945/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:51.677517537 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1224/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:07:02.589638961 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1224/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:07:02.589638961 -0500\n@@ -218,7 +218,7 @@\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n-          case SHEQ:            return \"SHEQ\";\n+          case SHEQ:            return \"BITOR\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1224/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:07:02.589638961 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 221, 
          "faulty": "return \"SHEQ\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_400/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:55.145168911 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_400/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:55.149168911 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_760/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:53.581352948 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_760/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:01:53.581352948 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1182/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:33.357617693 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1182/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:06:33.357617693 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1265/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:07:30.173660449 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1265/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:07:30.177660452 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_369/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:35.365167939 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_369/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:57:35.369167939 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_369/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:35.369167939 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1035/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:52.281612610 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1035/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:04:52.285612617 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1443/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:28.113766211 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1443/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:28.113766211 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1159/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:19.113607917 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1159/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:06:19.117607920 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1159/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:19.117607920 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1370/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:42.633722930 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1370/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:08:42.633722930 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1366/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:40.329720818 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1366/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:08:40.333720821 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_206/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:55:45.777189057 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_206/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:55:45.781189065 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_851/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:53.353432288 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_851/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:53.357432293 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_139/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:55:00.045100807 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 08:47:12.536609775 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_139/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\t2018-12-01 08:55:00.049100814 -0500\n@@ -108,7 +108,7 @@\n    * state.\n    */\n   boolean mayEffectMutableState(Node n) {\n-    return NodeUtil.mayEffectMutableState(n, compiler);\n+    return false;\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_139/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:55:00.049100814 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java", 
          "line": 111, 
          "faulty": "return NodeUtil.mayEffectMutableState(n,compiler);", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1540/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:32.881832646 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1540/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:10:32.881832646 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1337/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:20.329702812 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1337/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:08:20.333702816 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_794/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:16.817382702 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_794/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:16.821382707 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1374/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:44.877724996 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1374/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:08:44.877724996 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_419/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:07.113170893 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_419/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:58:07.117170894 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_683/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:00.065290533 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_683/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:01:00.065290533 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_529/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:18.665201945 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_529/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:59:18.669201947 -0500\n@@ -207,7 +207,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_529/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:59:18.669201947 -0500\n@@ -774,28 +774,6 @@\n         // if(x)a=1;else a=2; -> a=x?1:2;\n         if (NodeUtil.isAssignmentOp(thenOp)) {\n           Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n         }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 777, 
          "faulty": "if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n  n.removeChild(cond);\n  Node assignName=thenOp.removeFirstChild();\n  Node thenExpr=thenOp.removeFirstChild();\n  Node elseExpr=elseOp.getLastChild();\n  elseOp.removeChild(elseExpr);\n  Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n  Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n  Node expr=NodeUtil.newExpr(assign);\n  parent.replaceChild(n,expr);\n  reportCodeChange();\n  return expr;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 210, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case RETURN:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_700/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:11.849303481 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_700/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:01:11.849303481 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_921/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:36.001493960 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_921/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:03:36.001493960 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_827/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:38.113411211 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_827/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:02:38.117411217 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_879/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:10.737456967 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_879/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:03:10.737456967 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_879/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:03:10.737456967 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1454/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:34.821772839 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1454/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:34.825772842 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_477/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:43.317182747 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_477/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:58:43.321182748 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_477/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:58:43.321182748 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1703/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:20.973954432 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1703/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:12:20.973954432 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1447/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:30.373768437 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1447/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:09:30.373768437 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1669/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:59.373929109 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1669/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:11:59.377929113 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1669/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:11:59.377929113 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_537/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:24.153205536 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_537/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:59:24.153205536 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_431/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:14.477172610 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_431/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:58:14.477172610 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_546/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:29.469209162 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_546/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:59:29.469209162 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1481/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:51.817789900 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1481/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:09:51.817789900 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_873/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:06.865451413 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_873/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:03:06.865451413 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_362/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:32.057168070 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_362/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:32.061168070 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1579/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:57.357859098 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1579/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:10:57.357859098 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1687/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:09.949941450 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1687/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:12:09.953941455 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_408/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:00.341169647 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_408/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:58:00.345169648 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_623/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:21.189251413 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SCRIPT\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1470/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:45.153783165 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1470/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:09:45.157783168 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1590/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:04.577867032 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1590/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:11:04.577867032 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1544/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:10:35.133835050 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1544/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:10:35.133835050 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_339/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:17.753169651 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_339/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:17.753169651 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_333/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:14.649170218 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_333/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:57:14.649170218 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_901/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:24.181476493 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_901/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:03:24.181476493 -0500\n@@ -207,7 +207,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         return \"SUB\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 210, 
          "faulty": "return \"GETELEM\";", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_896/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:03:21.301472280 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_896/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:03:21.305472285 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1356/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:33.749714827 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1356/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:08:33.753714831 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_729/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:32.193326920 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_729/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:01:32.193326920 -0500\n@@ -207,7 +207,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 210, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_832/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:40.429414379 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_832/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:02:40.429414379 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1433/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:22.273760490 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1433/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:09:22.273760490 -0500\n@@ -774,28 +774,6 @@\n         // if(x)a=1;else a=2; -> a=x?1:2;\n         if (NodeUtil.isAssignmentOp(thenOp)) {\n           Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n         }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 777, 
          "faulty": "if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n  n.removeChild(cond);\n  Node assignName=thenOp.removeFirstChild();\n  Node thenExpr=thenOp.removeFirstChild();\n  Node elseExpr=elseOp.getLastChild();\n  elseOp.removeChild(elseExpr);\n  Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n  Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n  Node expr=NodeUtil.newExpr(assign);\n  parent.replaceChild(n,expr);\n  reportCodeChange();\n  return expr;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1294/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:07:50.713677300 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1294/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:07:50.713677300 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1184/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:34.137618239 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1184/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:34.141618242 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1657/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:50.821919212 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1657/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:11:50.821919212 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1056/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:05:07.217618335 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1056/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:05:07.217618335 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_277/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:56:35.205184913 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_277/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:56:35.205184913 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_506/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:03.165192666 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_506/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:59:03.165192666 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1617/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:11:23.289887868 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1617/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:11:23.289887868 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1617/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:11:23.289887868 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "return \"PARAM_LIST\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1136/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:04.697599418 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1136/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:04.697599418 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_86/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:54:23.777033425 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_86/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:54:23.781033432 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1326/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:08:12.805696199 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1326/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:08:12.805696199 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1326/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:08:12.805696199 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1326/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:08:12.809696202 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_753/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:49.213347522 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_753/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:01:49.213347522 -0500\n@@ -207,7 +207,7 @@\n           case DELPROP:         return \"DELPROP\";\n           case TYPEOF:          return \"TYPEOF\";\n           case GETPROP:         return \"GETPROP\";\n-          case GETELEM:         return \"GETELEM\";\n+          case GETELEM:         ;\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n           case LABEL_NAME:      return \"LABEL_NAME\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_753/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:01:49.213347522 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 210, 
          "faulty": "return \"GETELEM\";", 
          "type": "Delete", 
          "seed": "case PARAM_LIST:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_392/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:57:50.745168442 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_392/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:57:50.745168442 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_790/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:14.565379755 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_790/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:02:14.565379755 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_995/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:26.233571031 -0500\n@@ -1414,11 +1414,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EMPTY\";\n       }\n       return null;\n   }\n@@ -1443,7 +1439,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_995/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:04:26.237571038 -0500\n@@ -774,28 +774,6 @@\n         // if(x)a=1;else a=2; -> a=x?1:2;\n         if (NodeUtil.isAssignmentOp(thenOp)) {\n           Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n         }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 777, 
          "faulty": "if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n  n.removeChild(cond);\n  Node assignName=thenOp.removeFirstChild();\n  Node thenExpr=thenOp.removeFirstChild();\n  Node elseExpr=elseOp.getLastChild();\n  elseOp.removeChild(elseExpr);\n  Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n  Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n  Node expr=NodeUtil.newExpr(assign);\n  parent.replaceChild(n,expr);\n  reportCodeChange();\n  return expr;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1417, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_462/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:34.485179084 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_462/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:58:34.485179084 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_555/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:35.357213342 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_555/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:59:35.357213342 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 784, 
          "faulty": "n.removeChild(cond);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_625/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:21.973252143 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_625/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:00:21.977252147 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_662/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:00:45.925275644 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_662/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:00:45.929275648 -0500\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_662/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:00:45.929275648 -0500\n@@ -771,32 +771,6 @@\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n       }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 775, 
          "faulty": "if (NodeUtil.isAssignmentOp(thenOp)) {\n  Node lhs=thenOp.getFirstChild();\n  if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n    n.removeChild(cond);\n    Node assignName=thenOp.removeFirstChild();\n    Node thenExpr=thenOp.removeFirstChild();\n    Node elseExpr=elseOp.getLastChild();\n    elseOp.removeChild(elseExpr);\n    Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n    Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n    Node expr=NodeUtil.newExpr(assign);\n    parent.replaceChild(n,expr);\n    reportCodeChange();\n    return expr;\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case BLOCK:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_186/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:55:32.121162354 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_186/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:55:32.125162362 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1138/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:05.481599331 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1138/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:05.485599330 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_423/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:58:09.277171359 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_423/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:58:09.277171359 -0500\n@@ -794,7 +794,7 @@\n             parent.replaceChild(n, expr);\n             reportCodeChange();\n \n-            return expr;\n+            return null;\n           }\n         }\n       }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 797, 
          "faulty": "return expr;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_829/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:02:38.905412293 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_829/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:02:38.909412298 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_544/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:28.729208649 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_544/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:59:28.733208651 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 794, 
          "faulty": "parent.replaceChild(n,expr);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1476/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:09:48.817786860 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1476/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:09:48.821786865 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1476/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:09:48.821786865 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1007/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:34.349583877 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1007/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:04:34.353583883 -0500\n@@ -340,7 +340,6 @@\n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n-    Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 343, 
          "faulty": "Preconditions.checkState(mayBeExpression(falseval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1148/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:06:11.489602847 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1148/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:06:11.489602847 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1232/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:07:07.785642905 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1232/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:07:07.785642905 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_765/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:01:56.705356862 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_765/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:01:56.705356862 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_765/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:01:56.705356862 -0500\n@@ -338,7 +338,6 @@\n   }\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n-    Preconditions.checkState(mayBeExpression(cond));\n     Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 341, 
          "faulty": "Preconditions.checkState(mayBeExpression(cond));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case EMPTY:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1685/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:12:09.217940593 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1685/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 09:12:09.217940593 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 08:47:15.468608427 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1685/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\t2018-12-01 09:12:09.217940593 -0500\n@@ -770,34 +770,6 @@\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n-      if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n-        if (NodeUtil.isAssignmentOp(thenOp)) {\n-          Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n-\n-            n.removeChild(cond);\n-            Node assignName = thenOp.removeFirstChild();\n-            Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n-            elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n-            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n-                              .srcref(thenOp);\n-            Node expr = NodeUtil.newExpr(assign);\n-            parent.replaceChild(n, expr);\n-            reportCodeChange();\n-\n-            return expr;\n-          }\n-        }\n-      }\n       // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java", 
          "line": 773, 
          "faulty": "if (thenOp.getType() == elseOp.getType()) {\n  if (NodeUtil.isAssignmentOp(thenOp)) {\n    Node lhs=thenOp.getFirstChild();\n    if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {\n      n.removeChild(cond);\n      Node assignName=thenOp.removeFirstChild();\n      Node thenExpr=thenOp.removeFirstChild();\n      Node elseExpr=elseOp.getLastChild();\n      elseOp.removeChild(elseExpr);\n      Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n);\n      Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp);\n      Node expr=NodeUtil.newExpr(assign);\n      parent.replaceChild(n,expr);\n      reportCodeChange();\n      return expr;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_527/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:59:17.769201373 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_527/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:59:17.769201373 -0500\n@@ -218,7 +218,7 @@\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n-          case SHEQ:            return \"SHEQ\";\n+          case SHEQ:            return \"EMPTY\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -245,7 +245,7 @@\n           case OR:              return \"OR\";\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n-          case DEC:             return \"DEC\";\n+          case DEC:             ;\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n           case SWITCH:          return \"SWITCH\";\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:47:12.600609744 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_527/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/IR.java\t2018-12-01 08:59:17.769201373 -0500\n@@ -339,7 +339,6 @@\n \n   public static Node hook(Node cond, Node trueval, Node falseval) {\n     Preconditions.checkState(mayBeExpression(cond));\n-    Preconditions.checkState(mayBeExpression(trueval));\n     Preconditions.checkState(mayBeExpression(falseval));\n     return new Node(Token.HOOK, cond, trueval, falseval);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/IR.java", 
          "line": 342, 
          "faulty": "Preconditions.checkState(mayBeExpression(trueval));", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 221, 
          "faulty": "return \"SHEQ\";", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 248, 
          "faulty": "return \"DEC\";", 
          "type": "Delete", 
          "seed": "case RETURN:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1033/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:04:51.489611332 -0500\n@@ -1443,7 +1443,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 08:47:12.836609632 -0500\n+++ /tmp/Arja_Defects4J_Closure_132/patches_y19z/Patch_1033/patched/tmp/Arja_Defects4J_Closure_132/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:04:51.489611332 -0500\n@@ -218,7 +218,7 @@\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n-          case SHEQ:            return \"SHEQ\";\n+          case SHEQ:            return \"ADD\";\n           case SHNE:            return \"SHNE\";\n           case REGEXP:          return \"REGEXP\";\n           case THROW:           return \"THROW\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 221, 
          "faulty": "return \"SHEQ\";", 
          "type": "Replace", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }
  ]
}