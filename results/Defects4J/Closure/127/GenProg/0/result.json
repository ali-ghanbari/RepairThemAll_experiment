{
  "repair_end": "2018-12-02 11:52:04.420395", 
  "repair_begin": "2018-12-02 11:32:32.112079", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return new FileLevelJsDocBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:37.914477343 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:37.914477343 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:37.914477343 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:37.918477356 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_455/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:25.085492714 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_455/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:25.085492714 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_455/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:25.085492714 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_775/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:52.777697718 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_775/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:52.781697724 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_775/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:52.781697724 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_813/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:18.413722215 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_813/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:18.417722219 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_813/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:18.417722219 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_813/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:18.421722223 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_854/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:45.293747767 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_854/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:45.297747771 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_630/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:11.673599629 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_630/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:11.673599629 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_630/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:11.673599629 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_630/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:11.677599632 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "int post1=this.getIntProp(INCRDECR_PROP);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_788/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:01.253705833 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_788/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:01.253705833 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_788/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:01.257705837 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        int post1 = this.getIntProp(INCRDECR_PROP);\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_833/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:32.341735471 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_833/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:32.345735475 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_833/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:47:32.345735475 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_833/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:32.345735475 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_833/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:32.349735478 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_283/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:35.621377247 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_283/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:35.625377252 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            this.cfg = cfg;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_283/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:35.625377252 -0500\n@@ -951,14 +951,13 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      int slashV1 = this.getIntProp(SLASH_V);\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:07.298132384 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:07.302132403 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:07.302132403 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:07.306132420 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int slashV1 = this.getIntProp(SLASH_V);\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_865/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:52.105756916 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_865/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:52.105756916 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_865/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:52.105756916 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_865/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:52.109756928 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_361/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:27.069432392 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_361/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:27.073432398 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_361/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:27.073432398 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,7 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        StringBuilder s = new StringBuilder();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_874/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:57.397773641 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_874/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:47:57.397773641 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_874/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:57.401773654 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_274/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:30.553371718 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_274/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:30.557371721 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_274/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:30.557371721 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_274/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:30.557371721 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_162/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:19.601292132 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_162/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:19.601292132 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "return -1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_446/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:19.881487374 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_446/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:19.885487377 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_446/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:19.885487377 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:45.090501395 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:45.090501395 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1247/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:45.090501395 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return new FileLevelJsDocBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:34.730466533 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:34.730466533 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:34.730466533 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1230/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:34.734466546 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_677/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:43.057630363 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_677/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:43.061630367 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_677/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:43.061630367 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,20 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\tPreconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,7 +1432,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        JSDocInfo jsDocInfo = getJSDocInfo();\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_226/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:01.109339204 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_226/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:01.113339209 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_226/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:01.113339209 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_226/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:01.117339213 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_375/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:36.913442757 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_375/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:36.913442757 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_375/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:36.917442760 -0500\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:06.482366776 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:06.482366776 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:06.482366776 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:06.486366792 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_298/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:46.169388696 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_298/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:46.173388701 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_298/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:46.173388701 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1440,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1077/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:03.530117040 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1077/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:03.534117049 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1077/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:03.534117049 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1077/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:03.534117049 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_599/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:50.321578545 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_599/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:50.325578550 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 898, 
          "faulty": "while (target.isLabel()) {\n  if (target.getFirstChild().getString().equals(label)) {\n    return true;\n  }\n  target=target.getParent();\n}", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_680/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:44.789632051 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_680/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:44.793632054 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_680/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:44.793632054 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_680/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:45:44.793632054 -0500\n@@ -895,7 +895,8 @@\n     if (label == null) {\n       return true;\n     }\n-    while (target.isLabel()) {\n+    final String paramName = \"jscomp_throw_param\";\n+\twhile (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n         return true;\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_680/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:44.793632054 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_223/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:59.293337177 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_223/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:40:59.293337177 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_223/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:59.293337177 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_324/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:03.169406989 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_324/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:03.169406989 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_324/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:03.169406989 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,15 +954,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_240/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:09.789348860 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_240/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:09.789348860 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_240/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:09.793348866 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_240/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:09.793348866 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_6/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:38:24.713145406 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_949/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:42.201906969 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_949/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:42.205906980 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_949/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:42.205906980 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_949/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:42.205906980 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_949/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:42.205906980 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_943/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:38.549896623 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_943/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:38.553896635 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_943/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:38.553896635 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_943/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:38.553896635 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_943/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:38.553896635 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_737/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:24.985671007 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_737/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:24.989671012 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_737/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:24.989671012 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_737/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:24.989671012 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_737/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:24.993671016 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_747/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:31.005676809 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_747/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:31.009676812 -0500\n@@ -159,25 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n+      int start = 0;\n+\twhile (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n         } else {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_747/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:31.009676812 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_747/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:31.009676812 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:54.142531143 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:54.146531157 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:54.146531157 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1262/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:54.146531157 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 899, 
          "faulty": "if (target.getFirstChild().getString().equals(label)) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_541/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:16.461544792 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_541/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:16.461544792 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_541/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:16.461544792 -0500\n@@ -896,7 +896,8 @@\n       return true;\n     }\n     while (target.isLabel()) {\n-      if (target.getFirstChild().getString().equals(label)) {\n+      int index = -1;\n+\tif (target.getFirstChild().getString().equals(label)) {\n         return true;\n       }\n       target = target.getParent();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_541/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:16.465544796 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1233/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:36.962474119 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1233/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:36.962474119 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1233/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:36.966474134 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1233/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:36.966474134 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +951,13 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Node block = new Node(Token.BLOCK);\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1134/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:39.510264531 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1134/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:39.510264531 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1134/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:39.514264547 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1134/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:39.514264547 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,7 +954,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_954/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:44.733914092 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_954/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:44.737914103 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_954/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:44.737914103 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_954/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:44.737914103 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_545/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:18.717547053 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_545/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:18.717547053 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_545/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:18.721547058 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_545/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:18.721547058 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_230/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:03.909342325 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_230/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:03.909342325 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "InsertBefore", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:38.694261323 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:38.698261340 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:38.698261340 -0500\n@@ -951,14 +951,13 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        toString(sb, printSource, printAnnotations, printType);\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_476/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:37.109505005 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_476/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:37.113505008 -0500\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_321/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:01.457405156 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_321/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:01.461405161 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_321/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:01.461405161 -0500\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_750/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:33.241678961 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_750/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:33.241678961 -0500\n@@ -168,7 +168,6 @@\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n             if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n             }\n           }\n       }\n@@ -177,7 +176,8 @@\n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n+      int start = 0;\n+\twhile (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n         } else {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_750/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:33.245678964 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_220/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:57.209334847 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_220/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:57.213334850 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_220/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:40:57.213334850 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_352/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:21.609426620 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1176/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:03.710356596 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1176/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:03.714356612 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1176/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:03.714356612 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1452,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 841, 
          "faulty": "if (lastJump == cfgNode) {\n  createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());\n}\n else {\n  finallyMap.put(lastJump,handler.getLastChild());\n}", 
          "type": "InsertBefore", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_607/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:54.841583021 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_607/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:54.841583021 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_607/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:54.841583021 -0500\n@@ -838,8 +838,10 @@\n         Node catchBlock = NodeUtil.getCatchBlock(handler);\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n-          if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+          this.cfg = cfg;\n+\t\tif (lastJump == cfgNode) {\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_607/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:54.845583025 -0500\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_547/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:19.801548141 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_547/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:19.805548144 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_547/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:19.809548147 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_952/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:43.917911801 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_952/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:43.917911801 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_952/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:43.921911812 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_952/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:43.921911812 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:13.494392208 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:13.498392222 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:13.498392222 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1194/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:13.498392222 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:40.474485972 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:40.474485972 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1240/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:40.478485985 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_798/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:09.177713405 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_798/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:09.181713408 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_798/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:47:09.181713408 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_798/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:09.181713408 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_798/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:09.181713408 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_117/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:46.949253939 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_117/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:46.949253939 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_261/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:23.589364089 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_261/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:23.589364089 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            this.cfg = cfg;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_261/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:23.589364089 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_105/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:39.509245076 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_105/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:39.509245076 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_105/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:39.509245076 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_369/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:33.809439494 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_369/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:33.809439494 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_369/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:33.813439499 -0500\n@@ -952,7 +952,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n@@ -1441,7 +1442,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_249/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:16.161355911 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_249/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:16.161355911 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_249/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:16.165355914 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_249/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:16.165355914 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "PropListItem x=propListHead;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_160/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:18.705291099 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_160/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:18.705291099 -0500\n@@ -951,15 +951,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_61/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:07.005205595 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_61/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:07.005205595 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_61/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:39:07.005205595 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        StringBuilder builder = new StringBuilder();\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_452/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:23.297490880 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_452/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:23.297490880 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_452/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:23.297490880 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +955,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n@@ -1441,7 +1445,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_213/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:52.013329020 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_213/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:52.017329025 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_201/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:45.305321463 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"SCRIPT\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_201/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:45.305321463 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_201/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:40:45.309321467 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_201/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:45.309321467 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_712/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:05.941652602 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_712/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:05.945652606 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_712/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:05.945652606 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_712/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:05.945652606 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_712/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:05.945652606 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_88/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:26.309229196 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_88/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:26.313229200 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_238/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:08.949347928 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_238/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:08.949347928 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_945/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:39.565899510 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_945/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:39.565899510 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_945/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:39.569899522 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_945/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:39.569899522 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_557/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:24.885553229 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_557/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:24.885553229 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_557/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:24.889553233 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_557/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:24.889553233 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_682/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:46.269633493 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_682/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:46.269633493 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_682/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:46.273633497 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_507/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:54.121522284 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_850/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:43.701746257 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_850/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:43.705746261 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_850/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:43.705746261 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_850/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:47:43.709746264 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_850/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:43.709746264 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_381/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:40.585446608 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_381/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:40.585446608 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_381/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:40.585446608 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1441,7 +1433,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_280/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:33.849375316 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_280/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:33.853375321 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_280/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:33.853375321 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_555/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:24.057552400 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_555/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:24.061552405 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_555/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:24.061552405 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +955,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:38.854057079 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:38.854057079 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:38.858057088 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1037/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:38.858057088 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_651/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:25.373613080 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_651/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:25.377613083 -0500\n@@ -159,25 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n+      int start = 0;\n+\twhile (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n         } else {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_651/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:25.377613083 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_651/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:25.377613083 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_584/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:42.377570663 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_584/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:42.381570666 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_584/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:42.381570666 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_584/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:42.385570672 -0500\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_236/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:08.013346889 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_236/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:08.013346889 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_333/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:09.537413793 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_333/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:09.537413793 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_333/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:09.541413797 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1441,7 +1444,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_470/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:33.673501500 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_470/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:33.673501500 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_470/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:33.673501500 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_983/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:03.769966343 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_983/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:03.773966355 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_983/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:03.773966355 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_983/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:03.773966355 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_460/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:27.797495492 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_460/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:27.801495495 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1118/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:30.354228133 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1118/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:30.358228149 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1118/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:30.358228149 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1118/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:30.358228149 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:32.038457329 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"BITOR\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:32.038457329 -0500\n@@ -159,31 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n+      int type = n.getType();\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:32.038457329 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1224/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:32.042457342 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_254/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:19.337359412 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_254/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:19.337359412 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_254/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:19.341359417 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:39.670483266 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:39.674483281 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:39.674483281 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1238/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:39.674483281 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,13 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Node block = new Node(Token.BLOCK);\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:28.182219369 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:28.182219369 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:28.186219385 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1115/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:28.186219385 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_110/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:41.997248047 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_110/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:39:42.001248051 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_110/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:42.001248051 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_830/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:30.413733638 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_830/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:30.413733638 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_830/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:30.417733641 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_830/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:30.417733641 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1045/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:42.578066317 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1045/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:42.578066317 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1045/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:42.582066328 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1045/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:42.582066328 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_893/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:09.721811756 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_893/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:09.721811756 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_893/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:09.725811768 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_893/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:09.725811768 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_771/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:49.865694928 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_771/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:49.865694928 -0500\n@@ -168,7 +168,6 @@\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n             if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n             }\n           }\n       }\n@@ -177,7 +176,8 @@\n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n+      int start = 0;\n+\twhile (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n         } else {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_771/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:49.865694928 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_771/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:49.869694931 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:08.974375869 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:08.978375883 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:08.978375883 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1186/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:08.978375883 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:20.658417726 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:20.662417740 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:20.662417740 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:20.662417740 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +951,13 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Node block = new Node(Token.BLOCK);\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_638/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:17.257605118 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_638/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:17.257605118 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_638/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:17.261605122 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_638/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:17.261605122 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_174/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:27.357301047 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_174/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:27.361301052 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_174/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:27.361301052 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_290/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:40.741382814 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_290/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:40.741382814 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_290/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:40.741382814 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            final String paramName = \"jscomp_throw_param\";\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n@@ -851,7 +852,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_290/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:40.745382819 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1218/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:29.074447121 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1218/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:29.078447136 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1218/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:29.078447136 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1218/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:29.078447136 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return new FileLevelJsDocBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:54.970533833 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:54.970533833 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:54.974533846 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1264/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:54.974533846 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return new FileLevelJsDocBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:19.842414842 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:19.846414857 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:19.846414857 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1203/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:19.846414857 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_744/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:29.397675260 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_744/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:29.401675264 -0500\n@@ -159,32 +159,16 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n-      return next;\n+      int start = 0;\n+\tStringBuilder builder = new StringBuilder();\n+\treturn next;\n     }\n \n     private void removeDeadExprStatementSafely(Node n) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_744/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:29.401675264 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_744/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:29.401675264 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_693/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:53.137640176 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_693/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:53.137640176 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:02.902353616 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"BITOR\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:02.906353631 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:02.906353631 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1174/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:02.906353631 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1442,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      StaticSourceFile file = getStaticSourceFile();\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_462/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:28.681496397 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_462/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:28.685496400 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_462/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:43:28.685496400 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_462/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:28.685496400 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_941/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:37.733894300 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_941/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:37.733894300 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_941/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:37.737894311 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_941/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:37.737894311 -0500\n@@ -951,14 +951,14 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_911/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:20.089842952 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_911/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:20.089842952 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_911/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:20.089842952 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_911/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:20.093842963 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_665/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:34.949622451 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_665/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:34.949622451 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_665/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:34.953622454 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_665/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:34.953622454 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_358/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:25.229430450 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_358/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:25.233430453 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_358/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:25.233430453 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.PARAM_LIST);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_967/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:52.633936051 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_967/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:52.633936051 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_967/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:52.633936051 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_967/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:52.637936061 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_172/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:26.541300112 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_172/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:40:26.541300112 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.PARAM_LIST);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_933/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:32.021877910 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_933/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:32.021877910 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_933/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:32.025877921 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_933/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:32.025877921 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_560/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:26.581554924 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_560/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:26.585554928 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_560/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:26.585554928 -0500\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 898, 
          "faulty": "while (target.isLabel()) {\n  if (target.getFirstChild().getString().equals(label)) {\n    return true;\n  }\n  target=target.getParent();\n}", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_907/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:18.333837723 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_907/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:18.337837733 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_907/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:18.337837733 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n@@ -895,7 +894,8 @@\n     if (label == null) {\n       return true;\n     }\n-    while (target.isLabel()) {\n+    final String paramName = \"jscomp_throw_param\";\n+\twhile (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n         return true;\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_907/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:18.337837733 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_852/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:44.501747016 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_852/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:44.505747019 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_924/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:26.873862947 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_924/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:26.877862960 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_924/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:26.877862960 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_924/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:26.877862960 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_924/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:26.881862971 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_609/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:55.641583812 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_609/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:55.641583812 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_609/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:55.641583812 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:53.670319107 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:53.670319107 -0500\n@@ -851,7 +851,7 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1160/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:53.670319107 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1452,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_84/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:23.701226034 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_84/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:39:23.705226040 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_84/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:23.705226040 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return new FileLevelJsDocBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:43.206495121 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:43.206495121 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1244/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:43.206495121 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:26.738026516 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:26.738026516 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:26.742026527 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1018/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:26.742026527 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "PropListItem x=propListHead;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_691/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:52.081639149 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_691/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:52.085639153 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_691/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:52.085639153 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_691/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:52.085639153 -0500\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,7 +1426,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        PropListItem x = propListHead;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "InsertBefore", 
          "seed": "sb.append(Token.name(type));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_9/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:38:26.533148310 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_9/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:38:26.533148310 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.EMPTY);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1166/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:57.342332931 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1166/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:57.342332931 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1166/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:57.342332931 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1166/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:57.346332947 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_343/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:14.933419538 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_343/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:14.933419538 -0500\n@@ -159,25 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n+      int index = -1;\n+\twhile (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n         } else {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_343/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:42:14.937419541 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_51/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:38:59.765196620 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_51/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:38:59.769196626 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1196/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:14.406395483 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1196/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:14.406395483 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1196/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:14.406395483 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1439,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      StaticSourceFile file = getStaticSourceFile();\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_742/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:28.585674478 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_742/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:28.589674481 -0500\n@@ -159,32 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n-      return next;\n+      int start = 0;\n+\treturn next;\n     }\n \n     private void removeDeadExprStatementSafely(Node n) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_742/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:28.589674481 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_742/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:28.589674481 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_578/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:38.773567079 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_578/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:38.773567079 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_578/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:38.777567084 -0500\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_880/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:02.017788065 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_880/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:02.017788065 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_880/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:02.017788065 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_880/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:02.021788078 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_880/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:02.021788078 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_341/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:14.085418637 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_341/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:14.085418637 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_341/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:42:14.089418640 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_341/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:14.089418640 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1441,7 +1433,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_466/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:31.213498986 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_466/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:31.217498989 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "Replace", 
          "seed": "return \"EMPTY\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_757/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:38.381683905 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_757/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:38.385683908 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_757/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:38.385683908 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_757/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:38.385683908 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"EMPTY\";\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_757/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:38.385683908 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:55.682326698 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:55.686326714 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:55.686326714 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:55.686326714 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,7 +954,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1107/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:23.098198648 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1107/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:23.098198648 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1107/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:23.102198663 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"PARAM_LIST\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1267/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:56.770539660 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"PARAM_LIST\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1267/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:56.774539672 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1267/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:56.774539672 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return -1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_590/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:45.897574159 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_590/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:45.897574159 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_590/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:45.901574163 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_590/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:45.901574163 -0500\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:39.858059576 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:39.858059576 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:39.858059576 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:49:39.862059587 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1039/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:39.862059587 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:40.442268187 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:40.442268187 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:40.442268187 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1136/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:40.446268202 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:38.030055025 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:38.030055025 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:38.034055036 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1035/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:38.034055036 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int slashV1 = this.getIntProp(SLASH_V);\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:34.681309414 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:34.681309414 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:40:34.685309419 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:34.685309419 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1128/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:35.950250485 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1128/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:35.954250502 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1128/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:35.954250502 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_500/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:50.601518718 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_500/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:50.601518718 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_500/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:50.601518718 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_614/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:58.929587062 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_614/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:58.929587062 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_614/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:58.933587067 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_614/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:58.933587067 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_614/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:58.933587067 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_675/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:42.169629498 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_675/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:42.173629502 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_675/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:42.173629502 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +951,20 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      sourcePosition = -1;\n+\tsb.append(' ');\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:28.889369897 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:28.889369897 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:28.889369897 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1070/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:59.422107228 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1070/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:59.426107239 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1070/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:59.426107239 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1070/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:59.426107239 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_778/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:54.577699443 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_778/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:54.581699447 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_356/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:24.417429592 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_356/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:24.417429592 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_356/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:42:24.421429595 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_356/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:24.421429595 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1441,7 +1433,9 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\t\tthis.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_909/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:19.185840263 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_909/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:19.185840263 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_909/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:19.185840263 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_909/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:19.189840273 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_909/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:19.189840273 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:05.166123222 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:05.170123238 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:05.170123238 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1080/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:05.170123238 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Delete", 
          "seed": "return \"PARAM_LIST\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_210/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:50.345327145 -0500\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             ;\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_210/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:50.349327148 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_136/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:59.757269053 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_136/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:59.761269058 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_136/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:59.761269058 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_530/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:09.077537375 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_530/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:09.081537379 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_530/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:09.081537379 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_530/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:09.085537382 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_530/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:09.085537382 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_326/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:03.977407855 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_326/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:03.981407858 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_326/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:03.981407858 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,7 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        StringBuilder s = new StringBuilder();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return getString().isEmpty() ? false : true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_685/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:47.845635027 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_685/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:47.849635032 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_685/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:47.849635032 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_901/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:14.629826621 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_901/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:14.629826621 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_901/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:14.629826621 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_901/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:14.633826632 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_587/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:44.173572446 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_587/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:44.177572452 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_587/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:44.177572452 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +955,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        int lineno = getLineno();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1226/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:33.014460674 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1226/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:33.014460674 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1226/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:33.014460674 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:24.222430250 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -226,10 +226,13 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +257,210 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase CAST:\n+\t\t\t\treturn \"CAST\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\tcase LB:\n+\t\t\t\treturn \"LB\";\n+\t\t\tcase LC:\n+\t\t\t\treturn \"LC\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\t}\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:24.222430250 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:24.222430250 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1210/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:24.226430264 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,11 +1423,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n@@ -1441,7 +1435,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      StaticSourceFile file = getStaticSourceFile();\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1072/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:00.298109319 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return \"BITOR\";\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1072/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:00.298109319 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1072/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:00.302109328 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1072/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:50:00.302109328 -0500\n@@ -71,6 +71,6 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    return \"BLOCK\";\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1072/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:00.302109328 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_820/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:23.705727256 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_820/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:23.705727256 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_820/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:23.709727259 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_820/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:23.709727259 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_807/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:15.653719584 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_807/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:15.653719584 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_807/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:15.653719584 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_807/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:15.657719588 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_439/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:16.369483762 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_439/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:16.373483766 -0500\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1041/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:40.974062347 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1041/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:40.974062347 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1041/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:40.978062358 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1041/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:40.978062358 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_763/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:43.221688554 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_763/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:43.225688558 -0500\n@@ -168,7 +168,7 @@\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n             if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n+              int type = n.getType();\n             }\n           }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_791/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:04.669709098 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_791/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:04.669709098 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_791/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:04.673709103 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return new FileLevelJsDocBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1276/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:02.070556674 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1276/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:52:02.070556674 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1276/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:02.070556674 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_543/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:17.681546015 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_543/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:17.681546015 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_543/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:17.681546015 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +955,13 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 898, 
          "faulty": "while (target.isLabel()) {\n  if (target.getFirstChild().getString().equals(label)) {\n    return true;\n  }\n  target=target.getParent();\n}", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_704/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:00.933647747 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_704/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:00.933647747 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_704/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:00.937647750 -0500\n@@ -895,7 +895,8 @@\n     if (label == null) {\n       return true;\n     }\n-    while (target.isLabel()) {\n+    final String paramName = \"jscomp_throw_param\";\n+\twhile (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n         return true;\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_704/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:00.937647750 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_245/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:13.653353139 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_245/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:13.657353143 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_245/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:13.657353143 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_245/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:13.657353143 -0500\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_837/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:34.153737193 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_837/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:34.157737197 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_407/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:56.285462992 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_407/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:56.285462992 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_407/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:56.289462996 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_809/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:16.569720458 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_809/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:16.573720461 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:56.974101370 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:56.974101370 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:56.978101380 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1066/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:56.978101380 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int slashV1 = this.getIntProp(SLASH_V);\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_373/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:35.481441253 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_373/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:35.481441253 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_131/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:56.497265223 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_131/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:56.497265223 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_131/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:39:56.497265223 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_131/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:56.501265228 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_815/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:19.769723508 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_815/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:19.769723508 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_780/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:56.137700936 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_780/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:56.137700936 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_917/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:23.533853143 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_917/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:23.537853154 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_917/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:23.537853154 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_57/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:04.385202354 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_57/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:04.385202354 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_57/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:04.385202354 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_444/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:19.053486521 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_444/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:19.057486527 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_444/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:43:19.057486527 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_444/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:19.057486527 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1146/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:45.802289035 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1146/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:45.802289035 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1146/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:45.806289050 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:05.994126788 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:05.998126805 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:05.998126805 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:05.998126805 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:11.486384972 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:11.486384972 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1191/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:11.490384987 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +951,13 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Node block = new Node(Token.BLOCK);\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_472/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:34.489502332 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_472/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:34.493502335 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_472/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:43:34.493502335 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_472/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:34.497502341 -0500\n@@ -952,13 +952,13 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_574/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:36.121564440 -0500\n@@ -159,25 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n+      int start = 0;\n+\twhile (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n         } else {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_574/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:36.125564443 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 900, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "InsertBefore", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_980/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:01.769960958 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,10 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           {\n+\t\t\t\tStringBuilder s = new StringBuilder();\n+\t\t\t\treturn \"LABEL\";\n+\t\t\t}\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_980/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:01.769960958 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_980/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:01.773960970 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n@@ -897,7 +896,8 @@\n     }\n     while (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n-        return true;\n+        int index = -1;\n+\t\treturn true;\n       }\n       target = target.getParent();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_980/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:01.773960970 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:07.306369789 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -226,10 +226,13 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +257,210 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase CAST:\n+\t\t\t\treturn \"CAST\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\tcase LB:\n+\t\t\t\treturn \"LB\";\n+\t\t\tcase LC:\n+\t\t\t\treturn \"LC\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\t}\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:07.306369789 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:07.306369789 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:07.310369803 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,11 +1424,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_268/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:28.001368927 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_268/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:28.005368930 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_268/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:28.005368930 -0500\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1151/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:48.330298765 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -226,10 +226,13 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1151/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:48.334298780 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1151/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:48.334298780 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1151/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:48.334298780 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,11 +1424,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_884/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:03.749793429 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_884/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:03.753793443 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_884/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:03.753793443 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_884/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:03.753793443 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_884/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:03.757793455 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:33.874242233 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:33.874242233 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:33.878242249 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:33.878242249 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_251/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:17.161357013 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_251/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:17.161357013 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            this.cfg = cfg;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_251/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:17.165357018 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_486/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:43.077511080 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_486/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:43.081511085 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 900, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_938/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:35.749888632 -0500\n@@ -167,9 +167,6 @@\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n           }\n       }\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_938/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:35.753888643 -0500\n@@ -897,7 +897,8 @@\n     }\n     while (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n-        return true;\n+        int index = -1;\n+\t\treturn true;\n       }\n       target = target.getParent();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_938/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:35.753888643 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return ((StaticSourceFile)this.getProp(STATIC_SOURCE_FILE));"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_987/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:06.493973640 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_987/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:06.497973650 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_987/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:06.497973650 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_987/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:06.497973650 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_188/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:37.937313117 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_188/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:37.937313117 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_188/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:37.937313117 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_914/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:21.825848098 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_914/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:21.829848111 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_914/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:21.829848111 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_914/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:21.829848111 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_914/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:21.829848111 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:58.522545307 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -226,10 +226,13 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +257,210 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase CAST:\n+\t\t\t\treturn \"CAST\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\tcase LB:\n+\t\t\t\treturn \"LB\";\n+\t\t\tcase LC:\n+\t\t\t\treturn \"LC\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\t}\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:58.522545307 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:58.522545307 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:58.526545319 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,11 +1424,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1188/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:09.798378861 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -226,10 +226,13 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1188/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:09.798378861 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1188/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:09.802378875 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1188/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:09.802378875 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,11 +1424,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_120/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:48.545255831 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_120/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:39:48.545255831 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tint start = 0;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_120/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:48.549255836 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_129/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:55.465264008 -0500\n@@ -210,7 +210,10 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\t}\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_129/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:55.469264013 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_129/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:39:55.469264013 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_129/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:55.469264013 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1047/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:43.398068341 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1047/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:43.398068341 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1047/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:43.402068352 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1047/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:43.402068352 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1452,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_962/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:50.049928912 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_962/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:50.049928912 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_962/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:50.049928912 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_962/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:50.053928924 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int slashV1 = this.getIntProp(SLASH_V);\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_971/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:55.149942962 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_971/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:55.149942962 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    Node block = new Node(Token.SCRIPT);\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_971/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:55.153942972 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_16/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:38:32.133157184 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_16/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:38:32.137157188 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_127/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:54.613263004 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_127/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:54.613263004 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_384/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:42.201448301 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_384/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:42.201448301 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_384/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:42.205448304 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_663/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:33.933621458 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_663/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:33.933621458 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_663/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:33.933621458 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_663/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:33.937621461 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,20 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\tPreconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1461,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_203/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:46.109322372 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_203/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:46.109322372 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:26.442212307 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:26.446212325 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1112/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:26.446212325 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1452,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_710/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:05.089651776 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_710/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:05.113651799 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_710/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:05.113651799 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_710/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:05.117651802 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_710/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:05.117651802 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_891/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:08.853809109 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_891/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:08.853809109 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_891/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:08.857809121 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_891/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:08.857809121 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_891/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:08.857809121 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_166/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:22.385295340 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_166/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:22.389295343 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_863/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:51.253754203 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_863/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:51.253754203 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_863/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:51.257754215 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_863/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:51.257754215 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:04.510359542 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:04.514359556 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1178/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:04.514359556 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_393/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:47.641453987 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_393/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:47.641453987 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_393/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:47.641453987 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1441,7 +1433,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:42.446276015 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:42.450276032 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:42.450276032 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:42.454276047 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_338/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:12.265416700 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_338/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:12.269416703 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_338/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:12.269416703 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,7 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        StringBuilder s = new StringBuilder();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1444,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_107/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:40.345246076 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_107/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:39:40.349246080 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tint start = 0;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_107/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:40.349246080 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_402/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:53.873460484 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"SCRIPT\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_402/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:53.873460484 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_402/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:53.877460487 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_647/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:23.529611273 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_647/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:23.529611273 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:45.982504357 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:45.982504357 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1249/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:45.986504370 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_196/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:42.809318641 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_196/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:40:42.813318647 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_196/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:42.813318647 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_537/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:13.677541997 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_537/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:13.677541997 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1260/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:53.214528124 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1260/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:53.214528124 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1260/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:53.214528124 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_640/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:18.305606148 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_640/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:18.309606152 -0500\n@@ -159,32 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n-      return next;\n+      int start = 0;\n+\treturn next;\n     }\n \n     private void removeDeadExprStatementSafely(Node n) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_640/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:45:18.309606152 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_640/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:18.309606152 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_640/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:18.313606155 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_272/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:29.717370803 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_272/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:29.721370809 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_272/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:29.721370809 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_272/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:29.721370809 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_82/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:22.717224839 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_82/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:22.717224839 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_82/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:22.721224845 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_922/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:26.053860548 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_922/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:26.053860548 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_922/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:26.057860561 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    Node block = new Node(Token.SCRIPT);\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_922/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:26.057860561 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_336/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:11.341415716 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_336/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:11.341415716 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_336/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:11.345415719 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1441,7 +1433,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_633/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:13.761601682 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_633/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:13.761601682 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_633/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:45:13.761601682 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_633/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:13.765601685 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_633/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:13.765601685 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +952,10 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\tPreconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_303/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:49.397392186 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_303/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:49.397392186 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_303/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:49.397392186 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1440,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_419/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:03.677470660 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_419/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:03.681470663 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_419/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:43:03.681470663 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_198/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:43.585319519 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:36.058050095 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:36.058050095 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:36.058050095 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:36.062050106 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int slashV1 = this.getIntProp(SLASH_V);\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"BLOCK\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_97/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:33.505237879 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_97/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:33.505237879 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_97/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:33.505237879 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_318/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:59.821403402 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_318/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:59.825403406 -0500\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_605/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:53.921582111 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_605/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:53.921582111 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_605/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:53.921582111 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_625/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:07.001595027 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_625/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:07.001595027 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_625/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:07.005595032 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_625/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:07.005595032 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +952,10 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\tPreconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:47.510295616 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:47.514295631 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:47.514295631 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:47.514295631 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_960/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:49.225926626 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_960/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:49.225926626 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_960/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:49.225926626 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_960/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:49.229926637 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_960/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:49.229926637 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1220/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:30.182450946 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1220/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:30.182450946 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1220/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:30.182450946 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1220/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:30.186450959 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:44.998285928 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:44.998285928 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:45.002285942 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:45.002285942 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_458/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:26.837494509 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_458/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:26.837494509 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_458/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:26.837494509 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_149/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:10.145281184 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_149/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:10.145281184 -0500\n@@ -155,35 +155,14 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_149/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:10.145281184 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_811/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:17.501721346 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_811/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:17.501721346 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_811/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:17.505721349 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 900, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_965/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:51.813933789 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_965/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:51.813933789 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_965/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:51.813933789 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n@@ -897,7 +896,8 @@\n     }\n     while (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n-        return true;\n+        int index = -1;\n+\t\treturn true;\n       }\n       target = target.getParent();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_965/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:51.817933800 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:28.090443717 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:28.090443717 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:28.090443717 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_371/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:34.705440437 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_371/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:34.705440437 -0500\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_378/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:38.661444591 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_378/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:38.661444591 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_378/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:38.661444591 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_882/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:02.837790608 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_882/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:02.837790608 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_882/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:02.837790608 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_882/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:02.841790620 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_592/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:46.701574957 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_592/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:46.705574960 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_592/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:46.705574960 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +952,9 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_603/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:53.117581315 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_603/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:53.117581315 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_386/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:43.001449137 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_386/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:43.005449143 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_386/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:43.005449143 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "return \"SCRIPT\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_417/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:02.325469260 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          return \"SCRIPT\";\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_417/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:02.329469263 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_417/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:02.329469263 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_734/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:23.205669291 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_734/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:23.209669295 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_734/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:23.209669295 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_734/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:23.209669295 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_734/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:23.213669298 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_835/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:33.353736433 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_835/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:33.353736433 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_835/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:33.353736433 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_835/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:47:33.357736436 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_835/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:33.357736436 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_826/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:27.981731325 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_826/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:47:27.981731325 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_826/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:27.981731325 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_975/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:58.413951867 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_975/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:58.413951867 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_975/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:58.413951867 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_975/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:58.417951879 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_975/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:58.417951879 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_803/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:13.053717103 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_803/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:13.053717103 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_803/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:13.057717109 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_803/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:13.057717109 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:31.426232441 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:31.426232441 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:31.430232457 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1120/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:31.430232457 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:50.362085399 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:50.362085399 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:50.366085409 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1058/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:50.366085409 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_489/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:44.741512771 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_489/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:44.745512777 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_489/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:44.745512777 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_415/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:01.421468322 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_415/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:01.425468327 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_415/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:01.425468327 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_861/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:50.341752615 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_861/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:50.345752620 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_861/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:50.345752620 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_861/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:50.345752620 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 899, 
          "faulty": "if (target.getFirstChild().getString().equals(label)) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "Node block=script();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_534/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:11.685539997 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_534/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:11.685539997 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_534/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:11.689540001 -0500\n@@ -896,7 +896,8 @@\n       return true;\n     }\n     while (target.isLabel()) {\n-      if (target.getFirstChild().getString().equals(label)) {\n+      int index = -1;\n+\tif (target.getFirstChild().getString().equals(label)) {\n         return true;\n       }\n       target = target.getParent();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_534/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:11.689540001 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.PARAM_LIST);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_994/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:11.533987024 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_994/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:11.537987034 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_994/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:11.537987034 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_994/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:11.537987034 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:51.878312314 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:51.878312314 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:51.882312329 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1010/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:21.874014023 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1010/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:21.878014033 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1010/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:21.878014033 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1010/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:21.878014033 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int slashV1 = this.getIntProp(SLASH_V);\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "PropListItem x=propListHead;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_654/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:27.053614727 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_654/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:27.053614727 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_654/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:27.057614730 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_654/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:27.057614730 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,14 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,7 +1426,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        PropListItem x = propListHead;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_998/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:14.301994311 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return \"BITOR\";\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_998/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:14.301994311 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_998/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:14.301994311 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_998/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:14.305994322 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_286/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:38.101379947 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_286/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:38.101379947 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_286/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:38.105379950 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_286/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:38.105379950 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_755/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:37.417682978 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_755/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:37.421682982 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_755/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:37.421682982 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_845/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:40.185742920 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_845/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:40.189742925 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_845/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:40.189742925 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:52.394525448 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:52.394525448 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:52.398525462 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1258/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:52.398525462 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_307/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:51.989394981 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_307/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:51.993394985 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_307/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:41:51.993394985 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_551/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:22.333550676 -0500\n@@ -159,25 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n+      int start = 0;\n+\twhile (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n         } else {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_551/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:22.337550680 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +952,9 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "InsertBefore", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1100/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:18.730180614 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1100/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:18.734180629 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1100/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:18.734180629 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1100/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:18.734180629 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1455,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_553/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:23.233551576 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_553/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:23.237551579 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      int type = n.getType();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_553/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:23.237551579 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +955,13 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 898, 
          "faulty": "while (target.isLabel()) {\n  if (target.getFirstChild().getString().equals(label)) {\n    return true;\n  }\n  target=target.getParent();\n}", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_728/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:18.505664755 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_728/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:18.505664755 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_728/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:46:18.509664758 -0500\n@@ -895,7 +895,8 @@\n     if (label == null) {\n       return true;\n     }\n-    while (target.isLabel()) {\n+    final String paramName = \"jscomp_throw_param\";\n+\twhile (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n         return true;\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_728/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:18.509664758 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_265/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:26.081366822 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_265/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:26.081366822 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 900, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "InsertBefore", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return \"EMPTY\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:18.586005504 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,10 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           {\n+\t\t\t\tStringBuilder s = new StringBuilder();\n+\t\t\t\treturn \"LABEL\";\n+\t\t\t}\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:18.590005514 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:18.590005514 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n@@ -897,7 +896,8 @@\n     }\n     while (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n-        return true;\n+        int index = -1;\n+\t\treturn true;\n       }\n       target = target.getParent();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:18.590005514 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:35.150247310 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return \"BITOR\";\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:35.150247310 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:35.154247326 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:35.154247326 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int c=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_256/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:20.241360408 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_256/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:20.241360408 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_256/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:20.245360411 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1020/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:27.538028559 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1020/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:27.538028559 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_528/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:08.257536550 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_528/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:08.261536554 -0500\n@@ -958,7 +958,7 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        int lineno = getLineno();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_496/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:48.973517069 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_496/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:48.977517072 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_496/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:43:48.977517072 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_496/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:43:48.977517072 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_496/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:48.981517077 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_208/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:40:49.573326275 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_208/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:49.577326280 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_208/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:49.577326280 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_18/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:38:33.017158576 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_18/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:38:33.017158576 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_18/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:38:33.021158583 -0500\n@@ -951,7 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      sb.append('\\n');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_870/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:54.561764705 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_870/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:54.565764718 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_870/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:54.565764718 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_870/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:54.565764718 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_194/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:40:41.893317604 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_194/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:40:41.893317604 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 179, 
          "faulty": "Node next=ControlFlowAnalysis.computeFollowNode(n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:02.910559351 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:52:02.910559351 -0500\n@@ -159,24 +159,14 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          int start = 0;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n-      Node next = ControlFlowAnalysis.computeFollowNode(n);\n+      StringBuilder builder = new StringBuilder();\n+\tNode next = ControlFlowAnalysis.computeFollowNode(n);\n       while (next != null && next.isBlock()) {\n         if (next.hasChildren()) {\n           next = next.getFirstChild();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:52:02.910559351 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1278/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:02.914559362 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1013/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:23.534018301 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1013/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:23.538018311 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1013/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:23.538018311 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1013/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:23.538018311 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 900, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_904/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:16.473832160 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_904/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:16.473832160 -0500\n@@ -897,7 +897,8 @@\n     }\n     while (target.isLabel()) {\n       if (target.getFirstChild().getString().equals(label)) {\n-        return true;\n+        int index = -1;\n+\t\treturn true;\n       }\n       target = target.getParent();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_904/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:16.473832160 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_479/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:38.825506753 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_479/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:38.829506758 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_479/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:38.829506758 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_929/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:29.525870678 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_929/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:29.529870689 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_929/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:29.529870689 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_929/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:29.529870689 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_597/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:49.537577769 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_597/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:49.541577773 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_597/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:49.541577773 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_597/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:49.545577776 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_503/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:52.385520527 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             StringBuilder s = new StringBuilder();\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_503/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:52.385520527 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_503/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:52.389520531 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1454,7 +1457,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_346/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:16.685421399 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_346/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:16.689421404 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_346/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:42:16.689421404 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_346/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:16.689421404 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,7 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        StringBuilder s = new StringBuilder();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_562/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:27.397555738 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_562/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:27.401555744 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_562/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:27.401555744 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_562/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:27.405555747 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,7 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        int lineno = getLineno();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_700/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:58.185645080 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_700/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:58.189645084 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_700/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:45:58.189645084 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_700/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:58.189645084 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_700/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:58.193645087 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1222/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:30.998453755 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          int count = 0;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1222/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:30.998453755 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1222/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:31.002453770 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1222/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:31.002453770 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1141/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:43.250279145 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1141/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:43.250279145 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1141/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:43.254279162 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,7 +954,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1253/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:48.534512789 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,10 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1253/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:48.534512789 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1253/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:48.538512802 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"SUB\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.SCRIPT);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1273/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:52:00.262550892 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,10 +226,13 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             {\n+\t\t\t\tNode block = new Node(Token.SCRIPT);\n+\t\t\t\treturn \"TRY\";\n+\t\t\t}\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -254,7 +257,210 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           switch (token) {\n+\t\t\tcase ERROR:\n+\t\t\t\treturn \"ERROR\";\n+\t\t\tcase RETURN:\n+\t\t\t\treturn \"RETURN\";\n+\t\t\tcase BITOR:\n+\t\t\t\treturn \"BITOR\";\n+\t\t\tcase BITXOR:\n+\t\t\t\treturn \"BITXOR\";\n+\t\t\tcase BITAND:\n+\t\t\t\treturn \"BITAND\";\n+\t\t\tcase EQ:\n+\t\t\t\treturn \"EQ\";\n+\t\t\tcase NE:\n+\t\t\t\treturn \"NE\";\n+\t\t\tcase LT:\n+\t\t\t\treturn \"LT\";\n+\t\t\tcase LE:\n+\t\t\t\treturn \"LE\";\n+\t\t\tcase GT:\n+\t\t\t\treturn \"GT\";\n+\t\t\tcase GE:\n+\t\t\t\treturn \"GE\";\n+\t\t\tcase LSH:\n+\t\t\t\treturn \"LSH\";\n+\t\t\tcase RSH:\n+\t\t\t\treturn \"RSH\";\n+\t\t\tcase URSH:\n+\t\t\t\treturn \"URSH\";\n+\t\t\tcase ADD:\n+\t\t\t\treturn \"ADD\";\n+\t\t\tcase SUB:\n+\t\t\t\treturn \"SUB\";\n+\t\t\tcase MUL:\n+\t\t\t\treturn \"MUL\";\n+\t\t\tcase DIV:\n+\t\t\t\treturn \"DIV\";\n+\t\t\tcase MOD:\n+\t\t\t\treturn \"MOD\";\n+\t\t\tcase NOT:\n+\t\t\t\treturn \"NOT\";\n+\t\t\tcase BITNOT:\n+\t\t\t\treturn \"BITNOT\";\n+\t\t\tcase POS:\n+\t\t\t\treturn \"POS\";\n+\t\t\tcase NEG:\n+\t\t\t\treturn \"NEG\";\n+\t\t\tcase NEW:\n+\t\t\t\treturn \"NEW\";\n+\t\t\tcase DELPROP:\n+\t\t\t\treturn \"DELPROP\";\n+\t\t\tcase TYPEOF:\n+\t\t\t\treturn \"TYPEOF\";\n+\t\t\tcase GETPROP:\n+\t\t\t\treturn \"GETPROP\";\n+\t\t\tcase GETELEM:\n+\t\t\t\treturn \"GETELEM\";\n+\t\t\tcase CALL:\n+\t\t\t\treturn \"CALL\";\n+\t\t\tcase NAME:\n+\t\t\t\treturn \"NAME\";\n+\t\t\tcase LABEL_NAME:\n+\t\t\t\treturn \"LABEL_NAME\";\n+\t\t\tcase NUMBER:\n+\t\t\t\treturn \"NUMBER\";\n+\t\t\tcase STRING:\n+\t\t\t\treturn \"STRING\";\n+\t\t\tcase STRING_KEY:\n+\t\t\t\treturn \"STRING_KEY\";\n+\t\t\tcase NULL:\n+\t\t\t\treturn \"NULL\";\n+\t\t\tcase THIS:\n+\t\t\t\treturn \"THIS\";\n+\t\t\tcase FALSE:\n+\t\t\t\treturn \"FALSE\";\n+\t\t\tcase TRUE:\n+\t\t\t\treturn \"TRUE\";\n+\t\t\tcase SHEQ:\n+\t\t\t\treturn \"SHEQ\";\n+\t\t\tcase SHNE:\n+\t\t\t\treturn \"SHNE\";\n+\t\t\tcase REGEXP:\n+\t\t\t\treturn \"REGEXP\";\n+\t\t\tcase THROW:\n+\t\t\t\treturn \"THROW\";\n+\t\t\tcase IN:\n+\t\t\t\treturn \"IN\";\n+\t\t\tcase INSTANCEOF:\n+\t\t\t\treturn \"INSTANCEOF\";\n+\t\t\tcase ARRAYLIT:\n+\t\t\t\treturn \"ARRAYLIT\";\n+\t\t\tcase OBJECTLIT:\n+\t\t\t\treturn \"OBJECTLIT\";\n+\t\t\tcase TRY:\n+\t\t\t\treturn \"TRY\";\n+\t\t\tcase PARAM_LIST:\n+\t\t\t\treturn \"PARAM_LIST\";\n+\t\t\tcase COMMA:\n+\t\t\t\treturn \"COMMA\";\n+\t\t\tcase ASSIGN:\n+\t\t\t\treturn \"ASSIGN\";\n+\t\t\tcase ASSIGN_BITOR:\n+\t\t\t\treturn \"ASSIGN_BITOR\";\n+\t\t\tcase ASSIGN_BITXOR:\n+\t\t\t\treturn \"ASSIGN_BITXOR\";\n+\t\t\tcase ASSIGN_BITAND:\n+\t\t\t\treturn \"ASSIGN_BITAND\";\n+\t\t\tcase ASSIGN_LSH:\n+\t\t\t\treturn \"ASSIGN_LSH\";\n+\t\t\tcase ASSIGN_RSH:\n+\t\t\t\treturn \"ASSIGN_RSH\";\n+\t\t\tcase ASSIGN_URSH:\n+\t\t\t\treturn \"ASSIGN_URSH\";\n+\t\t\tcase ASSIGN_ADD:\n+\t\t\t\treturn \"ASSIGN_ADD\";\n+\t\t\tcase ASSIGN_SUB:\n+\t\t\t\treturn \"ASSIGN_SUB\";\n+\t\t\tcase ASSIGN_MUL:\n+\t\t\t\treturn \"ASSIGN_MUL\";\n+\t\t\tcase ASSIGN_DIV:\n+\t\t\t\treturn \"ASSIGN_DIV\";\n+\t\t\tcase ASSIGN_MOD:\n+\t\t\t\treturn \"ASSIGN_MOD\";\n+\t\t\tcase HOOK:\n+\t\t\t\treturn \"HOOK\";\n+\t\t\tcase OR:\n+\t\t\t\treturn \"OR\";\n+\t\t\tcase AND:\n+\t\t\t\treturn \"AND\";\n+\t\t\tcase INC:\n+\t\t\t\treturn \"INC\";\n+\t\t\tcase DEC:\n+\t\t\t\treturn \"DEC\";\n+\t\t\tcase FUNCTION:\n+\t\t\t\treturn \"FUNCTION\";\n+\t\t\tcase IF:\n+\t\t\t\treturn \"IF\";\n+\t\t\tcase SWITCH:\n+\t\t\t\treturn \"SWITCH\";\n+\t\t\tcase CASE:\n+\t\t\t\treturn \"CASE\";\n+\t\t\tcase DEFAULT_CASE:\n+\t\t\t\treturn \"DEFAULT_CASE\";\n+\t\t\tcase WHILE:\n+\t\t\t\treturn \"WHILE\";\n+\t\t\tcase DO:\n+\t\t\t\treturn \"DO\";\n+\t\t\tcase FOR:\n+\t\t\t\treturn \"FOR\";\n+\t\t\tcase BREAK:\n+\t\t\t\treturn \"BREAK\";\n+\t\t\tcase CONTINUE:\n+\t\t\t\treturn \"CONTINUE\";\n+\t\t\tcase VAR:\n+\t\t\t\treturn \"VAR\";\n+\t\t\tcase WITH:\n+\t\t\t\treturn \"WITH\";\n+\t\t\tcase CATCH:\n+\t\t\t\treturn \"CATCH\";\n+\t\t\tcase EMPTY:\n+\t\t\t\treturn \"EMPTY\";\n+\t\t\tcase BLOCK:\n+\t\t\t\treturn \"BLOCK\";\n+\t\t\tcase LABEL:\n+\t\t\t\treturn \"LABEL\";\n+\t\t\tcase EXPR_RESULT:\n+\t\t\t\treturn \"EXPR_RESULT\";\n+\t\t\tcase SCRIPT:\n+\t\t\t\treturn \"SCRIPT\";\n+\t\t\tcase GETTER_DEF:\n+\t\t\t\treturn \"GETTER_DEF\";\n+\t\t\tcase SETTER_DEF:\n+\t\t\t\treturn \"SETTER_DEF\";\n+\t\t\tcase CONST:\n+\t\t\t\treturn \"CONST\";\n+\t\t\tcase DEBUGGER:\n+\t\t\t\treturn \"DEBUGGER\";\n+\t\t\tcase CAST:\n+\t\t\t\treturn \"CAST\";\n+\t\t\tcase ANNOTATION:\n+\t\t\t\treturn \"ANNOTATION\";\n+\t\t\tcase PIPE:\n+\t\t\t\treturn \"PIPE\";\n+\t\t\tcase STAR:\n+\t\t\t\treturn \"STAR\";\n+\t\t\tcase EOC:\n+\t\t\t\treturn \"EOC\";\n+\t\t\tcase QMARK:\n+\t\t\t\treturn \"QMARK\";\n+\t\t\tcase ELLIPSIS:\n+\t\t\t\treturn \"ELLIPSIS\";\n+\t\t\tcase BANG:\n+\t\t\t\treturn \"BANG\";\n+\t\t\tcase VOID:\n+\t\t\t\treturn \"VOID\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"EQUALS\";\n+\t\t\tcase LB:\n+\t\t\t\treturn \"LB\";\n+\t\t\tcase LC:\n+\t\t\t\treturn \"LC\";\n+\t\t\tcase COLON:\n+\t\t\t\treturn \"COLON\";\n+\t\t\t}\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1273/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:52:00.262550892 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1273/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:52:00.266550906 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1273/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:52:00.266550906 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1425,11 +1426,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"SUB\";\n       }\n       return null;\n   }\n@@ -1441,7 +1438,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      StaticSourceFile file = getStaticSourceFile();\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1454,7 +1452,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_868/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:53.741762109 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_868/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:53.741762109 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_868/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:47:53.741762109 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_868/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:53.745762123 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_868/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:53.745762123 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_991/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:09.257980999 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_991/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:09.257980999 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_991/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:09.261981009 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_991/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:09.261981009 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: return null;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "JSDocInfo jsDocInfo=getJSDocInfo();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:33.638044018 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:33.638044018 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:33.638044018 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:33.642044027 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        JSDocInfo jsDocInfo = getJSDocInfo();\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1228/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:33.830463463 -0500\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1228/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:33.834463477 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1228/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:33.834463477 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1228/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:33.834463477 -0500\n@@ -952,13 +952,13 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Node block = new Node(Token.BLOCK);\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_794/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:47:06.553710899 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_794/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:47:06.557710903 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_794/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:47:06.557710903 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_794/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:47:06.557710903 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 899, 
          "faulty": "if (target.getFirstChild().getString().equals(label)) {\n  return true;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_512/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:58.005526212 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_512/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:58.009526215 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_512/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:43:58.009526215 -0500\n@@ -896,7 +896,8 @@\n       return true;\n     }\n     while (target.isLabel()) {\n-      if (target.getFirstChild().getString().equals(label)) {\n+      int index = -1;\n+\tif (target.getFirstChild().getString().equals(label)) {\n         return true;\n       }\n       target = target.getParent();\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_512/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:58.009526215 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1158/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:52.802315821 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1158/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:52.802315821 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1158/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:52.806315836 -0500\n@@ -951,14 +951,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1439,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      StaticSourceFile file = getStaticSourceFile();\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_505/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:53.349521503 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_505/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:53.353521507 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_505/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:43:53.353521507 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_505/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:53.353521507 -0500\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_293/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:42.517384741 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_293/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:42.521384747 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_293/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:42.521384747 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,15 +954,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_409/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:57.321464067 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_409/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:57.321464067 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_409/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:57.325464072 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_782/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:56.993701757 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_782/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:56.997701761 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_782/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:56.997701761 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:00.178343519 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:00.178343519 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1170/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:00.178343519 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +954,12 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_71/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:39:14.237214490 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_71/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:39:14.241214497 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_71/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:39:14.241214497 -0500\n@@ -951,14 +951,13 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n+      sb.append('\\n');\n       // In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_920/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:25.157857921 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_920/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:25.157857921 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_920/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:48:25.161857931 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_920/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:25.161857931 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_649/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:24.565612288 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_649/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:24.565612288 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_649/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:45:24.569612292 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_570/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:33.321561651 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_570/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:33.325561655 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_570/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:33.325561655 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_570/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:33.325561655 -0500\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_518/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:01.497529738 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_518/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:01.501529741 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_518/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:01.501529741 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_518/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:01.505529746 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +955,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n@@ -1441,7 +1445,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1428, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "InsertBefore", 
          "seed": "PropListItem x=propListHead;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_717/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:46:09.305655859 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_717/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:46:09.305655859 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_717/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:46:09.305655859 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_717/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:46:09.309655864 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,8 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1425,7 +1419,8 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n+        PropListItem x = propListHead;\n+\t\treturn \"Node tree inequality:\" +\n             \"\\nTree1:\\n\" + toStringTree() +\n             \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n             \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_619/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:02.453590543 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_619/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:02.457590547 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_619/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:02.457590547 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,13 +952,18 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_328/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:05.285409253 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_328/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:05.285409253 -0500\n@@ -159,32 +159,15 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n-      return next;\n+      int index = -1;\n+\treturn next;\n     }\n \n     private void removeDeadExprStatementSafely(Node n) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_328/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:42:05.285409253 -0500\n@@ -851,7 +851,8 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n+        int index = -1;\n+\t\tlastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_328/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:05.289409258 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_441/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:17.261484680 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_441/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:17.261484680 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_481/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:39.641507585 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_481/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:39.645507589 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_481/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:43:39.645507589 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_449/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:21.589489128 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_449/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:21.589489128 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_449/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:21.589489128 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Replace", 
          "seed": "sb.append('\\n');"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_42/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:38:53.025188204 -0500\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return null;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_42/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:38:53.029188208 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_42/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:38:53.029188208 -0500\n@@ -951,15 +951,7 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      sb.append('\\n');\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_388/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:44.069450256 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_388/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:44.069450256 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_388/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:42:44.073450259 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_388/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:44.073450259 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1441,7 +1440,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:10.918147821 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:10.922147838 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:10.922147838 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:10.922147838 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_897/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:12.181819229 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_897/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:12.181819229 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_897/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:48:12.185819240 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_897/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:12.185819240 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_423/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:06.185473255 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_423/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:06.189473260 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_423/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:06.189473260 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return jsType;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_498/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:49.797517904 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_498/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:49.797517904 -0500\n@@ -1454,7 +1454,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_669/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:45:37.821625256 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_669/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:45:37.821625256 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_669/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:45:37.825625259 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_669/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:45:37.825625259 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_669/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:45:37.825625259 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:41.766064309 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1043/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:41.766064309 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Replace", 
          "seed": "int slashV1=this.getIntProp(SLASH_V);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1003/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:17.754003338 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1003/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:17.758003348 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1003/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:17.758003348 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1003/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:17.758003348 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +952,7 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n+      int slashV1 = this.getIntProp(SLASH_V);\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_523/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:04.785533052 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_523/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:04.785533052 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_523/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:04.789533058 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:46.262075387 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           return \"BITOR\";\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:46.262075387 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:46.262075387 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1052/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:46.266075397 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_310/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:53.621396739 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_310/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:53.625396743 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_310/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:41:53.625396743 -0500\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_427/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:08.873476034 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_427/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:08.877476037 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_427/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:08.877476037 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 264, 
          "faulty": "return \"LABEL\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_405/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:55.477462151 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -261,7 +261,7 @@\n           case CATCH:           return \"CATCH\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n-          case LABEL:           return \"LABEL\";\n+          case LABEL:           ;\n           case EXPR_RESULT:     return \"EXPR_RESULT\";\n           case SCRIPT:          return \"SCRIPT\";\n           case GETTER_DEF:      return \"GETTER_DEF\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_405/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:55.481462156 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_405/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:55.481462156 -0500\n@@ -952,14 +952,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1441,7 +1433,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Preconditions.checkState(this.propListHead == null,\"Node has existing properties.\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_493/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:47.173515242 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_493/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:47.177515245 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_493/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:47.177515245 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: StringBuilder s = new StringBuilder();\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,7 +952,9 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Preconditions.checkState(this.propListHead == null,\n+\t\t\t\"Node has existing properties.\");\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_927/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:48:28.709868305 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_927/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:48:28.709868305 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_927/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:48:28.709868305 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "this.cfg=cfg;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_567/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:31.301559637 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_567/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:31.301559637 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 842, 
          "faulty": "createEdge(cfgNode,Branch.ON_EX,handler.getLastChild());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Replace", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "PropListItem item=lookupProperty(propType);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_594/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:44:47.749575995 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      return \"RETURN\";\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_594/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:47.749575995 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_594/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:44:47.753576000 -0500\n@@ -839,7 +839,8 @@\n \n         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n           if (lastJump == cfgNode) {\n-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n+            int index = -1;\n+\t\t\tcreateEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n           } else {\n             finallyMap.put(lastJump, handler.getLastChild());\n           }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_594/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:47.753576000 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_594/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:47.753576000 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 161, 
          "faulty": "List<DiGraphEdge<Node,Branch>> outEdges=gNode.getOutEdges();", 
          "type": "Delete", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 257, 
          "faulty": "return \"BREAK\";", 
          "type": "Delete", 
          "seed": "return -1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "Node block=new Node(Token.BLOCK);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:51:27.086440233 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n@@ -254,7 +254,7 @@\n           case WHILE:           return \"WHILE\";\n           case DO:              return \"DO\";\n           case FOR:             return \"FOR\";\n-          case BREAK:           return \"BREAK\";\n+          case BREAK:           ;\n           case CONTINUE:        return \"CONTINUE\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:51:27.090440247 -0500\n@@ -155,22 +155,8 @@\n           }\n         case Token.BREAK:\n         case Token.CONTINUE:\n-          // We are looking for a control flow changing statement that always\n-          // branches to the same node. If after removing it control still\n-          // branches to the same node, it is safe to remove.\n-          List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:51:27.094440262 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1214/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:51:27.094440262 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,14 +951,13 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      Node block = new Node(Token.BLOCK);\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_396/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:42:49.273455691 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_396/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:42:49.273455691 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_396/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:42:49.277455694 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +961,7 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        StringBuilder s = new StringBuilder();\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "if (type == Token.FUNCTION) {\n  sb.append(' ');\n  if (first == null || first.getType() != Token.NAME) {\n    sb.append(\"<invalid>\");\n  }\n else {\n    sb.append(first.getString());\n  }\n}\n else if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1105/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:22.294195344 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1105/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:22.298195359 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1105/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:22.298195359 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1105/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:22.298195359 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -951,15 +954,6 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1454,7 +1448,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "return \"RETURN\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase ERROR:\n  return \"ERROR\";\ncase RETURN:\nreturn \"RETURN\";\ncase BITOR:\nreturn \"BITOR\";\ncase BITXOR:\nreturn \"BITXOR\";\ncase BITAND:\nreturn \"BITAND\";\ncase EQ:\nreturn \"EQ\";\ncase NE:\nreturn \"NE\";\ncase LT:\nreturn \"LT\";\ncase LE:\nreturn \"LE\";\ncase GT:\nreturn \"GT\";\ncase GE:\nreturn \"GE\";\ncase LSH:\nreturn \"LSH\";\ncase RSH:\nreturn \"RSH\";\ncase URSH:\nreturn \"URSH\";\ncase ADD:\nreturn \"ADD\";\ncase SUB:\nreturn \"SUB\";\ncase MUL:\nreturn \"MUL\";\ncase DIV:\nreturn \"DIV\";\ncase MOD:\nreturn \"MOD\";\ncase NOT:\nreturn \"NOT\";\ncase BITNOT:\nreturn \"BITNOT\";\ncase POS:\nreturn \"POS\";\ncase NEG:\nreturn \"NEG\";\ncase NEW:\nreturn \"NEW\";\ncase DELPROP:\nreturn \"DELPROP\";\ncase TYPEOF:\nreturn \"TYPEOF\";\ncase GETPROP:\nreturn \"GETPROP\";\ncase GETELEM:\nreturn \"GETELEM\";\ncase CALL:\nreturn \"CALL\";\ncase NAME:\nreturn \"NAME\";\ncase LABEL_NAME:\nreturn \"LABEL_NAME\";\ncase NUMBER:\nreturn \"NUMBER\";\ncase STRING:\nreturn \"STRING\";\ncase STRING_KEY:\nreturn \"STRING_KEY\";\ncase NULL:\nreturn \"NULL\";\ncase THIS:\nreturn \"THIS\";\ncase FALSE:\nreturn \"FALSE\";\ncase TRUE:\nreturn \"TRUE\";\ncase SHEQ:\nreturn \"SHEQ\";\ncase SHNE:\nreturn \"SHNE\";\ncase REGEXP:\nreturn \"REGEXP\";\ncase THROW:\nreturn \"THROW\";\ncase IN:\nreturn \"IN\";\ncase INSTANCEOF:\nreturn \"INSTANCEOF\";\ncase ARRAYLIT:\nreturn \"ARRAYLIT\";\ncase OBJECTLIT:\nreturn \"OBJECTLIT\";\ncase TRY:\nreturn \"TRY\";\ncase PARAM_LIST:\nreturn \"PARAM_LIST\";\ncase COMMA:\nreturn \"COMMA\";\ncase ASSIGN:\nreturn \"ASSIGN\";\ncase ASSIGN_BITOR:\nreturn \"ASSIGN_BITOR\";\ncase ASSIGN_BITXOR:\nreturn \"ASSIGN_BITXOR\";\ncase ASSIGN_BITAND:\nreturn \"ASSIGN_BITAND\";\ncase ASSIGN_LSH:\nreturn \"ASSIGN_LSH\";\ncase ASSIGN_RSH:\nreturn \"ASSIGN_RSH\";\ncase ASSIGN_URSH:\nreturn \"ASSIGN_URSH\";\ncase ASSIGN_ADD:\nreturn \"ASSIGN_ADD\";\ncase ASSIGN_SUB:\nreturn \"ASSIGN_SUB\";\ncase ASSIGN_MUL:\nreturn \"ASSIGN_MUL\";\ncase ASSIGN_DIV:\nreturn \"ASSIGN_DIV\";\ncase ASSIGN_MOD:\nreturn \"ASSIGN_MOD\";\ncase HOOK:\nreturn \"HOOK\";\ncase OR:\nreturn \"OR\";\ncase AND:\nreturn \"AND\";\ncase INC:\nreturn \"INC\";\ncase DEC:\nreturn \"DEC\";\ncase FUNCTION:\nreturn \"FUNCTION\";\ncase IF:\nreturn \"IF\";\ncase SWITCH:\nreturn \"SWITCH\";\ncase CASE:\nreturn \"CASE\";\ncase DEFAULT_CASE:\nreturn \"DEFAULT_CASE\";\ncase WHILE:\nreturn \"WHILE\";\ncase DO:\nreturn \"DO\";\ncase FOR:\nreturn \"FOR\";\ncase BREAK:\nreturn \"BREAK\";\ncase CONTINUE:\nreturn \"CONTINUE\";\ncase VAR:\nreturn \"VAR\";\ncase WITH:\nreturn \"WITH\";\ncase CATCH:\nreturn \"CATCH\";\ncase EMPTY:\nreturn \"EMPTY\";\ncase BLOCK:\nreturn \"BLOCK\";\ncase LABEL:\nreturn \"LABEL\";\ncase EXPR_RESULT:\nreturn \"EXPR_RESULT\";\ncase SCRIPT:\nreturn \"SCRIPT\";\ncase GETTER_DEF:\nreturn \"GETTER_DEF\";\ncase SETTER_DEF:\nreturn \"SETTER_DEF\";\ncase CONST:\nreturn \"CONST\";\ncase DEBUGGER:\nreturn \"DEBUGGER\";\ncase CAST:\nreturn \"CAST\";\ncase ANNOTATION:\nreturn \"ANNOTATION\";\ncase PIPE:\nreturn \"PIPE\";\ncase STAR:\nreturn \"STAR\";\ncase EOC:\nreturn \"EOC\";\ncase QMARK:\nreturn \"QMARK\";\ncase ELLIPSIS:\nreturn \"ELLIPSIS\";\ncase BANG:\nreturn \"BANG\";\ncase VOID:\nreturn \"VOID\";\ncase EQUALS:\nreturn \"EQUALS\";\ncase LB:\nreturn \"LB\";\ncase LC:\nreturn \"LC\";\ncase COLON:\nreturn \"COLON\";\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1098/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:17.634176054 -0500\n@@ -210,7 +210,7 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1098/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:17.638176072 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1098/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:17.638176072 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1098/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:17.638176072 -0500\n@@ -119,7 +119,7 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: ;\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n@@ -1454,7 +1453,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "case BITOR:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1444, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.sourcePosition=sourcePosition;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "InsertBefore", 
          "seed": "String name=getString();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 954, 
          "faulty": "sb.append(' ');", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_434/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:13.001480292 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_434/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:13.005480297 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_434/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:13.005480297 -0500\n@@ -951,8 +951,8 @@\n       sb.append(' ');\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n-      sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n+      String name = getString();\n+\t// In the case of JsDoc trees, the first child is often not a string\n       // which causes exceptions to be thrown when calling toString or\n       // toStringTree.\n       if (first == null || first.getType() != Token.NAME) {\n@@ -1441,7 +1441,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.sourcePosition = sourcePosition;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 180, 
          "faulty": "while (next != null && next.isBlock()) {\n  if (next.hasChildren()) {\n    next=next.getFirstChild();\n  }\n else {\n    next=computeFollowing(next);\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_278/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:41:33.057374453 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_278/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:41:33.057374453 -0500\n@@ -159,31 +159,13 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n-      while (next != null && next.isBlock()) {\n-        if (next.hasChildren()) {\n-          next = next.getFirstChild();\n-        } else {\n-          next = computeFollowing(next);\n-        }\n-      }\n       return next;\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "this.cfg=cfg;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Delete", 
          "seed": "return this.getType() == Token.BLOCK;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_429/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:43:09.749476939 -0500\n@@ -214,7 +214,7 @@\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            ;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_429/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:09.749476939 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_429/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:09.749476939 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 168, 
          "faulty": "Node fallThrough=computeFollowing(n);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_514/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:43:58.809527024 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_514/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:43:58.809527024 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_514/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:58.809527024 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/InputId.java", 
          "line": 74, 
          "faulty": "return \"InputId: \" + getIdName();", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Replace", 
          "seed": "if (type == Token.NUMBER) {\n  sb.append(' ');\n  sb.append(getDouble());\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_581/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:44:40.625568922 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:32:10.192952247 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_581/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/InputId.java\t2018-12-02 05:44:40.625568922 -0500\n@@ -71,6 +71,7 @@\n \n   @Override\n   public String toString() {\n-    return \"InputId: \" + getIdName();\n+    int count = 0;\n+\treturn \"InputId: \" + getIdName();\n   }\n }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_581/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:44:40.625568922 -0500\n@@ -958,7 +958,10 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n+        if (type == Token.NUMBER) {\n+\t\t\tsb.append(' ');\n+\t\t\tsb.append(getDouble());\n+\t\t}\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "toString(sb,printSource,printAnnotations,printType);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 232, 
          "faulty": "return \"ASSIGN\";", 
          "type": "Delete", 
          "seed": "int lineno=getLineno();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1050/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:49:45.266072942 -0500\n@@ -229,7 +229,7 @@\n           case TRY:             return \"TRY\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n-          case ASSIGN:          return \"ASSIGN\";\n+          case ASSIGN:          ;\n           case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n           case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n           case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1050/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:49:45.266072942 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1050/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:49:45.266072942 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1050/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:49:45.270072952 -0500\n@@ -958,7 +958,6 @@\n       if (first == null || first.getType() != Token.NAME) {\n         sb.append(\"<invalid>\");\n       } else {\n-        sb.append(first.getString());\n       }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java", 
          "line": 854, 
          "faulty": "lastJump=handler;", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1457, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "switch (getType()) {\ncase Token.NAME:\n  return getString().isEmpty() ? false : true;\ncase Token.THIS:\nreturn true;\ncase Token.GETPROP:\nreturn getFirstChild().isQualifiedName();\ndefault :\nreturn false;\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "case SCRIPT:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "Delete", 
          "seed": "return \"ADD\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 961, 
          "faulty": "sb.append(first.getString());", 
          "type": "Delete", 
          "seed": "Node block=block();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 162, 
          "faulty": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) {\n  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n  Node fallThrough=computeFollowing(n);\n  Node nextCfgNode=outEdges.get(0).getDestination().getValue();\n  if (nextCfgNode == fallThrough) {\n    removeNode(n);\n  }\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 170, 
          "faulty": "if (nextCfgNode == fallThrough) {\n  removeNode(n);\n}", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 122, 
          "faulty": "return \"synthetic\";", 
          "type": "InsertBefore", 
          "seed": "int c=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 166, 
          "faulty": "Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);", 
          "type": "Delete", 
          "seed": "this.cfg=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 171, 
          "faulty": "removeNode(n);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 958, 
          "faulty": "if (first == null || first.getType() != Token.NAME) {\n  sb.append(\"<invalid>\");\n}\n else {\n  sb.append(first.getString());\n}", 
          "type": "Delete", 
          "seed": "lazyInitInfo();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 213, 
          "faulty": "return \"LABEL_NAME\";", 
          "type": "Delete", 
          "seed": "return new Node(Token.RETURN);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java", 
          "line": 169, 
          "faulty": "Node nextCfgNode=outEdges.get(0).getDestination().getValue();", 
          "type": "Replace", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 229, 
          "faulty": "return \"TRY\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 217, 
          "faulty": "return \"NULL\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1087/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Token.java\t2018-12-02 05:50:09.090140046 -0500\n@@ -210,11 +210,11 @@\n           case GETELEM:         return \"GETELEM\";\n           case CALL:            return \"CALL\";\n           case NAME:            return \"NAME\";\n-          case LABEL_NAME:      return \"LABEL_NAME\";\n+          case LABEL_NAME:      ;\n           case NUMBER:          return \"NUMBER\";\n           case STRING:          return \"STRING\";\n           case STRING_KEY:      return \"STRING_KEY\";\n-          case NULL:            return \"NULL\";\n+          case NULL:            return null;\n           case THIS:            return \"THIS\";\n           case FALSE:           return \"FALSE\";\n           case TRUE:            return \"TRUE\";\n@@ -226,7 +226,7 @@\n           case INSTANCEOF:      return \"INSTANCEOF\";\n           case ARRAYLIT:        return \"ARRAYLIT\";\n           case OBJECTLIT:       return \"OBJECTLIT\";\n-          case TRY:             return \"TRY\";\n+          case TRY:             return \"BLOCK\";\n           case PARAM_LIST:      return \"PARAM_LIST\";\n           case COMMA:           return \"COMMA\";\n           case ASSIGN:          return \"ASSIGN\";\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:32:13.320952174 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1087/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\t2018-12-02 05:50:09.094140064 -0500\n@@ -159,18 +159,7 @@\n           // branches to the same node. If after removing it control still\n           // branches to the same node, it is safe to remove.\n           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n-          if (outEdges.size() == 1 &&\n-              // If there is a next node, this jump is not useless.\n-              (n.getNext() == null || n.getNext().isFunction())) {\n-\n-            Preconditions.checkState(\n-                outEdges.get(0).getValue() == Branch.UNCOND);\n-            Node fallThrough = computeFollowing(n);\n-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough) {\n-              removeNode(n);\n-            }\n-          }\n+          ;\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:32:10.424952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1087/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\t2018-12-02 05:50:09.094140064 -0500\n@@ -851,7 +851,6 @@\n             finallyMap.put(lastJump, catchBlock);\n           }\n         }\n-        lastJump = handler;\n       }\n     }\n   }\n\n\n--- /tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:32:10.444952241 -0500\n+++ /tmp/GenProg_Defects4J_Closure_127/patches_oh3i/Patch_1087/patched/tmp/GenProg_Defects4J_Closure_127/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:50:09.094140064 -0500\n@@ -119,7 +119,10 @@\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n \n-        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n+        case SYNTHETIC_BLOCK_PROP: {\n+\t\t\tint c = 0;\n+\t\t\treturn \"synthetic\";\n+\t\t}\n         case EMPTY_BLOCK:        return \"empty_block\";\n         case ORIGINALNAME_PROP:  return \"originalname\";\n         case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n@@ -952,14 +955,6 @@\n       sb.append(getString());\n     } else if (type == Token.FUNCTION) {\n       sb.append(' ');\n-      // In the case of JsDoc trees, the first child is often not a string\n-      // which causes exceptions to be thrown when calling toString or\n-      // toStringTree.\n-      if (first == null || first.getType() != Token.NAME) {\n-        sb.append(\"<invalid>\");\n-      } else {\n-        sb.append(first.getString());\n-      }\n     } else if (type == Token.NUMBER) {\n       sb.append(' ');\n       sb.append(getDouble());\n@@ -1454,7 +1449,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }
  ]
}