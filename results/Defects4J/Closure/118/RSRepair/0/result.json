{
  "repair_end": "2018-12-02 11:43:38.808004", 
  "repair_begin": "2018-12-02 11:24:43.961213", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_101/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:34:53.411088794 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      int index = -1;\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_464/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:40:13.321993523 -0500\n@@ -439,7 +439,7 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n+        int start = 0;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_610/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:42:20.591180096 -0500\n@@ -498,17 +498,7 @@\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n+        int index = -1;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_3/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:33:26.202382971 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_120/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:35:09.231222413 -0500\n@@ -498,17 +498,7 @@\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n+        final String paramName = \"jscomp_throw_param\";\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_32/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:33:51.734583661 -0500\n@@ -498,17 +498,6 @@\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_418/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:39:32.481605830 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1671, 
          "faulty": "Var slot=scope.getSlot(className);", 
          "type": "InsertBefore", 
          "seed": "this.sourceName=sourceName;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_405/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:39:20.733494928 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n\n\n--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:24:22.048980494 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_405/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:39:20.737494965 -0500\n@@ -1668,7 +1668,8 @@\n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n-        Var slot = scope.getSlot(className);\n+        this.sourceName = sourceName;\n+\t\tVar slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "this.sourceName=sourceName;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_431/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:39:42.833703794 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:24:22.048980494 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_431/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:39:42.833703794 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          this.sourceName = sourceName;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_364/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:38:45.253161877 -0500\n@@ -439,7 +439,7 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n+        JSType type = n.getJSType();\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_249/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:37:03.064222002 -0500\n@@ -498,17 +498,7 @@\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_552/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:41:31.226740923 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      JSType type = n.getJSType();\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_25/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:33:46.842544793 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_188/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:36:10.235750586 -0500\n@@ -497,18 +497,7 @@\n         String name = child.getString();\n         T type = typeSystem.getType(getScope(), n, name);\n \n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n+        int start = 0;\n       }\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_69/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:34:23.986844486 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:24:24.628980553 -0500\n+++ /tmp/RSRepair_Defects4J_Closure_118/patches_rxke/Patch_158/patched/tmp/RSRepair_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:35:44.475525215 -0500\n@@ -498,17 +498,7 @@\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n+        int start = 0;\n       }\n     }\n \n\n\n"
    }
  ]
}