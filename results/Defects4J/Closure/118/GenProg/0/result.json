{
  "repair_end": "2018-12-02 12:18:16.161964", 
  "repair_begin": "2018-12-02 11:44:16.376649", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1272/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:47.968016516 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1272/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:47.972016532 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1272/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:47.972016532 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1931/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:44.333840744 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1931/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:44.337840759 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1931/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:44.341840774 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1931/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:17:44.341840774 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1362/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:50.576261534 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1362/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:50.580261549 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_767/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:51.854462876 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_767/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:51.854462876 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1578/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:26.460839745 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1578/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:13:26.460839745 -0500\n@@ -343,7 +343,8 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n+        JSType type = n.getJSType();\n+\t\texpectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1578/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:26.464839761 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1578/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:26.464839761 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:31.535702940 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:31.539702956 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:08:31.539702956 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1165/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:31.543702973 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:14.288795839 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:14.292795854 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1560/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:14.292795854 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:26.956400021 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:26.956400021 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1409/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:26.960400037 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "this.inExterns=inExterns;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_648/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:22.558061784 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_648/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:22.562061803 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_648/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:22.562061803 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            this.inExterns = inExterns;\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_535/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:45.409585262 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_535/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:00:45.409585262 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_535/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:00:45.413585282 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1654/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:20.853034011 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1654/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:20.853034011 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1654/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:20.857034025 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 798, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:47.048012844 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:47.048012844 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1270/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:47.048012844 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1739/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:18.109262981 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1739/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:18.113262999 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1739/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:18.113262999 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1324/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:26.064166694 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        int type = n.getType();\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1324/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:26.064166694 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1324/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:26.064166694 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1825/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:19.117509543 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1825/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:19.121509560 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1825/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:19.121509560 -0500\n@@ -653,9 +653,12 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1675, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1086/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:34.407455159 -0500\n@@ -1672,7 +1672,6 @@\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1086/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:34.407455159 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1086/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:07:34.411455176 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1086/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:34.411455176 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1546/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:03.204755704 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1546/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:03.204755704 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1546/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:03.208755719 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1957/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:18:03.769914552 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1957/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:18:03.773914568 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1957/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:18:03.773914568 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:45.940243696 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:45.940243696 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:45.944243711 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1354/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:45.944243711 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:07.195598961 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:08:07.195598961 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:07.199598980 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1132/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:07.199598980 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:13.313486465 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:13.313486465 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1818/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:13.313486465 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:19.656141679 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:19.656141679 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1315/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:19.660141694 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1445/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:52.700496557 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1445/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:52.704496572 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 714, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_285/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:25.456760921 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_285/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:57:25.460760932 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1051/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:11.635352485 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1051/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:11.639352505 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1051/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:11.639352505 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1051/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:07:11.643352523 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "this.sourceName=sourceName;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:41.093108520 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        this.sourceName = sourceName;\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:41.097108537 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:41.097108537 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1685/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:41.101108554 -0500\n@@ -702,7 +702,7 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n+                int start = 0;\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1523/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:48.096700754 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1523/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:48.096700754 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1523/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:48.100700768 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1416/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:32.012419071 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1416/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:32.016419086 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1937/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:48.029854823 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1937/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:48.033854838 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1937/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:48.033854838 -0500\n@@ -653,9 +653,12 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1213/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:06.959850527 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1213/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:06.963850543 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1901/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:19.265744671 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1901/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:19.269744688 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1901/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:19.269744688 -0500\n@@ -653,9 +653,12 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 798, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:32.547446862 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:32.551446880 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:32.551446880 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1082/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:07:32.551446880 -0500\n@@ -795,7 +795,6 @@\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n-        return false;\n       }\n     }\n     return len == 1 || s.charAt(0) != '0';\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1959/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:18:04.689918032 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1959/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:18:04.689918032 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1959/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:18:04.689918032 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:44.949611387 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:44.953611401 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:44.957611418 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1856/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:16:44.957611418 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_638/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:14.834025052 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_638/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:14.838025071 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_638/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:14.838025071 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1343/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:38.268214077 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1343/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:38.268214077 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1343/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:38.272214093 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_991/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:31.127163414 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_991/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:31.127163414 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_991/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:06:31.131163433 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_495/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:00:14.065439006 -0500\n@@ -1568,8 +1568,6 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n-                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n             // and they assign F.prototype to some arbitrary expression,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_495/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:14.069439025 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_340/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:58:08.892890801 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_340/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:58:08.896890814 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1776/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:42.517362729 -0500\n@@ -1568,7 +1568,9 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\t\tint index = -1;\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1776/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:42.521362745 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1776/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:42.521362745 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1776/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:42.525362761 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "this.sourceName=sourceName;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1665/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:27.729058364 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        this.sourceName = sourceName;\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1665/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:27.729058364 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1665/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:27.733058378 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1665/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:27.733058378 -0500\n@@ -702,7 +702,7 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n+                int start = 0;\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:03.467582835 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1126/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:03.471582853 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_855/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:52.570715343 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_855/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:52.570715343 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1703/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:52.681157316 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1703/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:52.685157334 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1703/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:52.685157334 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1703/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:52.689157349 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1897/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:16.501734014 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1897/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:16.505734031 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1588/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:31.876859229 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1588/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:31.876859229 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_796/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:10.946543788 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          JSType type = n.getJSType();\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_796/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:10.950543804 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_796/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:10.950543804 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_387/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:58:49.041010272 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_387/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:58:49.045010286 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1322/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:25.140163094 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_781/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:01.314503154 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_781/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:01.318503169 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_781/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:01.318503169 -0500\n@@ -1416,7 +1416,6 @@\n       JSType type, ObjectType newImplicitProto) {\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n       poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_781/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:01.322503187 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:28.100174623 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:28.100174623 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1328/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:28.104174638 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_762/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:48.078446693 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_762/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:48.082446711 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_847/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:47.158693387 -0500\n@@ -439,7 +439,7 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n+        int start = 0;\n       }\n     }\n \n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_847/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:47.162693402 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1034/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:01.495305962 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1034/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:01.495305962 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1753/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:27.473301436 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1753/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:27.473301436 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1753/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:27.477301452 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1373/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:01.428303115 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1373/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:01.432303130 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1667/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:28.757062001 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1667/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:28.757062001 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1667/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:28.761062016 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1394/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:15.548356869 -0500\n@@ -439,7 +439,8 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n+        int start = 0;\n+\t\thandleObjectLit(t, n);\n       }\n     }\n \n@@ -488,28 +489,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1394/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:15.548356869 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1394/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:15.552356884 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_414/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:10.109120097 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_721/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:17.602313747 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_721/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:17.602313747 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_721/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:17.602313747 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1405/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:24.152389437 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1405/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:24.152389437 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1405/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:24.156389452 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1508/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:37.344661464 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1508/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:37.348661478 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1508/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:37.348661478 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_725/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:03:20.362325966 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        StringBuilder builder = new StringBuilder();\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_725/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:20.362325966 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_725/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:20.362325966 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_725/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:20.366325983 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:14.948123239 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n@@ -1670,10 +1671,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:14.952123255 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:14.952123255 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:10:14.952123255 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1308/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:14.956123272 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:16.663639674 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:16.667639691 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1144/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:16.671639708 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1895/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:15.589730496 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1895/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:15.593730510 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1895/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:15.593730510 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1290/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:01.140068849 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1290/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:01.144068865 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1290/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:01.144068865 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:26.565297717 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:26.565297717 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1751/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:26.565297717 -0500\n@@ -1417,7 +1417,6 @@\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n       poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1689/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:43.861120214 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n@@ -488,28 +487,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1689/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:43.861120214 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_885/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:12.598795756 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_885/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:12.598795756 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_466/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:50.001322474 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_466/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:59:50.005322493 -0500\n@@ -343,7 +343,8 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n+        StringBuilder builder = new StringBuilder();\n+\t\texpectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1266/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:44.276001766 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1266/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:44.280001782 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_872/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:03.378758897 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_872/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:03.382758913 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:19.502579575 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:19.506579590 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:04:19.506579590 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_607/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:01:49.405901439 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_607/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:01:49.409901459 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_607/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:01:49.409901459 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_263/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:06.736704717 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_263/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:57:06.740704728 -0500\n@@ -1416,7 +1416,6 @@\n       JSType type, ObjectType newImplicitProto) {\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n       poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_909/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:30.994868520 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_909/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:30.994868520 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1917/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:31.609792108 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1917/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:31.609792108 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1917/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:31.613792124 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1917/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:17:31.613792124 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1786/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:48.973388857 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1786/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:48.977388873 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1786/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:48.977388873 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:43.595753659 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:43.599753676 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1183/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:43.607753709 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1433/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:44.180464734 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1433/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:44.184464749 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1433/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:44.184464749 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1756/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:29.601310141 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1756/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:29.601310141 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1756/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:29.605310157 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "PropListItem x=propListHead;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:21.656822436 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:21.664822467 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:13:21.664822467 -0500\n@@ -1456,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:21.664822467 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1571/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:21.664822467 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1660/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:23.833044571 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1660/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:23.837044585 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1660/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:23.837044585 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Delete", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:39.612447621 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:39.612447621 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1427/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:39.616447636 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1512/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:40.116671608 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1512/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:40.116671608 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1512/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:40.120671622 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1446, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "NodeMismatch res=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1711/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:59.169184456 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1711/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:14:59.173184473 -0500\n@@ -1443,7 +1443,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      NodeMismatch res = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1711/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:59.173184473 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1711/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:59.173184473 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_49/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:54:11.648169830 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_49/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:54:11.652169842 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:06.056320776 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:06.060320792 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:06.060320792 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1380/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:06.060320792 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 798, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:48.047515532 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:48.051515550 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:48.051515550 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1104/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:07:48.055515567 -0500\n@@ -795,7 +795,6 @@\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n-        return false;\n       }\n     }\n     return len == 1 || s.charAt(0) != '0';\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_619/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:01:59.861952781 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_512/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:27.393501923 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_512/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:00:27.397501943 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_512/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:00:27.397501943 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_512/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:00:27.401501960 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:41.380893338 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:41.384893352 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:41.384893352 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1600/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:41.384893352 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1040/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:05.183322943 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1040/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:05.187322962 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1040/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:05.187322962 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1498/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:29.932634287 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1498/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:29.932634287 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1498/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:29.932634287 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1675, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:12.867623393 -0500\n@@ -1672,7 +1672,6 @@\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:12.871623410 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:08:12.871623410 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1139/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:12.871623410 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:49.689144756 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:49.689144756 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1698/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:49.689144756 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:29.000630864 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:29.004630879 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:29.004630879 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1496/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:29.008630893 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_687/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:52.646201541 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_687/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:52.650201559 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_687/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:52.650201559 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_777/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:59.450495246 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_777/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:59.450495246 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_777/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:59.454495263 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 787, 
          "faulty": "return leastSuper ? that : this;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:21.919399156 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n@@ -1670,7 +1671,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:21.923399174 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:21.923399174 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 05:43:54.954213715 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1067/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 06:07:21.923399174 -0500\n@@ -784,7 +784,6 @@\n     JSType functionInstance = registry.getNativeType(\n         JSTypeNative.FUNCTION_INSTANCE_TYPE);\n     if (functionInstance.isEquivalentTo(that)) {\n-      return leastSuper ? that : this;\n     } else if (functionInstance.isEquivalentTo(this)) {\n       return leastSuper ? this : that;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:42.463490915 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:07:42.463490915 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:42.467490932 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1097/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:07:42.467490932 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:21.104377914 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:21.108377930 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1401/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:21.108377930 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:05.517691531 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:05.517691531 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1881/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:05.521691548 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:22.251912995 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:22.251912995 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:22.255913011 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:09:22.255913011 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1235/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:22.255913011 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1285/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:57.328053750 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1285/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:57.328053750 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1625/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:58.848955783 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1625/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:58.852955797 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1625/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:58.852955797 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1095/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:41.515486721 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1095/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:41.515486721 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1095/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:41.519486740 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_52/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:54:13.456175461 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_523/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:35.473539538 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_523/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:00:35.477539555 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1478/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:15.516581207 -0500\n@@ -439,7 +439,8 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n+        StringBuilder builder = new StringBuilder();\n+\t\thandleObjectLit(t, n);\n       }\n     }\n \n@@ -488,28 +489,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1478/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:15.520581222 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1478/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:15.520581222 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_785/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:03.310511604 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_785/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:03.314511622 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_785/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:03.314511622 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1313/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:18.720138018 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1313/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:18.724138033 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1313/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:18.724138033 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1608/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:47.056913663 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1608/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:47.056913663 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1608/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:47.060913676 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_710/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:03:12.114289343 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_710/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:12.118289362 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_710/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:12.118289362 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1109/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:52.091533279 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1109/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:52.095533297 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1109/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:52.095533297 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1109/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:07:52.099533314 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1109/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:07:52.099533314 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 933, 
          "faulty": "constructor=objType.getOwnerFunction();", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:05.968545882 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:05.968545882 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -930,7 +908,8 @@\n         if (objType.isFunctionType()) {\n           constructor = objType.toMaybeFunctionType();\n         } else if (objType.isFunctionPrototypeType()) {\n-          constructor = objType.getOwnerFunction();\n+          final String paramName = \"jscomp_throw_param\";\n+\t\tconstructor = objType.getOwnerFunction();\n         } else {\n           constructor = objType.getConstructor();\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:05.972545896 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1464/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:05.972545896 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:45.273373895 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:45.277373912 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1780/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:45.277373912 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1199/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:56.719808290 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1199/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:56.723808308 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1199/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:56.723808308 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1199/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:08:56.727808323 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1199/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:56.727808323 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1488/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:23.176609449 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1488/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:23.176609449 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1488/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:23.180609463 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1732/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:13.361243393 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1732/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:13.361243393 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1732/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:13.361243393 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:43.940235987 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1351/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:43.944236003 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_311/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:57:45.640821362 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int index = -1;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_311/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:45.640821362 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_311/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:57:45.644821373 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1675, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_183/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:56:01.020506123 -0500\n@@ -1672,7 +1672,8 @@\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n+          int start = 0;\n+\t\treturn false;\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_183/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:01.024506135 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_336/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:58:06.204882785 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int start = 0;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_336/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:58:06.208882795 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_336/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:58:06.208882795 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 787, 
          "faulty": "return leastSuper ? that : this;", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:33.467450967 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:33.471450986 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 05:43:54.954213715 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1084/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 06:07:33.471450986 -0500\n@@ -784,7 +784,6 @@\n     JSType functionInstance = registry.getNativeType(\n         JSTypeNative.FUNCTION_INSTANCE_TYPE);\n     if (functionInstance.isEquivalentTo(that)) {\n-      return leastSuper ? that : this;\n     } else if (functionInstance.isEquivalentTo(this)) {\n       return leastSuper ? this : that;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1053/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:12.547356645 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1053/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:12.547356645 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:29.743434326 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:29.747434345 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:29.747434345 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1078/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:07:29.751434361 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:07.903335423 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:07.903335423 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1044/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:07:07.903335423 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1491/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:24.996616146 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1491/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:25.000616161 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1483/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:19.232594918 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1483/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:19.236594932 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1483/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:19.236594932 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1483/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:19.236594932 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:57.940952544 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:57.940952544 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:57.940952544 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:57.944952558 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_897/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:22.758836068 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:01.151826612 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        int type = n.getType();\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:01.151826612 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1205/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:01.155826629 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_976/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:22.687122882 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_976/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:22.687122882 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_976/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:22.691122900 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 787, 
          "faulty": "return leastSuper ? that : this;", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_981/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:25.443136162 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_981/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:25.443136162 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 05:43:54.954213715 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_981/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 06:06:25.443136162 -0500\n@@ -784,7 +784,6 @@\n     JSType functionInstance = registry.getNativeType(\n         JSTypeNative.FUNCTION_INSTANCE_TYPE);\n     if (functionInstance.isEquivalentTo(that)) {\n-      return leastSuper ? that : this;\n     } else if (functionInstance.isEquivalentTo(this)) {\n       return leastSuper ? this : that;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_516/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:00:30.077514463 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_516/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:30.077514463 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:28.188845966 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:28.192845980 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1581/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:28.192845980 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 933, 
          "faulty": "constructor=objType.getOwnerFunction();", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1536/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:55.684728389 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1536/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:55.684728389 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -930,7 +908,8 @@\n         if (objType.isFunctionType()) {\n           constructor = objType.toMaybeFunctionType();\n         } else if (objType.isFunctionPrototypeType()) {\n-          constructor = objType.getOwnerFunction();\n+          final String paramName = \"jscomp_throw_param\";\n+\t\tconstructor = objType.getOwnerFunction();\n         } else {\n           constructor = objType.getConstructor();\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1536/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:55.684728389 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1536/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:55.688728403 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1337/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:34.516199545 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1337/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:34.520199561 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:02.215831001 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:02.219831018 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:09:02.219831018 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1207/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:02.223831034 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1438/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:47.072475549 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1438/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:47.072475549 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1438/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:47.076475564 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:17.000805638 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:13:17.000805638 -0500\n@@ -343,7 +343,8 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n+        JSType type = n.getJSType();\n+\t\texpectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:17.004805652 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1564/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:17.004805652 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_840/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:42.470674286 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_840/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:42.474674303 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_840/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:04:42.474674303 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_840/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:42.474674303 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_471/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:53.833341293 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_471/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:53.833341293 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_471/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:59:53.837341313 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_660/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:30.010096883 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_660/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:30.014096902 -0500\n@@ -1456,7 +1456,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        StringBuilder s = new StringBuilder();\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_660/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:30.014096902 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_660/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:30.014096902 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_452/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:38.885267288 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_968/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:16.951095094 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_968/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:06:16.955095115 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_968/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:16.955095115 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_968/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:06:16.955095115 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_519/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:32.037523590 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_519/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:00:32.037523590 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:45.228907121 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        StringBuilder builder = new StringBuilder();\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:45.228907121 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:45.232907135 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1605/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:45.232907135 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:50.940711120 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:50.944711134 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1527/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:50.944711134 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 798, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:08.907858524 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:08.911858540 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1216/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:08.911858540 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1635/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:07.348986057 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1635/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:07.348986057 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1635/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:07.352986071 -0500\n@@ -653,8 +653,7 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        ;\n         addJsString(n);\n         break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1765/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:35.105332603 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1765/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:35.109332619 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1765/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:35.109332619 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 945, 
          "faulty": "JSType rvalueType=rvalue.getJSType();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_989/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:30.079158403 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_989/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:30.083158422 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_989/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:06:30.083158422 -0500\n@@ -942,7 +942,8 @@\n         if (objectJsType != null && objectJsType.isFunctionType()) {\n           FunctionType functionType = objectJsType.toMaybeFunctionType();\n           if (functionType.isConstructor()) {\n-            JSType rvalueType = rvalue.getJSType();\n+            int index = -1;\n+\t\t\tJSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n             // Only assign structs to the prototype of a @struct constructor\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1470/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:08.856556581 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1470/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:08.856556581 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1470/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:08.860556596 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:42.183993392 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        int type = n.getType();\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:42.187993408 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1263/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:42.187993408 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:54.688940940 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n@@ -1579,7 +1580,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:54.692940954 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1619/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:54.692940954 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 787, 
          "faulty": "return leastSuper ? that : this;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_72/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:54:31.356231076 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 05:43:54.954213715 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_72/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 05:54:31.356231076 -0500\n@@ -784,7 +784,6 @@\n     JSType functionInstance = registry.getNativeType(\n         JSTypeNative.FUNCTION_INSTANCE_TYPE);\n     if (functionInstance.isEquivalentTo(that)) {\n-      return leastSuper ? that : this;\n     } else if (functionInstance.isEquivalentTo(this)) {\n       return leastSuper ? this : that;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1889/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:17:11.033712893 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1889/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:11.037712908 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1889/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:11.037712908 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1889/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:11.037712908 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1889/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:17:11.041712925 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_551/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:59.681649967 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_551/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:00:59.685649985 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "this.sourceName=sourceName;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1743/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:20.949274670 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        this.sourceName = sourceName;\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1743/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:20.949274670 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1743/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:20.953274686 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1743/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:20.953274686 -0500\n@@ -702,7 +702,7 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n+                int start = 0;\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_177/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:56.500492381 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_177/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:55:56.504492394 -0500\n@@ -1416,7 +1416,6 @@\n       JSType type, ObjectType newImplicitProto) {\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n       poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1159/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:27.791687088 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1159/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:27.791687088 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_717/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:15.778305653 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_717/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:15.778305653 -0500\n@@ -1416,7 +1416,6 @@\n       JSType type, ObjectType newImplicitProto) {\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n       poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1671, 
          "faulty": "Var slot=scope.getSlot(className);", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_241/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:56:48.932651121 -0500\n@@ -1668,7 +1668,8 @@\n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n-        Var slot = scope.getSlot(className);\n+        final String paramName = \"jscomp_throw_param\";\n+\t\tVar slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_241/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:48.932651121 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_964/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:14.087081145 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_964/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:14.091081165 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_964/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:14.091081165 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1297/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:05.784087195 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1297/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:05.784087195 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_149/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:33.620422634 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_149/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:55:33.624422647 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_556/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:01:03.329666328 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_556/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:01:03.333666346 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_556/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:01:03.333666346 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Delete", 
          "seed": "this.inExterns=inExterns;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_744/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:34.490387942 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_744/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:34.490387942 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_744/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:34.494387960 -0500\n@@ -945,12 +945,6 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_798/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:12.142548807 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        JSType type = n.getJSType();\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_798/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:12.146548824 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_798/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:12.146548824 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_728/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:22.358334778 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_728/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:22.362334796 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_728/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:22.362334796 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1111/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:53.047537464 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1111/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:53.051537481 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1111/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:53.051537481 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1111/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:07:53.051537481 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "InsertBefore", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_212/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:24.840578358 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_212/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:56:24.844578370 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Replace", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_418/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:59:12.065130309 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int start = 0;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_418/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:12.065130309 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_418/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:12.065130309 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:46.856247225 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1356/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:46.856247225 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_929/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:45.430938719 -0500\n@@ -439,7 +439,7 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n+        int start = 0;\n       }\n     }\n \n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_929/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:45.430938719 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_829/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:33.918639246 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_829/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:33.922639262 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_823/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:30.234624070 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_823/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:30.234624070 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_823/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:04:30.238624085 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_527/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:38.757554713 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_527/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:00:38.757554713 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_370/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:58:34.116965922 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:53.804721549 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:53.804721549 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:53.808721563 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1533/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:53.808721563 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1829/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:20.937516764 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1829/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:20.941516781 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1829/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:20.941516781 -0500\n@@ -653,9 +653,8 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1837/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:27.685543475 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1837/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:27.689543492 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1837/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:27.689543492 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1837/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:16:27.689543492 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1459/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:02.184531842 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1459/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:02.184531842 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1459/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:02.184531842 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_978/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:23.567127127 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 798, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "int lastIndex=index;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:33.363710660 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:33.367710677 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1168/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:33.367710677 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n@@ -795,7 +794,7 @@\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n-        return false;\n+        int lastIndex = index;\n       }\n     }\n     return len == 1 || s.charAt(0) != '0';\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1637/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:08.260989301 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1637/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:08.264989315 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1637/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:08.264989315 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_850/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:49.014700928 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_850/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:49.014700928 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_850/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:49.018700944 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:18:13.597951665 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:18:13.597951665 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:18:13.597951665 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1972/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:18:13.601951681 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_927/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:44.522934117 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_927/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:44.522934117 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:17.197021045 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:17.201021059 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n@@ -488,28 +487,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1648/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:17.201021059 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1788/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:49.873392490 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1788/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:49.877392507 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_998/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:36.683189871 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_998/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:36.683189871 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_346/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:58:13.388904206 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_346/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:58:13.388904206 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_814/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:24.486600292 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_814/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:24.490600308 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_814/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:24.490600308 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_752/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:03:40.546414228 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_752/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:40.550414246 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_752/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:40.550414246 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_752/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:40.550414246 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1060/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:17.247378016 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1060/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:07:17.247378016 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1060/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:17.251378035 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1933/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:45.261844281 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1933/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:45.261844281 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1933/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:17:45.265844295 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1229/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:18.467897603 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1229/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:18.471897619 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1229/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:18.471897619 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1190/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:49.135776791 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        int type = n.getType();\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1190/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:49.139776807 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_730/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:23.298338922 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_730/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:23.298338922 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_730/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:23.298338922 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1007/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:42.391216871 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1007/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:42.395216890 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1007/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:42.395216890 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1762/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:33.249325038 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1762/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:33.253325054 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1762/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:33.253325054 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:38.512443495 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:38.516443510 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1425/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:38.516443510 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:20.459655899 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:20.459655899 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:20.463655916 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:08:20.463655916 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1149/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:20.467655933 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1671, 
          "faulty": "Var slot=scope.getSlot(className);", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_278/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:57:19.856744123 -0500\n@@ -1668,7 +1668,8 @@\n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n-        Var slot = scope.getSlot(className);\n+        final String paramName = \"jscomp_throw_param\";\n+\t\tVar slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_278/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:19.856744123 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:56.536510846 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:56.536510846 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1452/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:56.536510846 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return TRUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_825/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:31.162627897 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_825/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:31.162627897 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_825/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:31.162627897 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1760/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:32.321321251 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1760/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:32.325321267 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1760/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:32.325321267 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1028/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:57.811288932 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1450/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:55.612507407 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1450/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:55.616507421 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1450/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:55.616507421 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1450/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:55.616507421 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_41/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:54:04.928148870 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_819/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:28.290616042 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_819/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:28.294616058 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1728/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:11.509235735 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1728/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:11.513235750 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1728/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:11.513235750 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1326/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:27.184171057 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1326/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:27.188171072 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_791/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:07.266528306 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_914/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:05:34.698883959 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_914/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:34.698883959 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_914/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:34.698883959 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_404/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:02.729081277 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_404/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:02.729081277 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_445/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:34.241243965 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_445/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:34.241243965 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_445/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:59:34.241243965 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_881/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:05:09.858784830 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_881/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:09.862784846 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      int index = -1;\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +850,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_881/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:09.862784846 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:31.621072130 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:31.621072130 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n@@ -488,28 +487,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:31.625072144 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1671/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:31.625072144 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_676/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:43.402159146 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_676/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:43.406159166 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_676/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:43.406159166 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:20.017513114 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1827/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:20.017513114 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1903/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:20.185748216 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1903/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:20.185748216 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1903/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:20.189748231 -0500\n@@ -653,9 +653,8 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_821/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:29.222619892 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_821/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:29.222619892 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_821/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:29.226619908 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Replace", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_318/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:57:51.020837447 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int start = 0;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_318/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:51.020837447 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_318/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:57:51.024837457 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_133/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:21.500385557 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_948/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:01.451018996 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_948/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:06:01.455019016 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_948/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:06:01.455019016 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1551/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:06.964769336 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1551/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:06.968769351 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1551/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:06.968769351 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1551/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:06.968769351 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1016/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:49.759251461 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n@@ -1670,10 +1671,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1016/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:49.763251480 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1016/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:49.763251480 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1179/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:41.751745937 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1179/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:41.751745937 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:24.819412225 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:24.819412225 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1071/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:24.819412225 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_919/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:38.966905834 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_919/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:05:38.966905834 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:42.667749774 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:42.667749774 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1181/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:42.671749791 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Replace", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_448/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:59:36.097253305 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int start = 0;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_448/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:36.097253305 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_448/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:36.101253325 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_152/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:35.460428255 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_152/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:55:35.464428268 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_955/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:06.923046034 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_955/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:06:06.927046054 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_955/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:06.927046054 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1870/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:56.065654799 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1870/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:56.065654799 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1870/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:16:56.069654816 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1870/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:56.069654816 -0500\n@@ -1417,7 +1417,6 @@\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n       poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1347/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:41.040224794 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1347/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:41.044224809 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1347/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:41.044224809 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1223/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:14.707882266 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1223/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:14.711882282 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:51.723260632 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:51.727260651 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:06:51.727260651 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1019/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:51.731260670 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder s=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:02.669966445 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:02:02.669966445 -0500\n@@ -1456,7 +1456,8 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        StringBuilder s = new StringBuilder();\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:02.673966466 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_623/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:02.673966466 -0500\n@@ -951,7 +951,8 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n+\t\t\treturn;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_644/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:02:19.658048036 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_644/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:19.662048055 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_644/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:19.662048055 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_644/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:19.666048074 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:06.243594849 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:06.243594849 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1130/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:06.247594866 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_110/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:02.576327470 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_110/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:55:02.576327470 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1864/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:51.437636753 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1864/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:51.441636770 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1864/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:51.441636770 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1390/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:12.676345966 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1390/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:12.680345981 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1390/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:12.680345981 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1281/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:54.540042683 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1281/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:54.540042683 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1281/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:54.544042699 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1569/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:20.696818976 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1569/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:20.700818990 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1569/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:20.700818990 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_770/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:53.706470790 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_770/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:53.710470807 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_770/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:53.710470807 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_836/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:39.722663056 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          JSType type = n.getJSType();\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_836/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:39.722663056 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_809/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:20.406583339 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_809/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:20.406583339 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_759/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:03:46.038437925 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_759/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:46.038437925 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_759/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:46.042437942 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_629/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:07.309988913 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_629/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:07.309988913 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_629/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:02:07.309988913 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1383/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:07.908327832 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1383/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:07.912327847 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1383/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:07.912327847 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1672, 
          "faulty": "JSType classType=slot == null ? null : slot.getType();", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_147/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:55:32.700419823 -0500\n@@ -1669,7 +1669,8 @@\n       if (qName != null && qName.endsWith(\".prototype\")) {\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n-        JSType classType = slot == null ? null : slot.getType();\n+        JSType type = n.getJSType();\n+\t\tJSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_147/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:32.700419823 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_706/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:03:09.350276995 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_706/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:09.354277013 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_706/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:09.354277013 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 946, 
          "faulty": "validator.expectObject(t,rvalue,rvalueType,OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_904/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:05:27.374854281 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_904/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:27.374854281 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_904/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:27.378854295 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_904/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:05:27.378854295 -0500\n@@ -943,8 +943,6 @@\n           FunctionType functionType = objectJsType.toMaybeFunctionType();\n           if (functionType.isConstructor()) {\n             JSType rvalueType = rvalue.getJSType();\n-            validator.expectObject(t, rvalue, rvalueType,\n-                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n             // Only assign structs to the prototype of a @struct constructor\n             if (functionType.makesStructs() && !rvalueType.isStruct()) {\n               String funName = functionType.getTypeOfThis().toString();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_696/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:00.338236466 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_696/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:00.342236485 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1675/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:34.433082068 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1675/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:34.433082068 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1675/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:34.437082082 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1675/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:34.437082082 -0500\n@@ -702,7 +702,7 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n+                int start = 0;\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1575/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:24.500832687 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1575/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:24.504832701 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1575/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:24.504832701 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:08.799339526 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1046/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:07:08.799339526 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_654/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:26.222079083 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_654/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:26.222079083 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_746/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:35.418391982 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_746/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:35.422391999 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_746/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:03:35.422391999 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:16:05.585455623 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:05.589455640 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1807/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:05.589455640 -0500\n@@ -1417,7 +1417,6 @@\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n       poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_473/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:54.741345739 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_473/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:54.741345739 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:56.723553521 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:07:56.723553521 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:56.727553538 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1117/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:07:56.727553538 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:47.168697369 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1521/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:47.168697369 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 798, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:31.112415684 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:31.112415684 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:31.116415698 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1414/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:31.116415698 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n@@ -795,7 +794,6 @@\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n-        return false;\n       }\n     }\n     return len == 1 || s.charAt(0) != '0';\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1468/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:07.940553189 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1468/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:07.940553189 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1171/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:35.207718437 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1171/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:35.211718454 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 787, 
          "faulty": "return leastSuper ? that : this;", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:54.947275642 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:54.951275661 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 05:43:54.954213715 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1023/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 06:06:54.951275661 -0500\n@@ -784,7 +784,6 @@\n     JSType functionInstance = registry.getNativeType(\n         JSTypeNative.FUNCTION_INSTANCE_TYPE);\n     if (functionInstance.isEquivalentTo(that)) {\n-      return leastSuper ? that : this;\n     } else if (functionInstance.isEquivalentTo(this)) {\n       return leastSuper ? this : that;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_671/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:02:39.698142027 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_671/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:39.702142046 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_671/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:39.702142046 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1730/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:12.437239572 -0500\n@@ -1568,7 +1568,9 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\t\tint index = -1;\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1730/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:12.437239572 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1730/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:12.441239590 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1339/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:35.428203081 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1339/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:35.432203096 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1701/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:51.741153373 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1701/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:51.741153373 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:24.613289715 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:24.617289732 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:24.617289732 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1748/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:15:24.621289749 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:53.672937312 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:53.672937312 -0500\n@@ -439,7 +439,6 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n       }\n     }\n \n@@ -488,28 +487,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +848,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:53.676937326 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1617/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:53.676937326 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "Delete", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_879/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:05:08.838780757 -0500\n@@ -1568,8 +1568,6 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n-                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n             // and they assign F.prototype to some arbitrary expression,\n@@ -1579,7 +1577,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_879/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:08.838780757 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_879/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:05:08.842780773 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_879/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:08.842780773 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_441/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:31.309229157 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_441/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:59:31.309229157 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "Delete", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1645/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:15.233014074 -0500\n@@ -1568,8 +1568,6 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n-                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n             // and they assign F.prototype to some arbitrary expression,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1645/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:15.237014088 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1645/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:15.237014088 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1645/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:15.241014102 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:11.612341923 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:11.616341938 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1388/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:11.616341938 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_865/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:58.930741019 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_865/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:58.934741035 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_870/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:05:02.470755254 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          JSType type = n.getJSType();\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_870/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:02.474755269 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_870/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:02.474755269 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "StaticSourceFile file=getStaticSourceFile();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_170/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:50.932475437 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_170/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:55:50.932475437 -0500\n@@ -1456,7 +1456,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_712/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:13.018293373 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      int index = -1;\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_712/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:13.018293373 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Replace", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_78/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:54:35.892245127 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_78/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:54:35.892245127 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1962/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:18:06.621925336 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1962/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:18:06.621925336 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1962/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:18:06.625925352 -0500\n@@ -653,9 +653,8 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +701,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1447/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:53.628500016 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1447/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:53.628500016 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1447/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:53.632500031 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:51.776031692 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1277/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:51.776031692 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:44.801124180 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n@@ -1579,7 +1580,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:44.801124180 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:44.805124197 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1691/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:44.805124197 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1967/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:18:10.697940728 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1967/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:18:10.697940728 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1967/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:18:10.697940728 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1967/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:18:10.701940743 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1967/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:18:10.701940743 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_401/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:00.937071781 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      StringBuilder builder = new StringBuilder();\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1025/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:55.887280008 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1025/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:55.887280008 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1025/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:55.891280027 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Replace", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_138/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:55:25.376397425 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int start = 0;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_138/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:25.380397437 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_138/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:55:25.380397437 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Replace", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1782/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:46.209377684 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1782/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:46.213377700 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1782/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:46.213377700 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1782/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:46.213377700 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 933, 
          "faulty": "constructor=objType.getOwnerFunction();", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1586/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:30.972855978 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1586/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:30.972855978 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -930,7 +908,8 @@\n         if (objType.isFunctionType()) {\n           constructor = objType.toMaybeFunctionType();\n         } else if (objType.isFunctionPrototypeType()) {\n-          constructor = objType.getOwnerFunction();\n+          final String paramName = \"jscomp_throw_param\";\n+\t\tconstructor = objType.getOwnerFunction();\n         } else {\n           constructor = objType.getConstructor();\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1586/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:30.972855978 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1586/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:30.976855994 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1541/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:59.556742462 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1541/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:59.560742477 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1541/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:59.560742477 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1541/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:59.564742492 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_779/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:00.358499100 -0500\n@@ -488,28 +488,7 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n+      int index = -1;\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_779/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:00.362499117 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_735/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:03:26.998355193 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          JSType type = n.getJSType();\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_735/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:27.002355211 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_735/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:27.002355211 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:53.975541523 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:53.975541523 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1113/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:53.979541541 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_857/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:53.486719049 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_857/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:53.486719049 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_857/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:53.490719065 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:30.595698964 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:30.599698982 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:30.599698982 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1163/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:08:30.603698998 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_244/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:50.812656787 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1677/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:35.345085289 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1677/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:35.349085303 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1677/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:35.349085303 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1811/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:16:08.561467516 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1811/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:08.565467532 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1811/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:08.565467532 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1811/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:08.565467532 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_306/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:41.724809647 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_287/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:26.368763655 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_287/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:57:26.368763655 -0500\n@@ -702,7 +702,7 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n+                StringBuilder builder = new StringBuilder();\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:31.796188991 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:31.800189006 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1333/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:31.800189006 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_412/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:09.217115429 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_412/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:09.217115429 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_412/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:59:09.221115450 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_986/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:28.267149725 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_6/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:53:33.332049767 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_455/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:40.681276265 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_497/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:14.997443442 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_497/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:00:15.001443461 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_497/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:00:15.001443461 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_206/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:20.096563996 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_206/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:56:20.100564008 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_206/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:56:20.100564008 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Replace", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:37.897343967 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:37.901343983 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:37.901343983 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1769/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:15:37.905344001 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:52.701403898 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:52.701403898 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:52.705403914 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1792/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:15:52.705403914 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1939/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:48.993858493 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1939/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:48.997858508 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1939/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:48.997858508 -0500\n@@ -653,9 +653,8 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +701,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1360/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:49.672258059 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1360/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:49.672258059 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1360/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:49.676258074 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1360/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:49.676258074 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:10:04.876083612 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:04.880083628 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1295/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:10:04.880083628 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1002/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:39.535203384 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1002/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:39.539203403 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1884/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:07.345698617 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1884/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:07.349698632 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1884/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:07.349698632 -0500\n@@ -653,9 +653,12 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:17:52.113870357 -0500\n@@ -1670,10 +1670,6 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:52.113870357 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:52.117870373 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1943/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:17:52.117870373 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_421/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:13.881139762 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_421/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:13.881139762 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "formatConclusion();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_91/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:54:46.840278976 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1610/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:47.996917026 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1610/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:48.000917040 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1610/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:48.000917040 -0500\n@@ -702,7 +702,7 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n+                int start = 0;\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1365/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:10:52.724269783 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1365/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:10:52.724269783 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:21.833037485 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:21.837037499 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:21.837037499 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1656/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:21.837037499 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1419/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:33.876426082 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1419/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:33.876426082 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1419/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:33.880426098 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1419/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:33.880426098 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int type=n.getType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1774/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:41.585358948 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:25.911679111 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:25.911679111 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1156/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:25.915679127 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:00.587301771 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:00.591301790 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1032/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:00.591301790 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:47.525135656 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:47.529135673 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1695/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:47.529135673 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:11:46.156472125 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:46.160472140 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:46.160472140 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1436/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:11:46.164472155 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_500/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:00:16.945452696 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_500/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:00:16.949452715 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_416/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:59:11.029124903 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_416/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:59:11.033124924 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_572/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:01:17.193738410 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_572/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/Node.java\t2018-12-02 06:01:17.197738431 -0500\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_572/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:01:17.197738431 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_572/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:01:17.201738452 -0500\n@@ -945,12 +945,7 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n+            StringBuilder builder = new StringBuilder();\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "case 3:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:38.487978567 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:38.491978584 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:09:38.491978584 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1257/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:38.495978600 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 933, 
          "faulty": "constructor=objType.getOwnerFunction();", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "return FALSE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:30.028852585 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:30.028852585 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -930,7 +908,8 @@\n         if (objType.isFunctionType()) {\n           constructor = objType.toMaybeFunctionType();\n         } else if (objType.isFunctionPrototypeType()) {\n-          constructor = objType.getOwnerFunction();\n+          final String paramName = \"jscomp_throw_param\";\n+\t\tconstructor = objType.getOwnerFunction();\n         } else {\n           constructor = objType.getConstructor();\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:30.028852585 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1584/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:30.032852598 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 787, 
          "faulty": "return leastSuper ? that : this;", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1063/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:19.111386464 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1063/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:19.115386482 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 05:43:54.954213715 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1063/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/FunctionType.java\t2018-12-02 06:07:19.115386482 -0500\n@@ -784,7 +784,6 @@\n     JSType functionInstance = registry.getNativeType(\n         JSTypeNative.FUNCTION_INSTANCE_TYPE);\n     if (functionInstance.isEquivalentTo(that)) {\n-      return leastSuper ? that : this;\n     } else if (functionInstance.isEquivalentTo(this)) {\n       return leastSuper ? this : that;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_783/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:02.350507541 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_783/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:04:02.350507541 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:06.896549321 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:06.904549350 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1466/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:06.904549350 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_789/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:06.150523601 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          JSType type = n.getJSType();\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_789/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:06.150523601 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_789/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:06.150523601 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:18.097024238 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1650/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:18.097024238 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1250/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:32.579954794 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1250/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:32.583954810 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1250/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:32.583954810 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:16:10.497475244 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:16:10.501475258 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1814/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:16:10.501475258 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:23.179916763 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:23.179916763 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1237/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:23.183916780 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java", 
          "line": 714, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "Replace", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_325/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:57:56.524853889 -0500\n@@ -1670,10 +1670,7 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n-            && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n-        }\n+        final String paramName = \"jscomp_throw_param\";\n       }\n \n       boolean inferred = true;\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_325/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:56.528853903 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_325/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:57:56.528853903 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1231/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:19.419901479 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n@@ -1670,7 +1671,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1231/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:19.423901495 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1231/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:19.423901495 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1231/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:09:19.427901511 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:36.416658065 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:36.416658065 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1506/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:36.420658080 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_230/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:56:39.688623235 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          final String paramName = \"jscomp_throw_param\";\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_230/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:39.692623247 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,8 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n+        StringBuilder builder = new StringBuilder();\n+\t\treturn null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_230/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:56:39.692623247 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "formatPreamble();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "Delete", 
          "seed": "formatConclusion();"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_651/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:02:24.390070443 -0500\n@@ -1568,8 +1568,6 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n-                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n             // and they assign F.prototype to some arbitrary expression,\n@@ -1670,7 +1668,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_651/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:24.394070462 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_651/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:24.394070462 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Replace", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_116/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:55:07.112341415 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_116/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:55:07.116341428 -0500\n@@ -343,7 +343,7 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n+        StringBuilder builder = new StringBuilder();\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Replace", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_225/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:56:35.936611906 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int start = 0;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_225/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:35.940611918 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_225/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:56:35.940611918 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1713/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:00.085188278 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1713/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:00.085188278 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1713/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:00.085188278 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:37.619469449 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:37.623469467 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1090/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:37.623469467 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_902/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:05:26.430850561 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_902/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:26.430850561 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_902/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:05:26.434850576 -0500\n@@ -1417,7 +1417,6 @@\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n       poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:25.719416272 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1073/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:25.719416272 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:41.475212550 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:06:41.475212550 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1005/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:41.475212550 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_715/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:14.846301511 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_715/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:03:14.846301511 -0500\n@@ -1417,7 +1417,6 @@\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n       poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Replace", 
          "seed": "return FALSE;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:52.820717967 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:52.824717982 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1531/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:52.824717982 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_845/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:46.250689693 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          JSType type = n.getJSType();\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_845/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:46.250689693 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_845/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:46.254689709 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_845/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:04:46.254689709 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_983/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:26.351140528 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_983/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:26.355140547 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 949, 
          "faulty": "if (functionType.makesStructs() && !rvalueType.isStruct()) {\n  String funName=functionType.getTypeOfThis().toString();\n  compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,\"struct\",funName));\n}", 
          "type": "Delete", 
          "seed": "return new DefaultCodingConvention();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:14.317247341 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:14.321247359 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:14.321247359 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1734/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:15:14.325247375 -0500\n@@ -945,12 +945,6 @@\n             JSType rvalueType = rvalue.getJSType();\n             validator.expectObject(t, rvalue, rvalueType,\n                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);\n-            // Only assign structs to the prototype of a @struct constructor\n-            if (functionType.makesStructs() && !rvalueType.isStruct()) {\n-              String funName = functionType.getTypeOfThis().toString();\n-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n-                                          \"struct\", funName));\n-            }\n             return;\n           }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_719/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:03:16.678309649 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_719/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:03:16.682309667 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:08:02.559578900 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:08:02.559578900 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1124/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:08:02.559578900 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "return toDot(n,null);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_946/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:00.539014471 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_946/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:00.543014491 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_946/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:00.543014491 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1038/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:04.263318714 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1038/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:04.263318714 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1038/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:07:04.263318714 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_101/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:54:55.060304331 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1243/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:27.943936069 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1243/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:27.943936069 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1243/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:27.947936085 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 0:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_970/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:06:17.887099643 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_970/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:06:17.891099662 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_970/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:06:17.891099662 -0500\n@@ -1417,7 +1417,6 @@\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n       poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n     return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeValidator.java", 
          "line": 346, 
          "faulty": "expectString(t,indexNode,indexType,\"property access\");", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1670, 
          "faulty": "String className=qName.substring(0,qName.lastIndexOf(\".prototype\"));", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:13:35.644872764 -0500\n@@ -1667,7 +1667,8 @@\n \n       // Prototypes of constructors and interfaces are always declared.\n       if (qName != null && qName.endsWith(\".prototype\")) {\n-        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n+        int index = -1;\n+\t\tString className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:13:35.644872764 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeValidator.java\t2018-12-02 06:13:35.648872778 -0500\n@@ -343,7 +343,6 @@\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n         expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:13:35.648872778 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1593/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:13:35.652872792 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1248/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:31.659951082 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1248/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:31.659951082 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1248/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:31.663951099 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "return EMPTY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1226/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:16.583889923 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1226/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:16.587889940 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1226/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:16.587889940 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1970/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:18:12.653948106 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1970/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:18:12.657948121 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1970/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:18:12.657948121 -0500\n@@ -653,9 +653,12 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Replace", 
          "seed": "return isExported(name,false) || isExported(name,true);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:09:41.255989673 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:09:41.255989673 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:09:41.259989689 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1261/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:09:41.259989689 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "Delete", 
          "seed": "formatPreamble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_186/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:56:02.860511715 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1722/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:06.601215391 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1722/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:06.605215409 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1722/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:15:06.605215409 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 442, 
          "faulty": "handleObjectLit(t,n);", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_923/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:05:41.826920419 -0500\n@@ -439,7 +439,7 @@\n       if (n.isGetProp()) {\n         handleGetProp(t, n);\n       } else if (n.isObjectLit()) {\n-        handleObjectLit(t, n);\n+        int start = 0;\n       }\n     }\n \n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1378/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:11:05.088317085 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1378/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:11:05.096317117 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_656/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:02:27.150083451 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        int start = 0;\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_656/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:02:27.150083451 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_656/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:02:27.154083470 -0500\n@@ -1416,7 +1416,6 @@\n       JSType type, ObjectType newImplicitProto) {\n     if (type instanceof PrototypeObjectType) {\n       PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n       poType.setImplicitPrototype(newImplicitProto);\n       return true;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "return BOTH;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1421, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:14:22.913041311 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:22.917041326 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:22.917041326 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1658/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:22.921041340 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1675, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "final String paramName=\"jscomp_throw_param\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:07:14.395365061 -0500\n@@ -1672,7 +1672,8 @@\n         JSType classType = slot == null ? null : slot.getType();\n         if (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n-          return false;\n+          final String paramName = \"jscomp_throw_param\";\n+\t\treturn false;\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:14.395365061 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:14.399365078 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1056/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:07:14.399365078 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:42.988682107 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:42.992682122 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:42.992682122 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1516/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:42.992682122 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1673, 
          "faulty": "if (classType != null && (classType.isConstructor() || classType.isInterface())) {\n  return false;\n}", 
          "type": "InsertBefore", 
          "seed": "JSType type=n.getJSType();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_861/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:04:56.234730152 -0500\n@@ -1670,7 +1670,8 @@\n         String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n         Var slot = scope.getSlot(className);\n         JSType classType = slot == null ? null : slot.getType();\n-        if (classType != null\n+        JSType type = n.getJSType();\n+\t\tif (classType != null\n             && (classType.isConstructor() || classType.isInterface())) {\n           return false;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_861/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:04:56.238730168 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_861/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:04:56.238730168 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Replace", 
          "seed": "return new DotFormatter();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1049/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:07:10.675348104 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1049/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:07:10.691348177 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1049/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:07:10.691348177 -0500\n@@ -951,7 +951,6 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeCheck.java", 
          "line": 954, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "int start=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1952/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:59.861899756 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1952/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:59.861899756 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1952/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:59.861899756 -0500\n@@ -653,8 +653,11 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n         addJsString(n);\n         break;\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 05:43:55.074213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1952/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypeCheck.java\t2018-12-02 06:17:59.865899771 -0500\n@@ -951,7 +951,7 @@\n               compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                           \"struct\", funName));\n             }\n-            return;\n+            int start = 0;\n           }\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 498, 
          "faulty": "T type=typeSystem.getType(getScope(),n,name);", 
          "type": "Replace", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1529/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:12:51.880714544 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int index = -1;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1529/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:12:51.884714558 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1529/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:12:51.884714558 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1529/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:12:51.884714558 -0500\n@@ -702,7 +702,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Replace", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1582, 
          "faulty": "qVar.getScope().undeclare(qVar);", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 501, 
          "faulty": "if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n  }\n}", 
          "type": "Delete", 
          "seed": "return new DotFormatter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_289/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:57:27.300766450 -0500\n@@ -1579,7 +1579,8 @@\n             return;\n           }\n \n-          qVar.getScope().undeclare(qVar);\n+          int start = 0;\n+\t\tqVar.getScope().undeclare(qVar);\n         }\n       }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_289/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:57:27.304766461 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_289/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:57:27.304766461 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 874, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 500, 
          "faulty": "Property prop=getProperty(name);", 
          "type": "InsertBefore", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1681/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:14:38.101095852 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n@@ -871,7 +849,6 @@\n \n       // Ignore the prototype itself at all times.\n       if (\"prototype\".equals(field)) {\n-        return null;\n       }\n \n       // We look up the prototype chain to find the highest place (if any) that\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1681/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:14:38.101095852 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1681/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:14:38.105095869 -0500\n@@ -655,7 +655,7 @@\n       case Token.STRING_KEY:\n         Preconditions.checkState(\n             childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        ;\n         break;\n \n       case Token.STRING:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 497, 
          "faulty": "String name=child.getString();", 
          "type": "InsertBefore", 
          "seed": "int index=-1;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1420, 
          "faulty": "poType.setImplicitPrototype(newImplicitProto);", 
          "type": "Delete", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java", 
          "line": 1571, 
          "faulty": "typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());", 
          "type": "InsertBefore", 
          "seed": "StringBuilder builder=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 05:43:55.078213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1717/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/TypedScopeCreator.java\t2018-12-02 06:15:02.981200345 -0500\n@@ -1568,7 +1568,8 @@\n           if (qVarType != null &&\n               rhsValue != null &&\n               rhsValue.isObjectLit()) {\n-            typeRegistry.resetImplicitPrototype(\n+            StringBuilder builder = new StringBuilder();\n+\t\t\ttypeRegistry.resetImplicitPrototype(\n                 rhsValue.getJSType(), qVarType.getImplicitPrototype());\n           } else if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1717/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:15:02.981200345 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1717/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:15:02.985200360 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 658, 
          "faulty": "addJsString(n);", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1419, 
          "faulty": "poType.clearCachedValues();", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java", 
          "line": 491, 
          "faulty": "for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {\n  String name=child.getString();\n  T type=typeSystem.getType(getScope(),n,name);\n  Property prop=getProperty(name);\n  if (!prop.scheduleRenaming(child,processProperty(t,prop,type,null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(t.getSourceName(),child,propertiesToErrorFor.get(name),Warnings.INVALIDATION,name,(type == null ? \"null\" : type.toString()),n.toString(),\"\"));\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "traverseNodes(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1417, 
          "faulty": "if (type instanceof PrototypeObjectType) {\n  PrototypeObjectType poType=(PrototypeObjectType)type;\n  poType.clearCachedValues();\n  poType.setImplicitPrototype(newImplicitProto);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "case 1:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 705, 
          "faulty": "addExpr(c,1,Context.OTHER);", 
          "type": "Delete", 
          "seed": "switch (type) {\ncase Token.VOID:\n  return \"VOID\";\ndefault :\nreturn Token.name(type);\n}"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "InsertBefore", 
          "seed": "case 2:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 656, 
          "faulty": "Preconditions.checkState(childCount == 1,\"Object lit key must have 1 child\");", 
          "type": "InsertBefore", 
          "seed": "int start=0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java", 
          "line": 1418, 
          "faulty": "PrototypeObjectType poType=(PrototypeObjectType)type;", 
          "type": "Delete", 
          "seed": "return BOTH;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 05:43:57.682213651 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1915/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/DisambiguateProperties.java\t2018-12-02 06:17:30.665788489 -0500\n@@ -488,28 +488,6 @@\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 05:43:55.066213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1915/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-02 06:17:30.669788504 -0500\n@@ -653,9 +653,12 @@\n         break;\n \n       case Token.STRING_KEY:\n-        Preconditions.checkState(\n-            childCount == 1, \"Object lit key must have 1 child\");\n-        addJsString(n);\n+        {\n+\t\t\tint start = 0;\n+\t\t\tPreconditions.checkState(childCount == 1,\n+\t\t\t\t\t\"Object lit key must have 1 child\");\n+\t\t}\n+        ;\n         break;\n \n       case Token.STRING:\n@@ -702,7 +705,6 @@\n               if (!Double.isNaN(d)) {\n                 cc.addNumber(d);\n               } else {\n-                addExpr(c, 1, Context.OTHER);\n               }\n             }\n             add(\":\");\n\n\n--- /tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 05:43:55.082213712 -0500\n+++ /tmp/GenProg_Defects4J_Closure_118/patches_0qet/Patch_1915/patched/tmp/GenProg_Defects4J_Closure_118/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\t2018-12-02 06:17:30.669788504 -0500\n@@ -1414,12 +1414,6 @@\n    */\n   public boolean resetImplicitPrototype(\n       JSType type, ObjectType newImplicitProto) {\n-    if (type instanceof PrototypeObjectType) {\n-      PrototypeObjectType poType = (PrototypeObjectType) type;\n-      poType.clearCachedValues();\n-      poType.setImplicitPrototype(newImplicitProto);\n-      return true;\n-    }\n     return false;\n   }\n \n\n\n"
    }
  ]
}