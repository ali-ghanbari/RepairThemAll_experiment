{
  "repair_end": "2018-12-01 15:51:33.934977", 
  "repair_begin": "2018-12-01 15:32:20.901034", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_565/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:52.251535084 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_9/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:06.967641778 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -110,7 +106,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1514/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:25.702541449 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_460/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:59.130810162 -0500\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n@@ -424,11 +423,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_413/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:34.618475647 -0500\n@@ -85,7 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n+        break;\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -135,7 +135,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "validateHasSourceName(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_201/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:42.144940710 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_201/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:38:42.144940710 -0500\n@@ -765,9 +765,7 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      validateHasSourceName(n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1256/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:05.280625395 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_321/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:46.973825442 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_321/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:46.977825496 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            break;\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1066/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:17.415153527 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1066/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:46:17.415153527 -0500\n@@ -765,9 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t+ \".\", n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1203/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:35.016212429 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_716/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:08.508575719 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_525/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:33.111273883 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1032/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:59.234905446 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -110,7 +106,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -136,7 +132,6 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1265/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:10.200692531 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_837/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:13.037456292 -0500\n@@ -97,7 +97,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -135,7 +134,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n@@ -274,7 +272,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n@@ -448,7 +445,6 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_670/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:45.640263651 -0500\n@@ -215,7 +215,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n@@ -274,7 +273,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_428/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:42.202579146 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -143,8 +139,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_186/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:33.936828691 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -136,7 +132,7 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n+      return;\n     }\n \n     /**\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1553/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:45.030805177 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_382/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:17.778245829 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_382/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:40:17.782245884 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            Kit.codeBug();\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 763, 
          "faulty": "violationHandler.handleViolation(message,n);", 
          "type": "InsertBefore", 
          "seed": "violationHandler.handleViolation(message,n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_676/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:47.584290180 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_676/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:42:47.584290180 -0500\n@@ -761,6 +761,7 @@\n \n   private void violation(String message, Node n) {\n     violationHandler.handleViolation(message, n);\n+\tviolationHandler.handleViolation(message, n);\n   }\n \n   private void validateNodeType(int type, Node n) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1282/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:19.192815230 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -143,8 +139,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1282/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:48:19.192815230 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            break;\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "return \"script\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1394/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:20.109646444 -0500\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1394/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:20.109646444 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            return \"script\";\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_595/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:07.467742732 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n@@ -424,11 +419,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_952/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:15.946314741 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -136,7 +136,7 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n+      return;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1247/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:00.248556732 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_512/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:26.651185725 -0500\n@@ -85,7 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n+        return;\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_271/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:20.109458821 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1138/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:59.747731177 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_70/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:38.736075341 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1623/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:23.327327718 -0500\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n@@ -508,7 +507,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_773/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:38.552985712 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_750/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:27.436834020 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_796/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:49.909140680 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -508,7 +504,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_796/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:43:49.909140680 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            Kit.codeBug();\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_418/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:37.294512165 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1350/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:57.833342484 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "validateMaximumChildCount(n,1);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1408/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:27.045741086 -0500\n@@ -85,7 +85,6 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -216,7 +215,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n@@ -424,11 +422,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1408/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:49:27.049741141 -0500\n@@ -765,7 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      validateMaximumChildCount(n, 1);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 251, 
          "faulty": "return buildCallNode(FACTORY_METHOD_NAME,null,node.getLineno(),node.getCharno());", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_52/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:29.943955350 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -248,8 +244,7 @@\n     @Override\n     public Node reduce(Node node) {\n       if (NodeUtil.isEmptyFunctionExpression(node)) {\n-        return buildCallNode(FACTORY_METHOD_NAME, null,\n-                             node.getLineno(), node.getCharno());\n+        return null;\n       } else {\n         return node;\n       }\n@@ -274,7 +269,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_946/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:12.782271565 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_654/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:38.132161193 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1059/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:13.603101509 -0500\n@@ -85,7 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n+        return;\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -274,7 +273,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1521/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:28.754583093 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -97,7 +93,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -424,11 +419,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "validateMaximumChildCount(n,1);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_844/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:16.769507219 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_844/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:44:16.773507274 -0500\n@@ -765,7 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      validateMaximumChildCount(n, 1);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1630/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:26.567371927 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_72/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:39.512085932 -0500\n@@ -85,19 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n+        break;\n       }\n     }\n   }\n@@ -215,7 +203,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_389/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:21.626298343 -0500\n@@ -92,7 +92,6 @@\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -274,7 +273,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1359/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:01.497392480 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n@@ -274,7 +259,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_264/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:16.085403904 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_118/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:00.304369695 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -143,8 +139,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_760/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:32.064897175 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_375/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:14.330198774 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_500/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:20.943107829 -0500\n@@ -274,7 +274,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_500/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:41:20.943107829 -0500\n@@ -1722,7 +1722,7 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        ;\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_580/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:58.739623624 -0500\n@@ -87,18 +87,6 @@\n       for (Reduction reduction : reductions) {\n         savings += reduction.estimateSavings();\n       }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n@@ -274,7 +262,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_646/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:33.876103112 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n@@ -448,7 +444,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_699/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:59.368450991 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_699/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:42:59.372451045 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            return \"BLOCK\";\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_658/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:40.160188867 -0500\n@@ -85,7 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n+        break;\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 94, 
          "faulty": "for (Reduction reduction : reductions) {\n  reduction.apply();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_782/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:42.965045921 -0500\n@@ -84,17 +84,9 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n@@ -215,7 +207,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_75/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:40.732102582 -0500\n@@ -97,7 +97,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -110,7 +109,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_910/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:53.990015129 -0500\n@@ -92,7 +92,7 @@\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          break;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 244, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return \"BITOR\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_411/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:34.010467349 -0500\n@@ -92,7 +92,7 @@\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          break;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_411/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:40:34.014467403 -0500\n@@ -241,7 +241,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_976/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:28.598487390 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "return \"script\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1036/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:01.090930772 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1036/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:46:01.090930772 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            return \"script\";\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1051/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:09.291042669 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_562/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:50.859516086 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_380/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:17.142237150 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_380/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:40:17.142237150 -0500\n@@ -765,9 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t+ \".\", n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_333/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:52.913906507 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_333/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:52.913906507 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            Kit.codeBug();\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_674/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:46.912281009 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -424,11 +423,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1383/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:15.065577618 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1383/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:49:15.065577618 -0500\n@@ -765,7 +765,9 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t\t+ \".\", n);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_126/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:04.120421774 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Replace", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_552/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:47.211466303 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -97,7 +93,7 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n+        return;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_162/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:21.888664266 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -448,7 +444,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_672/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:46.304272713 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_105/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:54.296287700 -0500\n@@ -274,7 +274,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_766/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:35.460943518 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 416, 
          "faulty": "return HELPER_SOURCE;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1543/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:39.526730076 -0500\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n@@ -413,7 +412,7 @@\n \n     @Override\n     public String getHelperSource() {\n-      return HELPER_SOURCE;\n+      return null;\n     }\n \n     @Override\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_356/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:04.406063340 -0500\n@@ -84,21 +84,7 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n+      break;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_27/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:17.895790921 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_92/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:48.536209089 -0500\n@@ -88,17 +88,7 @@\n         savings += reduction.estimateSavings();\n       }\n \n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n+      break;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_256/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:13.053362525 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_466/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:02.238852576 -0500\n@@ -85,7 +85,6 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -143,8 +142,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_324/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:48.189842037 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1018/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:51.986806541 -0500\n@@ -215,7 +215,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n@@ -274,7 +273,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_892/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:43.845876702 -0500\n@@ -84,15 +84,10 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_573/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:55.299576679 -0500\n@@ -84,15 +84,11 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          return;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_614/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:16.535866480 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -110,7 +106,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 94, 
          "faulty": "for (Reduction reduction : reductions) {\n  reduction.apply();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_537/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:39.907366628 -0500\n@@ -84,17 +84,9 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1224/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:46.632370935 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -216,7 +215,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n@@ -424,11 +422,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_184/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:33.328820393 -0500\n@@ -85,19 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n+        break;\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1158/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:10.611879423 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n@@ -216,7 +201,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_757/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:30.596877142 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n@@ -274,7 +269,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_157/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:20.076639536 -0500\n@@ -84,15 +84,11 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          return;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -110,7 +106,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -274,7 +270,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "violation(\"Missing 'source name' annotation.\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_48/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:28.715938591 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_48/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:37:28.719938645 -0500\n@@ -765,7 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      violation(\"Missing 'source name' annotation.\", n);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_349/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:00.590011263 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "validateNodeType(Token.RETURN,n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1325/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:43.221143099 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -448,7 +444,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1325/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:48:43.221143099 -0500\n@@ -765,9 +765,7 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      validateNodeType(Token.RETURN, n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "validateMaximumChildCount(n,1);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_741/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:22.256763331 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_741/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:43:22.260763386 -0500\n@@ -765,7 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      validateMaximumChildCount(n, 1);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1208/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:37.440245505 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 432, 
          "faulty": "return buildCallNode(FACTORY_METHOD_NAME,propName,node.getLineno(),node.getCharno());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_930/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:04.714161470 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -429,8 +425,7 @@\n               \"Expected STRING, got \" + Token.name(propName.getType()));\n         }\n \n-        return buildCallNode(FACTORY_METHOD_NAME, propName,\n-                             node.getLineno(), node.getCharno());\n+        return null;\n       } else {\n         return node;\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_608/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:14.067832800 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -508,7 +507,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_735/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:19.036719390 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Delete", 
          "seed": "return \"return\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_226/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:56.061130628 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_226/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:38:56.065130683 -0500\n@@ -1722,7 +1722,7 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        ;\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1490/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:11.722350693 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_273/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:20.721467173 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_273/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:39:20.725467227 -0500\n@@ -766,6 +766,9 @@\n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n       violation(\n+\t\t\t\t\"Expected \" + Node.tokenToName(type) + \" but was \"\n+\t\t\t\t\t\t+ Node.tokenToName(n.getType()), n);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_89/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:47.156190255 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -508,7 +508,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 99, 
          "faulty": "addingRoot.addChildrenToFront(helperCode);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_771/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:37.928977197 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -96,7 +92,6 @@\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n       }\n     }\n@@ -135,7 +130,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_371/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:12.442173008 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_371/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:40:12.446173063 -0500\n@@ -1722,7 +1722,7 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        ;\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_97/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:51.060243535 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_97/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:37:51.060243535 -0500\n@@ -765,7 +765,9 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t\t+ \".\", n);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1117/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:47.487563882 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -143,8 +139,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -274,7 +269,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_236/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:01.181200503 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -97,7 +93,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 221, 
          "faulty": "call.addChildToBack(argumentNode.cloneTree());", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_275/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:21.417476671 -0500\n@@ -84,21 +84,7 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n+      return;\n     }\n   }\n \n@@ -218,7 +204,6 @@\n       call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n-        call.addChildToBack(argumentNode.cloneTree());\n       }\n       return call;\n     }\n@@ -508,7 +493,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 251, 
          "faulty": "return buildCallNode(FACTORY_METHOD_NAME,null,node.getLineno(),node.getCharno());", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_68/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:38.116066879 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -248,8 +244,7 @@\n     @Override\n     public Node reduce(Node node) {\n       if (NodeUtil.isEmptyFunctionExpression(node)) {\n-        return buildCallNode(FACTORY_METHOD_NAME, null,\n-                             node.getLineno(), node.getCharno());\n+        return null;\n       } else {\n         return node;\n       }\n@@ -274,7 +269,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Replace", 
          "seed": "if (!(0 <= token && token <= Token.LAST_TOKEN)) throw new IllegalArgumentException();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1385/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:15.693586187 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1385/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:15.693586187 -0500\n@@ -1722,7 +1722,8 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        if (!(0 <= token && token <= Token.LAST_TOKEN))\n+\t\t\tthrow new IllegalArgumentException();\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1352/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:58.433350671 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -135,7 +135,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n@@ -274,7 +273,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_203/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:42.820949935 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_113/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:57.724334484 -0500\n@@ -85,7 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n+        break;\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1416/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:30.729791355 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -448,7 +444,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        return null;\n       }\n       return null;\n     }\n@@ -508,7 +504,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_149/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:16.208586747 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -508,7 +504,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_872/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:33.025729051 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_41/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:25.323892297 -0500\n@@ -97,7 +97,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -274,7 +273,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_924/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:01.706120422 -0500\n@@ -84,15 +84,11 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          break;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_639/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:30.228053330 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -136,7 +132,6 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n     }\n \n     /**\n@@ -274,7 +269,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n@@ -424,11 +419,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_468/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:02.842860820 -0500\n@@ -84,21 +84,7 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n+      return;\n     }\n   }\n \n@@ -143,8 +129,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1049/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:08.687034427 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 179, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_341/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:56.705958257 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -176,7 +175,6 @@\n         Node replacement = reducer.reduce(node);\n         if (replacement != node) {\n           reductions.put(reducer, new Reduction(parent, node, replacement));\n-          return false;\n         }\n       }\n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_39/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:24.703883835 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 178, 
          "faulty": "reductions.put(reducer,new Reduction(parent,node,replacement));", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_550/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:46.607458061 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -175,7 +171,6 @@\n       for (Reducer reducer : reducers) {\n         Node replacement = reducer.reduce(node);\n         if (replacement != node) {\n-          reductions.put(reducer, new Reduction(parent, node, replacement));\n           return false;\n         }\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_554/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:47.815474546 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -136,7 +132,6 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1453/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:50.358059180 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_446/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:51.634707864 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_446/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:40:51.638707919 -0500\n@@ -766,6 +766,9 @@\n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n       violation(\n+\t\t\t\t\"Expected \" + Node.tokenToName(type) + \" but was \"\n+\t\t\t\t\t\t+ Node.tokenToName(n.getType()), n);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_144/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:13.624551482 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_990/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:35.626583293 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -216,7 +216,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_807/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:56.101225178 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 221, 
          "faulty": "call.addChildToBack(argumentNode.cloneTree());", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_103/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:53.688279402 -0500\n@@ -84,20 +84,15 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          return;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -218,7 +213,6 @@\n       call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n-        call.addChildToBack(argumentNode.cloneTree());\n       }\n       return call;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1556/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:46.310822643 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_314/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:43.145773200 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n@@ -424,11 +419,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1481/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:06.122274281 -0500\n@@ -87,18 +87,6 @@\n       for (Reduction reduction : reductions) {\n         savings += reduction.estimateSavings();\n       }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1481/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:50:06.126274335 -0500\n@@ -766,6 +766,9 @@\n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n       violation(\n+\t\t\t\t\"Expected \" + Node.tokenToName(type) + \" but was \"\n+\t\t\t\t\t\t+ Node.tokenToName(n.getType()), n);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_694/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:56.924417638 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n@@ -110,7 +95,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -215,7 +200,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Replace", 
          "seed": "if (!(0 <= token && token <= Token.LAST_TOKEN)) throw new IllegalArgumentException();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1432/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:38.157892711 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1432/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:38.161892766 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            return null;\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n@@ -1722,7 +1722,8 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        if (!(0 <= token && token <= Token.LAST_TOKEN))\n+\t\t\tthrow new IllegalArgumentException();\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_665/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:43.200230354 -0500\n@@ -85,7 +85,6 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -424,11 +423,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_232/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:59.249174136 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_232/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:38:59.253174191 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            Kit.codeBug();\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Delete", 
          "seed": "if (!(0 <= token && token <= Token.LAST_TOKEN)) throw new IllegalArgumentException();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 763, 
          "faulty": "violationHandler.handleViolation(message,n);", 
          "type": "InsertBefore", 
          "seed": "violationHandler.handleViolation(message,n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_304/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:38.177705401 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_304/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:38.177705401 -0500\n@@ -1722,7 +1722,7 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        ;\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_304/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:39:38.177705401 -0500\n@@ -761,6 +761,7 @@\n \n   private void violation(String message, Node n) {\n     violationHandler.handleViolation(message, n);\n+\tviolationHandler.handleViolation(message, n);\n   }\n \n   private void validateNodeType(int type, Node n) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 244, 
          "faulty": "return \"free_call\";", 
          "type": "Delete", 
          "seed": "return \"EOL\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_622/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:20.971927016 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_622/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:42:20.975927071 -0500\n@@ -241,7 +241,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          ;\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Delete", 
          "seed": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_661/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:41.384205571 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_661/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:42:41.388205626 -0500\n@@ -765,9 +765,6 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1021/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:53.510827337 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1021/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:45:53.510827337 -0500\n@@ -765,9 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t+ \".\", n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Replace", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_861/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:26.757643517 -0500\n@@ -84,21 +84,7 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n+      return;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1113/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:45.679539210 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_980/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:30.518513591 -0500\n@@ -215,7 +215,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n@@ -274,7 +273,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_905/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:51.381979540 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_916/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:57.166058469 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -97,7 +93,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 432, 
          "faulty": "return buildCallNode(FACTORY_METHOD_NAME,propName,node.getLineno(),node.getCharno());", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_336/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:54.125923047 -0500\n@@ -274,7 +274,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n@@ -429,8 +429,7 @@\n               \"Expected STRING, got \" + Token.name(propName.getType()));\n         }\n \n-        return buildCallNode(FACTORY_METHOD_NAME, propName,\n-                             node.getLineno(), node.getCharno());\n+        return null;\n       } else {\n         return node;\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_933/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:05.982178772 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_933/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:45:05.986178827 -0500\n@@ -765,9 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t+ \".\", n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_211/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:47.321011350 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_502/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:21.547116071 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -97,7 +93,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -215,7 +210,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1141/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:00.943747497 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1141/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:47:00.943747497 -0500\n@@ -765,9 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t+ \".\", n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1344/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:54.685299528 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_196/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:39.608906100 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1143/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:01.575756121 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_44/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:26.699911076 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n@@ -215,7 +210,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_44/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:26.699911076 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            break;\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "if (n.getType() != type) {\n  violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1532/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:33.874652955 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1532/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:50:33.878653009 -0500\n@@ -765,7 +765,12 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      if (n.getType() != type) {\n+\t\t\tviolation(\n+\t\t\t\t\t\"Expected \" + Node.tokenToName(type) + \" but was \"\n+\t\t\t\t\t\t\t+ Node.tokenToName(n.getType()), n);\n+\t\t}\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_504/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:22.207125078 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -97,7 +93,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -135,7 +130,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_62/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:35.664033415 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_109/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:55.828308608 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_420/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:37.898520409 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_407/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:32.174442292 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_876/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:34.829753669 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -274,7 +273,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n@@ -424,11 +422,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_777/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:40.441011477 -0500\n@@ -85,7 +85,6 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -274,7 +273,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1468/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:58.694172926 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_491/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:16.675049584 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -448,7 +444,6 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 99, 
          "faulty": "addingRoot.addChildrenToFront(helperCode);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_369/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:11.810164384 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -96,7 +92,6 @@\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n       }\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1301/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:29.636957742 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1426/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:35.737859690 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 221, 
          "faulty": "call.addChildToBack(argumentNode.cloneTree());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_135/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:09.076489412 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -218,7 +214,6 @@\n       call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n-        call.addChildToBack(argumentNode.cloneTree());\n       }\n       return call;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_786/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:44.877072012 -0500\n@@ -135,7 +135,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n@@ -274,7 +273,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n@@ -508,7 +506,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_789/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:46.133089152 -0500\n@@ -92,7 +92,6 @@\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -143,8 +142,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1634/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:28.399396925 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1634/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:51:28.399396925 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            break;\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1379/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:13.265553056 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n@@ -424,11 +419,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "validateNodeType(Token.RETURN,n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1538/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:36.966695145 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n@@ -274,7 +269,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1538/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:50:36.966695145 -0500\n@@ -765,9 +765,7 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      validateNodeType(Token.RETURN, n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_100/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:52.412261987 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_12/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:08.451662031 -0500\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_85/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:45.204163615 -0500\n@@ -84,15 +84,11 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          return;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 251, 
          "faulty": "return buildCallNode(FACTORY_METHOD_NAME,null,node.getLineno(),node.getCharno());", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_170/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:25.524713888 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -248,8 +248,7 @@\n     @Override\n     public Node reduce(Node node) {\n       if (NodeUtil.isEmptyFunctionExpression(node)) {\n-        return buildCallNode(FACTORY_METHOD_NAME, null,\n-                             node.getLineno(), node.getCharno());\n+        return null;\n       } else {\n         return node;\n       }\n@@ -424,11 +423,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_50/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:29.331946997 -0500\n@@ -85,14 +85,14 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n+        return;\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          break;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_567/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:52.879543654 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_107/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:54.952296653 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_107/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:54.952296653 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            ;\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_713/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:07.304559289 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Delete", 
          "seed": "return \"return\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1356/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:00.241375342 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -110,7 +106,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1356/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:00.245375396 -0500\n@@ -1722,7 +1722,7 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        ;\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1450/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:49.158042806 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "InsertBefore", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_179/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:30.720784800 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_179/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:38:30.720784800 -0500\n@@ -1674,7 +1674,10 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            {\n+\t\t\tKit.codeBug();\n+\t\t\treturn \"call\";\n+\t\t}\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_686/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:52.532357703 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_327/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:49.621861579 -0500\n@@ -85,7 +85,6 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "throw new IllegalArgumentException();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_962/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:20.346374783 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_962/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:45:20.346374783 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            throw new IllegalArgumentException();\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1518/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:27.498565955 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1620/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:22.127311345 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_344/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:58.033976380 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 432, 
          "faulty": "return buildCallNode(FACTORY_METHOD_NAME,propName,node.getLineno(),node.getCharno());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_493/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:17.279057826 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -429,8 +425,7 @@\n               \"Expected STRING, got \" + Token.name(propName.getType()));\n         }\n \n-        return buildCallNode(FACTORY_METHOD_NAME, propName,\n-                             node.getLineno(), node.getCharno());\n+        return null;\n       } else {\n         return node;\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_982/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:31.186522704 -0500\n@@ -85,7 +85,6 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -274,7 +273,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_155/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:19.440630856 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 179, 
          "faulty": "return false;", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1388/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:16.893602561 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -176,7 +172,6 @@\n         Node replacement = reducer.reduce(node);\n         if (replacement != node) {\n           reductions.put(reducer, new Reduction(parent, node, replacement));\n-          return false;\n         }\n       }\n       return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "validateHasSourceName(n);"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1524/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:30.118601704 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1524/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:50:30.118601704 -0500\n@@ -1722,7 +1722,7 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        ;\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1524/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:50:30.122601760 -0500\n@@ -765,7 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      validateHasSourceName(n);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Replace", 
          "seed": "if (!(0 <= token && token <= Token.LAST_TOKEN)) throw new IllegalArgumentException();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1576/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:58.174984525 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1576/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:50:58.178984580 -0500\n@@ -1722,7 +1722,8 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        if (!(0 <= token && token <= Token.LAST_TOKEN))\n+\t\t\tthrow new IllegalArgumentException();\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_523/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:32.507265641 -0500\n@@ -85,7 +85,7 @@\n       // Estimate savings\n       int savings = 0;\n       for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n+        break;\n       }\n \n       // Compare estimated savings against the helper cost.  Apply\n@@ -215,7 +215,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_731/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:17.800702523 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_80/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:43.292137521 -0500\n@@ -84,15 +84,11 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          break;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 99, 
          "faulty": "addingRoot.addChildrenToFront(helperCode);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_733/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:18.432711147 -0500\n@@ -84,19 +84,13 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n       }\n     }\n@@ -143,8 +137,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_259/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:14.261379011 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1430/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:37.529884142 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1529/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:32.650636253 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -143,8 +139,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -448,7 +443,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 244, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"ENTERWITH\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_816/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:01.101293410 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_816/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:44:01.101293410 -0500\n@@ -241,7 +241,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"ENTERWITH\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "validateHasSourceName(n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1628/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:25.935363304 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1628/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:51:25.939363358 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            break;\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1628/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:51:25.939363358 -0500\n@@ -765,9 +765,7 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      validateHasSourceName(n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1184/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:24.412067731 -0500\n@@ -110,7 +110,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -274,7 +274,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1178/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:21.336025758 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_291/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:30.885605885 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_680/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:49.504316381 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_577/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:57.483606484 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n@@ -508,7 +504,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_442/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:49.810682972 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_993/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:36.898600650 -0500\n@@ -135,7 +135,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n@@ -274,7 +273,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_558/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:49.619499164 -0500\n@@ -84,15 +84,11 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n+          return;\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n@@ -136,7 +132,6 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "Replace", 
          "seed": "violation(\"Expected statement but was \" + Node.tokenToName(n.getType()) + \".\",n);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_120/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:00.928378211 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_120/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:38:00.928378211 -0500\n@@ -765,9 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+      violation(\"Expected statement but was \" + Node.tokenToName(n.getType())\n+\t\t\t+ \".\", n);\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_34/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:22.175849333 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -110,7 +106,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 99, 
          "faulty": "addingRoot.addChildrenToFront(helperCode);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1601/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:12.335177734 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -96,7 +92,6 @@\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n       }\n     }\n@@ -143,8 +138,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 244, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "throw new IllegalArgumentException();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_456/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:57.298785160 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_456/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:40:57.302785216 -0500\n@@ -241,7 +241,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          throw new IllegalArgumentException();\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_548/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:46.007449872 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Replace", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1160/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:11.255888210 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -136,7 +132,6 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1160/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:47:11.263888320 -0500\n@@ -1722,7 +1722,242 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        switch (token) {\n+\t\tcase Token.ERROR:\n+\t\t\treturn \"error\";\n+\t\tcase Token.EOF:\n+\t\t\treturn \"eof\";\n+\t\tcase Token.EOL:\n+\t\t\treturn \"eol\";\n+\t\tcase Token.ENTERWITH:\n+\t\t\treturn \"enterwith\";\n+\t\tcase Token.LEAVEWITH:\n+\t\t\treturn \"leavewith\";\n+\t\tcase Token.RETURN:\n+\t\t\treturn \"return\";\n+\t\tcase Token.GOTO:\n+\t\t\treturn \"goto\";\n+\t\tcase Token.IFEQ:\n+\t\t\treturn \"ifeq\";\n+\t\tcase Token.IFNE:\n+\t\t\treturn \"ifne\";\n+\t\tcase Token.SETNAME:\n+\t\t\treturn \"setname\";\n+\t\tcase Token.BITOR:\n+\t\t\treturn \"bitor\";\n+\t\tcase Token.BITXOR:\n+\t\t\treturn \"bitxor\";\n+\t\tcase Token.BITAND:\n+\t\t\treturn \"bitand\";\n+\t\tcase Token.EQ:\n+\t\t\treturn \"eq\";\n+\t\tcase Token.NE:\n+\t\t\treturn \"ne\";\n+\t\tcase Token.LT:\n+\t\t\treturn \"lt\";\n+\t\tcase Token.LE:\n+\t\t\treturn \"le\";\n+\t\tcase Token.GT:\n+\t\t\treturn \"gt\";\n+\t\tcase Token.GE:\n+\t\t\treturn \"ge\";\n+\t\tcase Token.LSH:\n+\t\t\treturn \"lsh\";\n+\t\tcase Token.RSH:\n+\t\t\treturn \"rsh\";\n+\t\tcase Token.URSH:\n+\t\t\treturn \"ursh\";\n+\t\tcase Token.ADD:\n+\t\t\treturn \"add\";\n+\t\tcase Token.SUB:\n+\t\t\treturn \"sub\";\n+\t\tcase Token.MUL:\n+\t\t\treturn \"mul\";\n+\t\tcase Token.DIV:\n+\t\t\treturn \"div\";\n+\t\tcase Token.MOD:\n+\t\t\treturn \"mod\";\n+\t\tcase Token.BITNOT:\n+\t\t\treturn \"bitnot\";\n+\t\tcase Token.NEG:\n+\t\t\treturn \"neg\";\n+\t\tcase Token.NEW:\n+\t\t\treturn \"new\";\n+\t\tcase Token.DELPROP:\n+\t\t\treturn \"delprop\";\n+\t\tcase Token.TYPEOF:\n+\t\t\treturn \"typeof\";\n+\t\tcase Token.GETPROP:\n+\t\t\treturn \"getprop\";\n+\t\tcase Token.SETPROP:\n+\t\t\treturn \"setprop\";\n+\t\tcase Token.GETELEM:\n+\t\t\treturn \"getelem\";\n+\t\tcase Token.SETELEM:\n+\t\t\treturn \"setelem\";\n+\t\tcase Token.CALL:\n+\t\t\treturn \"call\";\n+\t\tcase Token.NAME:\n+\t\t\treturn \"name\";\n+\t\tcase Token.NUMBER:\n+\t\t\treturn \"number\";\n+\t\tcase Token.STRING:\n+\t\t\treturn \"string\";\n+\t\tcase Token.NULL:\n+\t\t\treturn \"null\";\n+\t\tcase Token.THIS:\n+\t\t\treturn \"this\";\n+\t\tcase Token.FALSE:\n+\t\t\treturn \"false\";\n+\t\tcase Token.TRUE:\n+\t\t\treturn \"true\";\n+\t\tcase Token.SHEQ:\n+\t\t\treturn \"sheq\";\n+\t\tcase Token.SHNE:\n+\t\t\treturn \"shne\";\n+\t\tcase Token.REGEXP:\n+\t\t\treturn \"regexp\";\n+\t\tcase Token.POS:\n+\t\t\treturn \"pos\";\n+\t\tcase Token.BINDNAME:\n+\t\t\treturn \"bindname\";\n+\t\tcase Token.THROW:\n+\t\t\treturn \"throw\";\n+\t\tcase Token.IN:\n+\t\t\treturn \"in\";\n+\t\tcase Token.INSTANCEOF:\n+\t\t\treturn \"instanceof\";\n+\t\tcase Token.GETVAR:\n+\t\t\treturn \"getvar\";\n+\t\tcase Token.SETVAR:\n+\t\t\treturn \"setvar\";\n+\t\tcase Token.TRY:\n+\t\t\treturn \"try\";\n+\t\tcase Token.TYPEOFNAME:\n+\t\t\treturn \"typeofname\";\n+\t\tcase Token.THISFN:\n+\t\t\treturn \"thisfn\";\n+\t\tcase Token.SEMI:\n+\t\t\treturn \"semi\";\n+\t\tcase Token.LB:\n+\t\t\treturn \"lb\";\n+\t\tcase Token.RB:\n+\t\t\treturn \"rb\";\n+\t\tcase Token.LC:\n+\t\t\treturn \"lc\";\n+\t\tcase Token.RC:\n+\t\t\treturn \"rc\";\n+\t\tcase Token.LP:\n+\t\t\treturn \"lp\";\n+\t\tcase Token.RP:\n+\t\t\treturn \"rp\";\n+\t\tcase Token.COMMA:\n+\t\t\treturn \"comma\";\n+\t\tcase Token.ASSIGN:\n+\t\t\treturn \"assign\";\n+\t\tcase Token.ASSIGN_BITOR:\n+\t\t\treturn \"assign_bitor\";\n+\t\tcase Token.ASSIGN_BITXOR:\n+\t\t\treturn \"assign_bitxor\";\n+\t\tcase Token.ASSIGN_BITAND:\n+\t\t\treturn \"assign_bitand\";\n+\t\tcase Token.ASSIGN_LSH:\n+\t\t\treturn \"assign_lsh\";\n+\t\tcase Token.ASSIGN_RSH:\n+\t\t\treturn \"assign_rsh\";\n+\t\tcase Token.ASSIGN_URSH:\n+\t\t\treturn \"assign_ursh\";\n+\t\tcase Token.ASSIGN_ADD:\n+\t\t\treturn \"assign_add\";\n+\t\tcase Token.ASSIGN_SUB:\n+\t\t\treturn \"assign_sub\";\n+\t\tcase Token.ASSIGN_MUL:\n+\t\t\treturn \"assign_mul\";\n+\t\tcase Token.ASSIGN_DIV:\n+\t\t\treturn \"assign_div\";\n+\t\tcase Token.ASSIGN_MOD:\n+\t\t\treturn \"assign_mod\";\n+\t\tcase Token.HOOK:\n+\t\t\treturn \"hook\";\n+\t\tcase Token.COLON:\n+\t\t\treturn \"colon\";\n+\t\tcase Token.OR:\n+\t\t\treturn \"or\";\n+\t\tcase Token.AND:\n+\t\t\treturn \"and\";\n+\t\tcase Token.INC:\n+\t\t\treturn \"inc\";\n+\t\tcase Token.DEC:\n+\t\t\treturn \"dec\";\n+\t\tcase Token.DOT:\n+\t\t\treturn \"dot\";\n+\t\tcase Token.FUNCTION:\n+\t\t\treturn \"function\";\n+\t\tcase Token.EXPORT:\n+\t\t\treturn \"export\";\n+\t\tcase Token.IMPORT:\n+\t\t\treturn \"import\";\n+\t\tcase Token.IF:\n+\t\t\treturn \"if\";\n+\t\tcase Token.ELSE:\n+\t\t\treturn \"else\";\n+\t\tcase Token.SWITCH:\n+\t\t\treturn \"switch\";\n+\t\tcase Token.CASE:\n+\t\t\treturn \"case\";\n+\t\tcase Token.DEFAULT:\n+\t\t\treturn \"default\";\n+\t\tcase Token.WHILE:\n+\t\t\treturn \"while\";\n+\t\tcase Token.DO:\n+\t\t\treturn \"do\";\n+\t\tcase Token.FOR:\n+\t\t\treturn \"for\";\n+\t\tcase Token.BREAK:\n+\t\t\treturn \"break\";\n+\t\tcase Token.CONTINUE:\n+\t\t\treturn \"continue\";\n+\t\tcase Token.VAR:\n+\t\t\treturn \"var\";\n+\t\tcase Token.WITH:\n+\t\t\treturn \"with\";\n+\t\tcase Token.CATCH:\n+\t\t\treturn \"catch\";\n+\t\tcase Token.FINALLY:\n+\t\t\treturn \"finally\";\n+\t\tcase Token.RESERVED:\n+\t\t\treturn \"reserved\";\n+\t\tcase Token.NOT:\n+\t\t\treturn \"not\";\n+\t\tcase Token.VOID:\n+\t\t\treturn \"void\";\n+\t\tcase Token.BLOCK:\n+\t\t\treturn \"block\";\n+\t\tcase Token.ARRAYLIT:\n+\t\t\treturn \"arraylit\";\n+\t\tcase Token.OBJECTLIT:\n+\t\t\treturn \"objectlit\";\n+\t\tcase Token.LABEL:\n+\t\t\treturn \"label\";\n+\t\tcase Token.TARGET:\n+\t\t\treturn \"target\";\n+\t\tcase Token.LOOP:\n+\t\t\treturn \"loop\";\n+\t\tcase Token.EXPR_VOID:\n+\t\t\treturn \"expr_void\";\n+\t\tcase Token.EXPR_RESULT:\n+\t\t\treturn \"expr_result\";\n+\t\tcase Token.JSR:\n+\t\t\treturn \"jsr\";\n+\t\tcase Token.SCRIPT:\n+\t\t\treturn \"script\";\n+\t\tcase Token.EMPTY:\n+\t\t\treturn \"empty\";\n+\t\tcase Token.GET_REF:\n+\t\t\treturn \"get_ref\";\n+\t\tcase Token.REF_SPECIAL:\n+\t\t\treturn \"ref_special\";\n+\t\t}\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 511, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1164/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:13.067912936 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n@@ -508,7 +503,6 @@\n     private Node getSetPropertyName(Node functionNode) {\n       Node body = functionNode.getLastChild();\n       if (!body.hasOneChild()) {\n-        return null;\n       }\n \n       Node argList = functionNode.getFirstChild().getNext();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1406/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:26.441732845 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1071/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:46:19.907187532 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 218, 
          "faulty": "call.putBooleanProp(Node.FREE_CALL,true);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_570/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:54.095560248 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -215,7 +211,6 @@\n     protected final Node buildCallNode(String methodName, Node argumentNode,\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n-      call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1198/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:47:32.456177497 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "Replace", 
          "seed": "throw new IllegalArgumentException();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1457/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:52.202084342 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1457/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:52.206084397 -0500\n@@ -1674,7 +1674,7 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            throw new IllegalArgumentException();\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1617/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:20.847293879 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n@@ -448,7 +433,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_601/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:10.567785037 -0500\n@@ -143,8 +143,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -424,11 +423,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1401/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:23.989699387 -0500\n@@ -87,18 +87,6 @@\n       for (Reduction reduction : reductions) {\n         savings += reduction.estimateSavings();\n       }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 94, 
          "faulty": "for (Reduction reduction : reductions) {\n  reduction.apply();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_439/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:40:48.542665668 -0500\n@@ -84,17 +84,9 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "InsertBefore", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_703/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:01.280477083 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_703/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:43:01.280477083 -0500\n@@ -1722,7 +1722,245 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        {\n+\t\t\tswitch (token) {\n+\t\t\tcase Token.ERROR:\n+\t\t\t\treturn \"error\";\n+\t\t\tcase Token.EOF:\n+\t\t\t\treturn \"eof\";\n+\t\t\tcase Token.EOL:\n+\t\t\t\treturn \"eol\";\n+\t\t\tcase Token.ENTERWITH:\n+\t\t\t\treturn \"enterwith\";\n+\t\t\tcase Token.LEAVEWITH:\n+\t\t\t\treturn \"leavewith\";\n+\t\t\tcase Token.RETURN:\n+\t\t\t\treturn \"return\";\n+\t\t\tcase Token.GOTO:\n+\t\t\t\treturn \"goto\";\n+\t\t\tcase Token.IFEQ:\n+\t\t\t\treturn \"ifeq\";\n+\t\t\tcase Token.IFNE:\n+\t\t\t\treturn \"ifne\";\n+\t\t\tcase Token.SETNAME:\n+\t\t\t\treturn \"setname\";\n+\t\t\tcase Token.BITOR:\n+\t\t\t\treturn \"bitor\";\n+\t\t\tcase Token.BITXOR:\n+\t\t\t\treturn \"bitxor\";\n+\t\t\tcase Token.BITAND:\n+\t\t\t\treturn \"bitand\";\n+\t\t\tcase Token.EQ:\n+\t\t\t\treturn \"eq\";\n+\t\t\tcase Token.NE:\n+\t\t\t\treturn \"ne\";\n+\t\t\tcase Token.LT:\n+\t\t\t\treturn \"lt\";\n+\t\t\tcase Token.LE:\n+\t\t\t\treturn \"le\";\n+\t\t\tcase Token.GT:\n+\t\t\t\treturn \"gt\";\n+\t\t\tcase Token.GE:\n+\t\t\t\treturn \"ge\";\n+\t\t\tcase Token.LSH:\n+\t\t\t\treturn \"lsh\";\n+\t\t\tcase Token.RSH:\n+\t\t\t\treturn \"rsh\";\n+\t\t\tcase Token.URSH:\n+\t\t\t\treturn \"ursh\";\n+\t\t\tcase Token.ADD:\n+\t\t\t\treturn \"add\";\n+\t\t\tcase Token.SUB:\n+\t\t\t\treturn \"sub\";\n+\t\t\tcase Token.MUL:\n+\t\t\t\treturn \"mul\";\n+\t\t\tcase Token.DIV:\n+\t\t\t\treturn \"div\";\n+\t\t\tcase Token.MOD:\n+\t\t\t\treturn \"mod\";\n+\t\t\tcase Token.BITNOT:\n+\t\t\t\treturn \"bitnot\";\n+\t\t\tcase Token.NEG:\n+\t\t\t\treturn \"neg\";\n+\t\t\tcase Token.NEW:\n+\t\t\t\treturn \"new\";\n+\t\t\tcase Token.DELPROP:\n+\t\t\t\treturn \"delprop\";\n+\t\t\tcase Token.TYPEOF:\n+\t\t\t\treturn \"typeof\";\n+\t\t\tcase Token.GETPROP:\n+\t\t\t\treturn \"getprop\";\n+\t\t\tcase Token.SETPROP:\n+\t\t\t\treturn \"setprop\";\n+\t\t\tcase Token.GETELEM:\n+\t\t\t\treturn \"getelem\";\n+\t\t\tcase Token.SETELEM:\n+\t\t\t\treturn \"setelem\";\n+\t\t\tcase Token.CALL:\n+\t\t\t\treturn \"call\";\n+\t\t\tcase Token.NAME:\n+\t\t\t\treturn \"name\";\n+\t\t\tcase Token.NUMBER:\n+\t\t\t\treturn \"number\";\n+\t\t\tcase Token.STRING:\n+\t\t\t\treturn \"string\";\n+\t\t\tcase Token.NULL:\n+\t\t\t\treturn \"null\";\n+\t\t\tcase Token.THIS:\n+\t\t\t\treturn \"this\";\n+\t\t\tcase Token.FALSE:\n+\t\t\t\treturn \"false\";\n+\t\t\tcase Token.TRUE:\n+\t\t\t\treturn \"true\";\n+\t\t\tcase Token.SHEQ:\n+\t\t\t\treturn \"sheq\";\n+\t\t\tcase Token.SHNE:\n+\t\t\t\treturn \"shne\";\n+\t\t\tcase Token.REGEXP:\n+\t\t\t\treturn \"regexp\";\n+\t\t\tcase Token.POS:\n+\t\t\t\treturn \"pos\";\n+\t\t\tcase Token.BINDNAME:\n+\t\t\t\treturn \"bindname\";\n+\t\t\tcase Token.THROW:\n+\t\t\t\treturn \"throw\";\n+\t\t\tcase Token.IN:\n+\t\t\t\treturn \"in\";\n+\t\t\tcase Token.INSTANCEOF:\n+\t\t\t\treturn \"instanceof\";\n+\t\t\tcase Token.GETVAR:\n+\t\t\t\treturn \"getvar\";\n+\t\t\tcase Token.SETVAR:\n+\t\t\t\treturn \"setvar\";\n+\t\t\tcase Token.TRY:\n+\t\t\t\treturn \"try\";\n+\t\t\tcase Token.TYPEOFNAME:\n+\t\t\t\treturn \"typeofname\";\n+\t\t\tcase Token.THISFN:\n+\t\t\t\treturn \"thisfn\";\n+\t\t\tcase Token.SEMI:\n+\t\t\t\treturn \"semi\";\n+\t\t\tcase Token.LB:\n+\t\t\t\treturn \"lb\";\n+\t\t\tcase Token.RB:\n+\t\t\t\treturn \"rb\";\n+\t\t\tcase Token.LC:\n+\t\t\t\treturn \"lc\";\n+\t\t\tcase Token.RC:\n+\t\t\t\treturn \"rc\";\n+\t\t\tcase Token.LP:\n+\t\t\t\treturn \"lp\";\n+\t\t\tcase Token.RP:\n+\t\t\t\treturn \"rp\";\n+\t\t\tcase Token.COMMA:\n+\t\t\t\treturn \"comma\";\n+\t\t\tcase Token.ASSIGN:\n+\t\t\t\treturn \"assign\";\n+\t\t\tcase Token.ASSIGN_BITOR:\n+\t\t\t\treturn \"assign_bitor\";\n+\t\t\tcase Token.ASSIGN_BITXOR:\n+\t\t\t\treturn \"assign_bitxor\";\n+\t\t\tcase Token.ASSIGN_BITAND:\n+\t\t\t\treturn \"assign_bitand\";\n+\t\t\tcase Token.ASSIGN_LSH:\n+\t\t\t\treturn \"assign_lsh\";\n+\t\t\tcase Token.ASSIGN_RSH:\n+\t\t\t\treturn \"assign_rsh\";\n+\t\t\tcase Token.ASSIGN_URSH:\n+\t\t\t\treturn \"assign_ursh\";\n+\t\t\tcase Token.ASSIGN_ADD:\n+\t\t\t\treturn \"assign_add\";\n+\t\t\tcase Token.ASSIGN_SUB:\n+\t\t\t\treturn \"assign_sub\";\n+\t\t\tcase Token.ASSIGN_MUL:\n+\t\t\t\treturn \"assign_mul\";\n+\t\t\tcase Token.ASSIGN_DIV:\n+\t\t\t\treturn \"assign_div\";\n+\t\t\tcase Token.ASSIGN_MOD:\n+\t\t\t\treturn \"assign_mod\";\n+\t\t\tcase Token.HOOK:\n+\t\t\t\treturn \"hook\";\n+\t\t\tcase Token.COLON:\n+\t\t\t\treturn \"colon\";\n+\t\t\tcase Token.OR:\n+\t\t\t\treturn \"or\";\n+\t\t\tcase Token.AND:\n+\t\t\t\treturn \"and\";\n+\t\t\tcase Token.INC:\n+\t\t\t\treturn \"inc\";\n+\t\t\tcase Token.DEC:\n+\t\t\t\treturn \"dec\";\n+\t\t\tcase Token.DOT:\n+\t\t\t\treturn \"dot\";\n+\t\t\tcase Token.FUNCTION:\n+\t\t\t\treturn \"function\";\n+\t\t\tcase Token.EXPORT:\n+\t\t\t\treturn \"export\";\n+\t\t\tcase Token.IMPORT:\n+\t\t\t\treturn \"import\";\n+\t\t\tcase Token.IF:\n+\t\t\t\treturn \"if\";\n+\t\t\tcase Token.ELSE:\n+\t\t\t\treturn \"else\";\n+\t\t\tcase Token.SWITCH:\n+\t\t\t\treturn \"switch\";\n+\t\t\tcase Token.CASE:\n+\t\t\t\treturn \"case\";\n+\t\t\tcase Token.DEFAULT:\n+\t\t\t\treturn \"default\";\n+\t\t\tcase Token.WHILE:\n+\t\t\t\treturn \"while\";\n+\t\t\tcase Token.DO:\n+\t\t\t\treturn \"do\";\n+\t\t\tcase Token.FOR:\n+\t\t\t\treturn \"for\";\n+\t\t\tcase Token.BREAK:\n+\t\t\t\treturn \"break\";\n+\t\t\tcase Token.CONTINUE:\n+\t\t\t\treturn \"continue\";\n+\t\t\tcase Token.VAR:\n+\t\t\t\treturn \"var\";\n+\t\t\tcase Token.WITH:\n+\t\t\t\treturn \"with\";\n+\t\t\tcase Token.CATCH:\n+\t\t\t\treturn \"catch\";\n+\t\t\tcase Token.FINALLY:\n+\t\t\t\treturn \"finally\";\n+\t\t\tcase Token.RESERVED:\n+\t\t\t\treturn \"reserved\";\n+\t\t\tcase Token.NOT:\n+\t\t\t\treturn \"not\";\n+\t\t\tcase Token.VOID:\n+\t\t\t\treturn \"void\";\n+\t\t\tcase Token.BLOCK:\n+\t\t\t\treturn \"block\";\n+\t\t\tcase Token.ARRAYLIT:\n+\t\t\t\treturn \"arraylit\";\n+\t\t\tcase Token.OBJECTLIT:\n+\t\t\t\treturn \"objectlit\";\n+\t\t\tcase Token.LABEL:\n+\t\t\t\treturn \"label\";\n+\t\t\tcase Token.TARGET:\n+\t\t\t\treturn \"target\";\n+\t\t\tcase Token.LOOP:\n+\t\t\t\treturn \"loop\";\n+\t\t\tcase Token.EXPR_VOID:\n+\t\t\t\treturn \"expr_void\";\n+\t\t\tcase Token.EXPR_RESULT:\n+\t\t\t\treturn \"expr_result\";\n+\t\t\tcase Token.JSR:\n+\t\t\t\treturn \"jsr\";\n+\t\t\tcase Token.SCRIPT:\n+\t\t\t\treturn \"script\";\n+\t\t\tcase Token.EMPTY:\n+\t\t\t\treturn \"empty\";\n+\t\t\tcase Token.GET_REF:\n+\t\t\t\treturn \"get_ref\";\n+\t\t\tcase Token.REF_SPECIAL:\n+\t\t\t\treturn \"ref_special\";\n+\t\t\t}\n+\t\t\treturn \"function\";\n+\t\t}\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1614/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:19.407274230 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 99, 
          "faulty": "addingRoot.addChildrenToFront(helperCode);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 221, 
          "faulty": "call.addChildToBack(argumentNode.cloneTree());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_624/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:21.587935423 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -96,7 +92,6 @@\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n       }\n     }\n@@ -143,8 +138,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -218,7 +212,6 @@\n       call.putBooleanProp(Node.FREE_CALL, true);\n       call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n-        call.addChildToBack(argumentNode.cloneTree());\n       }\n       return call;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Delete", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_560/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:50.251507790 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -143,8 +139,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_560/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:41:50.255507844 -0500\n@@ -1722,7 +1722,7 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        ;\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1323/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:42.613134803 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "InsertBefore", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 99, 
          "faulty": "addingRoot.addChildrenToFront(helperCode);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_606/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:13.459824503 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -96,7 +92,6 @@\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n       }\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_606/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:42:13.463824557 -0500\n@@ -1722,7 +1722,245 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        {\n+\t\t\tswitch (token) {\n+\t\t\tcase Token.ERROR:\n+\t\t\t\treturn \"error\";\n+\t\t\tcase Token.EOF:\n+\t\t\t\treturn \"eof\";\n+\t\t\tcase Token.EOL:\n+\t\t\t\treturn \"eol\";\n+\t\t\tcase Token.ENTERWITH:\n+\t\t\t\treturn \"enterwith\";\n+\t\t\tcase Token.LEAVEWITH:\n+\t\t\t\treturn \"leavewith\";\n+\t\t\tcase Token.RETURN:\n+\t\t\t\treturn \"return\";\n+\t\t\tcase Token.GOTO:\n+\t\t\t\treturn \"goto\";\n+\t\t\tcase Token.IFEQ:\n+\t\t\t\treturn \"ifeq\";\n+\t\t\tcase Token.IFNE:\n+\t\t\t\treturn \"ifne\";\n+\t\t\tcase Token.SETNAME:\n+\t\t\t\treturn \"setname\";\n+\t\t\tcase Token.BITOR:\n+\t\t\t\treturn \"bitor\";\n+\t\t\tcase Token.BITXOR:\n+\t\t\t\treturn \"bitxor\";\n+\t\t\tcase Token.BITAND:\n+\t\t\t\treturn \"bitand\";\n+\t\t\tcase Token.EQ:\n+\t\t\t\treturn \"eq\";\n+\t\t\tcase Token.NE:\n+\t\t\t\treturn \"ne\";\n+\t\t\tcase Token.LT:\n+\t\t\t\treturn \"lt\";\n+\t\t\tcase Token.LE:\n+\t\t\t\treturn \"le\";\n+\t\t\tcase Token.GT:\n+\t\t\t\treturn \"gt\";\n+\t\t\tcase Token.GE:\n+\t\t\t\treturn \"ge\";\n+\t\t\tcase Token.LSH:\n+\t\t\t\treturn \"lsh\";\n+\t\t\tcase Token.RSH:\n+\t\t\t\treturn \"rsh\";\n+\t\t\tcase Token.URSH:\n+\t\t\t\treturn \"ursh\";\n+\t\t\tcase Token.ADD:\n+\t\t\t\treturn \"add\";\n+\t\t\tcase Token.SUB:\n+\t\t\t\treturn \"sub\";\n+\t\t\tcase Token.MUL:\n+\t\t\t\treturn \"mul\";\n+\t\t\tcase Token.DIV:\n+\t\t\t\treturn \"div\";\n+\t\t\tcase Token.MOD:\n+\t\t\t\treturn \"mod\";\n+\t\t\tcase Token.BITNOT:\n+\t\t\t\treturn \"bitnot\";\n+\t\t\tcase Token.NEG:\n+\t\t\t\treturn \"neg\";\n+\t\t\tcase Token.NEW:\n+\t\t\t\treturn \"new\";\n+\t\t\tcase Token.DELPROP:\n+\t\t\t\treturn \"delprop\";\n+\t\t\tcase Token.TYPEOF:\n+\t\t\t\treturn \"typeof\";\n+\t\t\tcase Token.GETPROP:\n+\t\t\t\treturn \"getprop\";\n+\t\t\tcase Token.SETPROP:\n+\t\t\t\treturn \"setprop\";\n+\t\t\tcase Token.GETELEM:\n+\t\t\t\treturn \"getelem\";\n+\t\t\tcase Token.SETELEM:\n+\t\t\t\treturn \"setelem\";\n+\t\t\tcase Token.CALL:\n+\t\t\t\treturn \"call\";\n+\t\t\tcase Token.NAME:\n+\t\t\t\treturn \"name\";\n+\t\t\tcase Token.NUMBER:\n+\t\t\t\treturn \"number\";\n+\t\t\tcase Token.STRING:\n+\t\t\t\treturn \"string\";\n+\t\t\tcase Token.NULL:\n+\t\t\t\treturn \"null\";\n+\t\t\tcase Token.THIS:\n+\t\t\t\treturn \"this\";\n+\t\t\tcase Token.FALSE:\n+\t\t\t\treturn \"false\";\n+\t\t\tcase Token.TRUE:\n+\t\t\t\treturn \"true\";\n+\t\t\tcase Token.SHEQ:\n+\t\t\t\treturn \"sheq\";\n+\t\t\tcase Token.SHNE:\n+\t\t\t\treturn \"shne\";\n+\t\t\tcase Token.REGEXP:\n+\t\t\t\treturn \"regexp\";\n+\t\t\tcase Token.POS:\n+\t\t\t\treturn \"pos\";\n+\t\t\tcase Token.BINDNAME:\n+\t\t\t\treturn \"bindname\";\n+\t\t\tcase Token.THROW:\n+\t\t\t\treturn \"throw\";\n+\t\t\tcase Token.IN:\n+\t\t\t\treturn \"in\";\n+\t\t\tcase Token.INSTANCEOF:\n+\t\t\t\treturn \"instanceof\";\n+\t\t\tcase Token.GETVAR:\n+\t\t\t\treturn \"getvar\";\n+\t\t\tcase Token.SETVAR:\n+\t\t\t\treturn \"setvar\";\n+\t\t\tcase Token.TRY:\n+\t\t\t\treturn \"try\";\n+\t\t\tcase Token.TYPEOFNAME:\n+\t\t\t\treturn \"typeofname\";\n+\t\t\tcase Token.THISFN:\n+\t\t\t\treturn \"thisfn\";\n+\t\t\tcase Token.SEMI:\n+\t\t\t\treturn \"semi\";\n+\t\t\tcase Token.LB:\n+\t\t\t\treturn \"lb\";\n+\t\t\tcase Token.RB:\n+\t\t\t\treturn \"rb\";\n+\t\t\tcase Token.LC:\n+\t\t\t\treturn \"lc\";\n+\t\t\tcase Token.RC:\n+\t\t\t\treturn \"rc\";\n+\t\t\tcase Token.LP:\n+\t\t\t\treturn \"lp\";\n+\t\t\tcase Token.RP:\n+\t\t\t\treturn \"rp\";\n+\t\t\tcase Token.COMMA:\n+\t\t\t\treturn \"comma\";\n+\t\t\tcase Token.ASSIGN:\n+\t\t\t\treturn \"assign\";\n+\t\t\tcase Token.ASSIGN_BITOR:\n+\t\t\t\treturn \"assign_bitor\";\n+\t\t\tcase Token.ASSIGN_BITXOR:\n+\t\t\t\treturn \"assign_bitxor\";\n+\t\t\tcase Token.ASSIGN_BITAND:\n+\t\t\t\treturn \"assign_bitand\";\n+\t\t\tcase Token.ASSIGN_LSH:\n+\t\t\t\treturn \"assign_lsh\";\n+\t\t\tcase Token.ASSIGN_RSH:\n+\t\t\t\treturn \"assign_rsh\";\n+\t\t\tcase Token.ASSIGN_URSH:\n+\t\t\t\treturn \"assign_ursh\";\n+\t\t\tcase Token.ASSIGN_ADD:\n+\t\t\t\treturn \"assign_add\";\n+\t\t\tcase Token.ASSIGN_SUB:\n+\t\t\t\treturn \"assign_sub\";\n+\t\t\tcase Token.ASSIGN_MUL:\n+\t\t\t\treturn \"assign_mul\";\n+\t\t\tcase Token.ASSIGN_DIV:\n+\t\t\t\treturn \"assign_div\";\n+\t\t\tcase Token.ASSIGN_MOD:\n+\t\t\t\treturn \"assign_mod\";\n+\t\t\tcase Token.HOOK:\n+\t\t\t\treturn \"hook\";\n+\t\t\tcase Token.COLON:\n+\t\t\t\treturn \"colon\";\n+\t\t\tcase Token.OR:\n+\t\t\t\treturn \"or\";\n+\t\t\tcase Token.AND:\n+\t\t\t\treturn \"and\";\n+\t\t\tcase Token.INC:\n+\t\t\t\treturn \"inc\";\n+\t\t\tcase Token.DEC:\n+\t\t\t\treturn \"dec\";\n+\t\t\tcase Token.DOT:\n+\t\t\t\treturn \"dot\";\n+\t\t\tcase Token.FUNCTION:\n+\t\t\t\treturn \"function\";\n+\t\t\tcase Token.EXPORT:\n+\t\t\t\treturn \"export\";\n+\t\t\tcase Token.IMPORT:\n+\t\t\t\treturn \"import\";\n+\t\t\tcase Token.IF:\n+\t\t\t\treturn \"if\";\n+\t\t\tcase Token.ELSE:\n+\t\t\t\treturn \"else\";\n+\t\t\tcase Token.SWITCH:\n+\t\t\t\treturn \"switch\";\n+\t\t\tcase Token.CASE:\n+\t\t\t\treturn \"case\";\n+\t\t\tcase Token.DEFAULT:\n+\t\t\t\treturn \"default\";\n+\t\t\tcase Token.WHILE:\n+\t\t\t\treturn \"while\";\n+\t\t\tcase Token.DO:\n+\t\t\t\treturn \"do\";\n+\t\t\tcase Token.FOR:\n+\t\t\t\treturn \"for\";\n+\t\t\tcase Token.BREAK:\n+\t\t\t\treturn \"break\";\n+\t\t\tcase Token.CONTINUE:\n+\t\t\t\treturn \"continue\";\n+\t\t\tcase Token.VAR:\n+\t\t\t\treturn \"var\";\n+\t\t\tcase Token.WITH:\n+\t\t\t\treturn \"with\";\n+\t\t\tcase Token.CATCH:\n+\t\t\t\treturn \"catch\";\n+\t\t\tcase Token.FINALLY:\n+\t\t\t\treturn \"finally\";\n+\t\t\tcase Token.RESERVED:\n+\t\t\t\treturn \"reserved\";\n+\t\t\tcase Token.NOT:\n+\t\t\t\treturn \"not\";\n+\t\t\tcase Token.VOID:\n+\t\t\t\treturn \"void\";\n+\t\t\tcase Token.BLOCK:\n+\t\t\t\treturn \"block\";\n+\t\t\tcase Token.ARRAYLIT:\n+\t\t\t\treturn \"arraylit\";\n+\t\t\tcase Token.OBJECTLIT:\n+\t\t\t\treturn \"objectlit\";\n+\t\t\tcase Token.LABEL:\n+\t\t\t\treturn \"label\";\n+\t\t\tcase Token.TARGET:\n+\t\t\t\treturn \"target\";\n+\t\t\tcase Token.LOOP:\n+\t\t\t\treturn \"loop\";\n+\t\t\tcase Token.EXPR_VOID:\n+\t\t\t\treturn \"expr_void\";\n+\t\t\tcase Token.EXPR_RESULT:\n+\t\t\t\treturn \"expr_result\";\n+\t\t\tcase Token.JSR:\n+\t\t\t\treturn \"jsr\";\n+\t\t\tcase Token.SCRIPT:\n+\t\t\t\treturn \"script\";\n+\t\t\tcase Token.EMPTY:\n+\t\t\t\treturn \"empty\";\n+\t\t\tcase Token.GET_REF:\n+\t\t\t\treturn \"get_ref\";\n+\t\t\tcase Token.REF_SPECIAL:\n+\t\t\t\treturn \"ref_special\";\n+\t\t\t}\n+\t\t\treturn \"function\";\n+\t\t}\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "InsertBefore", 
          "seed": "switch (token) {\ncase Token.ERROR:\n  return \"error\";\ncase Token.EOF:\nreturn \"eof\";\ncase Token.EOL:\nreturn \"eol\";\ncase Token.ENTERWITH:\nreturn \"enterwith\";\ncase Token.LEAVEWITH:\nreturn \"leavewith\";\ncase Token.RETURN:\nreturn \"return\";\ncase Token.GOTO:\nreturn \"goto\";\ncase Token.IFEQ:\nreturn \"ifeq\";\ncase Token.IFNE:\nreturn \"ifne\";\ncase Token.SETNAME:\nreturn \"setname\";\ncase Token.BITOR:\nreturn \"bitor\";\ncase Token.BITXOR:\nreturn \"bitxor\";\ncase Token.BITAND:\nreturn \"bitand\";\ncase Token.EQ:\nreturn \"eq\";\ncase Token.NE:\nreturn \"ne\";\ncase Token.LT:\nreturn \"lt\";\ncase Token.LE:\nreturn \"le\";\ncase Token.GT:\nreturn \"gt\";\ncase Token.GE:\nreturn \"ge\";\ncase Token.LSH:\nreturn \"lsh\";\ncase Token.RSH:\nreturn \"rsh\";\ncase Token.URSH:\nreturn \"ursh\";\ncase Token.ADD:\nreturn \"add\";\ncase Token.SUB:\nreturn \"sub\";\ncase Token.MUL:\nreturn \"mul\";\ncase Token.DIV:\nreturn \"div\";\ncase Token.MOD:\nreturn \"mod\";\ncase Token.BITNOT:\nreturn \"bitnot\";\ncase Token.NEG:\nreturn \"neg\";\ncase Token.NEW:\nreturn \"new\";\ncase Token.DELPROP:\nreturn \"delprop\";\ncase Token.TYPEOF:\nreturn \"typeof\";\ncase Token.GETPROP:\nreturn \"getprop\";\ncase Token.SETPROP:\nreturn \"setprop\";\ncase Token.GETELEM:\nreturn \"getelem\";\ncase Token.SETELEM:\nreturn \"setelem\";\ncase Token.CALL:\nreturn \"call\";\ncase Token.NAME:\nreturn \"name\";\ncase Token.NUMBER:\nreturn \"number\";\ncase Token.STRING:\nreturn \"string\";\ncase Token.NULL:\nreturn \"null\";\ncase Token.THIS:\nreturn \"this\";\ncase Token.FALSE:\nreturn \"false\";\ncase Token.TRUE:\nreturn \"true\";\ncase Token.SHEQ:\nreturn \"sheq\";\ncase Token.SHNE:\nreturn \"shne\";\ncase Token.REGEXP:\nreturn \"regexp\";\ncase Token.POS:\nreturn \"pos\";\ncase Token.BINDNAME:\nreturn \"bindname\";\ncase Token.THROW:\nreturn \"throw\";\ncase Token.IN:\nreturn \"in\";\ncase Token.INSTANCEOF:\nreturn \"instanceof\";\ncase Token.GETVAR:\nreturn \"getvar\";\ncase Token.SETVAR:\nreturn \"setvar\";\ncase Token.TRY:\nreturn \"try\";\ncase Token.TYPEOFNAME:\nreturn \"typeofname\";\ncase Token.THISFN:\nreturn \"thisfn\";\ncase Token.SEMI:\nreturn \"semi\";\ncase Token.LB:\nreturn \"lb\";\ncase Token.RB:\nreturn \"rb\";\ncase Token.LC:\nreturn \"lc\";\ncase Token.RC:\nreturn \"rc\";\ncase Token.LP:\nreturn \"lp\";\ncase Token.RP:\nreturn \"rp\";\ncase Token.COMMA:\nreturn \"comma\";\ncase Token.ASSIGN:\nreturn \"assign\";\ncase Token.ASSIGN_BITOR:\nreturn \"assign_bitor\";\ncase Token.ASSIGN_BITXOR:\nreturn \"assign_bitxor\";\ncase Token.ASSIGN_BITAND:\nreturn \"assign_bitand\";\ncase Token.ASSIGN_LSH:\nreturn \"assign_lsh\";\ncase Token.ASSIGN_RSH:\nreturn \"assign_rsh\";\ncase Token.ASSIGN_URSH:\nreturn \"assign_ursh\";\ncase Token.ASSIGN_ADD:\nreturn \"assign_add\";\ncase Token.ASSIGN_SUB:\nreturn \"assign_sub\";\ncase Token.ASSIGN_MUL:\nreturn \"assign_mul\";\ncase Token.ASSIGN_DIV:\nreturn \"assign_div\";\ncase Token.ASSIGN_MOD:\nreturn \"assign_mod\";\ncase Token.HOOK:\nreturn \"hook\";\ncase Token.COLON:\nreturn \"colon\";\ncase Token.OR:\nreturn \"or\";\ncase Token.AND:\nreturn \"and\";\ncase Token.INC:\nreturn \"inc\";\ncase Token.DEC:\nreturn \"dec\";\ncase Token.DOT:\nreturn \"dot\";\ncase Token.FUNCTION:\nreturn \"function\";\ncase Token.EXPORT:\nreturn \"export\";\ncase Token.IMPORT:\nreturn \"import\";\ncase Token.IF:\nreturn \"if\";\ncase Token.ELSE:\nreturn \"else\";\ncase Token.SWITCH:\nreturn \"switch\";\ncase Token.CASE:\nreturn \"case\";\ncase Token.DEFAULT:\nreturn \"default\";\ncase Token.WHILE:\nreturn \"while\";\ncase Token.DO:\nreturn \"do\";\ncase Token.FOR:\nreturn \"for\";\ncase Token.BREAK:\nreturn \"break\";\ncase Token.CONTINUE:\nreturn \"continue\";\ncase Token.VAR:\nreturn \"var\";\ncase Token.WITH:\nreturn \"with\";\ncase Token.CATCH:\nreturn \"catch\";\ncase Token.FINALLY:\nreturn \"finally\";\ncase Token.RESERVED:\nreturn \"reserved\";\ncase Token.NOT:\nreturn \"not\";\ncase Token.VOID:\nreturn \"void\";\ncase Token.BLOCK:\nreturn \"block\";\ncase Token.ARRAYLIT:\nreturn \"arraylit\";\ncase Token.OBJECTLIT:\nreturn \"objectlit\";\ncase Token.LABEL:\nreturn \"label\";\ncase Token.TARGET:\nreturn \"target\";\ncase Token.LOOP:\nreturn \"loop\";\ncase Token.EXPR_VOID:\nreturn \"expr_void\";\ncase Token.EXPR_RESULT:\nreturn \"expr_result\";\ncase Token.JSR:\nreturn \"jsr\";\ncase Token.SCRIPT:\nreturn \"script\";\ncase Token.EMPTY:\nreturn \"empty\";\ncase Token.GET_REF:\nreturn \"get_ref\";\ncase Token.REF_SPECIAL:\nreturn \"ref_special\";\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1677, 
          "faulty": "return \"call\";", 
          "type": "InsertBefore", 
          "seed": "Kit.codeBug();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1612/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:18.727264953 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1612/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:51:18.727264953 -0500\n@@ -1674,7 +1674,10 @@\n       case Token.SETPROP:         return \"setprop\";\n       case Token.GETELEM:         return \"getelem\";\n       case Token.SETELEM:         return \"setelem\";\n-      case Token.CALL:            return \"call\";\n+      case Token.CALL:            {\n+\t\t\tKit.codeBug();\n+\t\t\treturn \"call\";\n+\t\t}\n       case Token.NAME:            return \"name\";\n       case Token.NUMBER:          return \"number\";\n       case Token.STRING:          return \"string\";\n@@ -1722,7 +1725,245 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        {\n+\t\t\tswitch (token) {\n+\t\t\tcase Token.ERROR:\n+\t\t\t\treturn \"error\";\n+\t\t\tcase Token.EOF:\n+\t\t\t\treturn \"eof\";\n+\t\t\tcase Token.EOL:\n+\t\t\t\treturn \"eol\";\n+\t\t\tcase Token.ENTERWITH:\n+\t\t\t\treturn \"enterwith\";\n+\t\t\tcase Token.LEAVEWITH:\n+\t\t\t\treturn \"leavewith\";\n+\t\t\tcase Token.RETURN:\n+\t\t\t\treturn \"return\";\n+\t\t\tcase Token.GOTO:\n+\t\t\t\treturn \"goto\";\n+\t\t\tcase Token.IFEQ:\n+\t\t\t\treturn \"ifeq\";\n+\t\t\tcase Token.IFNE:\n+\t\t\t\treturn \"ifne\";\n+\t\t\tcase Token.SETNAME:\n+\t\t\t\treturn \"setname\";\n+\t\t\tcase Token.BITOR:\n+\t\t\t\treturn \"bitor\";\n+\t\t\tcase Token.BITXOR:\n+\t\t\t\treturn \"bitxor\";\n+\t\t\tcase Token.BITAND:\n+\t\t\t\treturn \"bitand\";\n+\t\t\tcase Token.EQ:\n+\t\t\t\treturn \"eq\";\n+\t\t\tcase Token.NE:\n+\t\t\t\treturn \"ne\";\n+\t\t\tcase Token.LT:\n+\t\t\t\treturn \"lt\";\n+\t\t\tcase Token.LE:\n+\t\t\t\treturn \"le\";\n+\t\t\tcase Token.GT:\n+\t\t\t\treturn \"gt\";\n+\t\t\tcase Token.GE:\n+\t\t\t\treturn \"ge\";\n+\t\t\tcase Token.LSH:\n+\t\t\t\treturn \"lsh\";\n+\t\t\tcase Token.RSH:\n+\t\t\t\treturn \"rsh\";\n+\t\t\tcase Token.URSH:\n+\t\t\t\treturn \"ursh\";\n+\t\t\tcase Token.ADD:\n+\t\t\t\treturn \"add\";\n+\t\t\tcase Token.SUB:\n+\t\t\t\treturn \"sub\";\n+\t\t\tcase Token.MUL:\n+\t\t\t\treturn \"mul\";\n+\t\t\tcase Token.DIV:\n+\t\t\t\treturn \"div\";\n+\t\t\tcase Token.MOD:\n+\t\t\t\treturn \"mod\";\n+\t\t\tcase Token.BITNOT:\n+\t\t\t\treturn \"bitnot\";\n+\t\t\tcase Token.NEG:\n+\t\t\t\treturn \"neg\";\n+\t\t\tcase Token.NEW:\n+\t\t\t\treturn \"new\";\n+\t\t\tcase Token.DELPROP:\n+\t\t\t\treturn \"delprop\";\n+\t\t\tcase Token.TYPEOF:\n+\t\t\t\treturn \"typeof\";\n+\t\t\tcase Token.GETPROP:\n+\t\t\t\treturn \"getprop\";\n+\t\t\tcase Token.SETPROP:\n+\t\t\t\treturn \"setprop\";\n+\t\t\tcase Token.GETELEM:\n+\t\t\t\treturn \"getelem\";\n+\t\t\tcase Token.SETELEM:\n+\t\t\t\treturn \"setelem\";\n+\t\t\tcase Token.CALL:\n+\t\t\t\treturn \"call\";\n+\t\t\tcase Token.NAME:\n+\t\t\t\treturn \"name\";\n+\t\t\tcase Token.NUMBER:\n+\t\t\t\treturn \"number\";\n+\t\t\tcase Token.STRING:\n+\t\t\t\treturn \"string\";\n+\t\t\tcase Token.NULL:\n+\t\t\t\treturn \"null\";\n+\t\t\tcase Token.THIS:\n+\t\t\t\treturn \"this\";\n+\t\t\tcase Token.FALSE:\n+\t\t\t\treturn \"false\";\n+\t\t\tcase Token.TRUE:\n+\t\t\t\treturn \"true\";\n+\t\t\tcase Token.SHEQ:\n+\t\t\t\treturn \"sheq\";\n+\t\t\tcase Token.SHNE:\n+\t\t\t\treturn \"shne\";\n+\t\t\tcase Token.REGEXP:\n+\t\t\t\treturn \"regexp\";\n+\t\t\tcase Token.POS:\n+\t\t\t\treturn \"pos\";\n+\t\t\tcase Token.BINDNAME:\n+\t\t\t\treturn \"bindname\";\n+\t\t\tcase Token.THROW:\n+\t\t\t\treturn \"throw\";\n+\t\t\tcase Token.IN:\n+\t\t\t\treturn \"in\";\n+\t\t\tcase Token.INSTANCEOF:\n+\t\t\t\treturn \"instanceof\";\n+\t\t\tcase Token.GETVAR:\n+\t\t\t\treturn \"getvar\";\n+\t\t\tcase Token.SETVAR:\n+\t\t\t\treturn \"setvar\";\n+\t\t\tcase Token.TRY:\n+\t\t\t\treturn \"try\";\n+\t\t\tcase Token.TYPEOFNAME:\n+\t\t\t\treturn \"typeofname\";\n+\t\t\tcase Token.THISFN:\n+\t\t\t\treturn \"thisfn\";\n+\t\t\tcase Token.SEMI:\n+\t\t\t\treturn \"semi\";\n+\t\t\tcase Token.LB:\n+\t\t\t\treturn \"lb\";\n+\t\t\tcase Token.RB:\n+\t\t\t\treturn \"rb\";\n+\t\t\tcase Token.LC:\n+\t\t\t\treturn \"lc\";\n+\t\t\tcase Token.RC:\n+\t\t\t\treturn \"rc\";\n+\t\t\tcase Token.LP:\n+\t\t\t\treturn \"lp\";\n+\t\t\tcase Token.RP:\n+\t\t\t\treturn \"rp\";\n+\t\t\tcase Token.COMMA:\n+\t\t\t\treturn \"comma\";\n+\t\t\tcase Token.ASSIGN:\n+\t\t\t\treturn \"assign\";\n+\t\t\tcase Token.ASSIGN_BITOR:\n+\t\t\t\treturn \"assign_bitor\";\n+\t\t\tcase Token.ASSIGN_BITXOR:\n+\t\t\t\treturn \"assign_bitxor\";\n+\t\t\tcase Token.ASSIGN_BITAND:\n+\t\t\t\treturn \"assign_bitand\";\n+\t\t\tcase Token.ASSIGN_LSH:\n+\t\t\t\treturn \"assign_lsh\";\n+\t\t\tcase Token.ASSIGN_RSH:\n+\t\t\t\treturn \"assign_rsh\";\n+\t\t\tcase Token.ASSIGN_URSH:\n+\t\t\t\treturn \"assign_ursh\";\n+\t\t\tcase Token.ASSIGN_ADD:\n+\t\t\t\treturn \"assign_add\";\n+\t\t\tcase Token.ASSIGN_SUB:\n+\t\t\t\treturn \"assign_sub\";\n+\t\t\tcase Token.ASSIGN_MUL:\n+\t\t\t\treturn \"assign_mul\";\n+\t\t\tcase Token.ASSIGN_DIV:\n+\t\t\t\treturn \"assign_div\";\n+\t\t\tcase Token.ASSIGN_MOD:\n+\t\t\t\treturn \"assign_mod\";\n+\t\t\tcase Token.HOOK:\n+\t\t\t\treturn \"hook\";\n+\t\t\tcase Token.COLON:\n+\t\t\t\treturn \"colon\";\n+\t\t\tcase Token.OR:\n+\t\t\t\treturn \"or\";\n+\t\t\tcase Token.AND:\n+\t\t\t\treturn \"and\";\n+\t\t\tcase Token.INC:\n+\t\t\t\treturn \"inc\";\n+\t\t\tcase Token.DEC:\n+\t\t\t\treturn \"dec\";\n+\t\t\tcase Token.DOT:\n+\t\t\t\treturn \"dot\";\n+\t\t\tcase Token.FUNCTION:\n+\t\t\t\treturn \"function\";\n+\t\t\tcase Token.EXPORT:\n+\t\t\t\treturn \"export\";\n+\t\t\tcase Token.IMPORT:\n+\t\t\t\treturn \"import\";\n+\t\t\tcase Token.IF:\n+\t\t\t\treturn \"if\";\n+\t\t\tcase Token.ELSE:\n+\t\t\t\treturn \"else\";\n+\t\t\tcase Token.SWITCH:\n+\t\t\t\treturn \"switch\";\n+\t\t\tcase Token.CASE:\n+\t\t\t\treturn \"case\";\n+\t\t\tcase Token.DEFAULT:\n+\t\t\t\treturn \"default\";\n+\t\t\tcase Token.WHILE:\n+\t\t\t\treturn \"while\";\n+\t\t\tcase Token.DO:\n+\t\t\t\treturn \"do\";\n+\t\t\tcase Token.FOR:\n+\t\t\t\treturn \"for\";\n+\t\t\tcase Token.BREAK:\n+\t\t\t\treturn \"break\";\n+\t\t\tcase Token.CONTINUE:\n+\t\t\t\treturn \"continue\";\n+\t\t\tcase Token.VAR:\n+\t\t\t\treturn \"var\";\n+\t\t\tcase Token.WITH:\n+\t\t\t\treturn \"with\";\n+\t\t\tcase Token.CATCH:\n+\t\t\t\treturn \"catch\";\n+\t\t\tcase Token.FINALLY:\n+\t\t\t\treturn \"finally\";\n+\t\t\tcase Token.RESERVED:\n+\t\t\t\treturn \"reserved\";\n+\t\t\tcase Token.NOT:\n+\t\t\t\treturn \"not\";\n+\t\t\tcase Token.VOID:\n+\t\t\t\treturn \"void\";\n+\t\t\tcase Token.BLOCK:\n+\t\t\t\treturn \"block\";\n+\t\t\tcase Token.ARRAYLIT:\n+\t\t\t\treturn \"arraylit\";\n+\t\t\tcase Token.OBJECTLIT:\n+\t\t\t\treturn \"objectlit\";\n+\t\t\tcase Token.LABEL:\n+\t\t\t\treturn \"label\";\n+\t\t\tcase Token.TARGET:\n+\t\t\t\treturn \"target\";\n+\t\t\tcase Token.LOOP:\n+\t\t\t\treturn \"loop\";\n+\t\t\tcase Token.EXPR_VOID:\n+\t\t\t\treturn \"expr_void\";\n+\t\t\tcase Token.EXPR_RESULT:\n+\t\t\t\treturn \"expr_result\";\n+\t\t\tcase Token.JSR:\n+\t\t\t\treturn \"jsr\";\n+\t\t\tcase Token.SCRIPT:\n+\t\t\t\treturn \"script\";\n+\t\t\tcase Token.EMPTY:\n+\t\t\t\treturn \"empty\";\n+\t\t\tcase Token.GET_REF:\n+\t\t\t\treturn \"get_ref\";\n+\t\t\tcase Token.REF_SPECIAL:\n+\t\t\t\treturn \"ref_special\";\n+\t\t\t}\n+\t\t\treturn \"function\";\n+\t\t}\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 93, 
          "faulty": "if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n  for (  Reduction reduction : reductions) {\n    reduction.apply();\n  }\n  Node addingRoot=compiler.getNodeForCodeInsertion(null);\n  addingRoot.addChildrenToFront(helperCode);\n  compiler.reportCodeChange();\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1271/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:13.328735213 -0500\n@@ -84,21 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n-      // Compare estimated savings against the helper cost.  Apply\n-      // reductions if doing so will result in some savings.\n-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n-        for (Reduction reduction : reductions) {\n-          reduction.apply();\n-        }\n-\n-        Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n-      }\n     }\n   }\n \n@@ -136,7 +121,6 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_83/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:44.508154116 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -110,7 +106,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 100, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1298/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:28.400940876 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -97,7 +93,6 @@\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n         addingRoot.addChildrenToFront(helperCode);\n-        compiler.reportCodeChange();\n       }\n     }\n   }\n@@ -448,7 +443,6 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 95, 
          "faulty": "reduction.apply();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1725, 
          "faulty": "return \"function\";", 
          "type": "Replace", 
          "seed": "if (!(0 <= token && token <= Token.LAST_TOKEN)) throw new IllegalArgumentException();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 88, 
          "faulty": "savings+=reduction.estimateSavings();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1419/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:31.965808221 -0500\n@@ -84,15 +84,10 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n         for (Reduction reduction : reductions) {\n-          reduction.apply();\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1419/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:49:31.965808221 -0500\n@@ -1722,7 +1722,8 @@\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n       case Token.DOT:             return \"dot\";\n-      case Token.FUNCTION:        return \"function\";\n+      case Token.FUNCTION:        if (!(0 <= token && token <= Token.LAST_TOKEN))\n+\t\t\tthrow new IllegalArgumentException();\n       case Token.EXPORT:          return \"export\";\n       case Token.IMPORT:          return \"import\";\n       case Token.IF:              return \"if\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 451, 
          "faulty": "return value.getLastChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_959/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:19.110357917 -0500\n@@ -448,7 +448,7 @@\n       if (value != null &&\n           NodeUtil.isGetProp(value) &&\n           NodeUtil.isThis(value.getFirstChild())) {\n-        return value.getLastChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_519/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:41:30.523238566 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 99, 
          "faulty": "addingRoot.addChildrenToFront(helperCode);", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 113, 
          "faulty": "return (root != null) ? root.removeFirstChild() : null;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_308/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:40.037730785 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -96,7 +92,6 @@\n         }\n \n         Node addingRoot = compiler.getNodeForCodeInsertion(null);\n-        addingRoot.addChildrenToFront(helperCode);\n         compiler.reportCodeChange();\n       }\n     }\n@@ -110,7 +105,7 @@\n   public Node parseHelperCode(Reducer reducer) {\n     Node root = compiler.parseSyntheticCode(\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n-    return (root != null) ? root.removeFirstChild() : null;\n+    return null;\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1277/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:48:16.404777187 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_880/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:36.893781835 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_829/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:44:08.581395483 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_943/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:11.514254263 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_166/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:23.708689104 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -274,7 +270,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_4/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:03.687597012 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_611/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:42:15.335850104 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_65/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:37:36.904050338 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 219, 
          "faulty": "call.addChildToBack(Node.newString(Token.NAME,methodName));", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_261/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:14.869387309 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -216,7 +212,6 @@\n                                        int lineno, int charno) {\n       Node call = new Node(Token.CALL, lineno, charno);\n       call.putBooleanProp(Node.FREE_CALL, true);\n-      call.addChildToBack(Node.newString(Token.NAME, methodName));\n       if (argumentNode != null) {\n         call.addChildToBack(argumentNode.cloneTree());\n       }\n@@ -274,7 +269,7 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n+        return null;\n       }\n       return null;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1500/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:50:17.426428524 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1412/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:49:28.865765921 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -424,11 +420,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 251, 
          "faulty": "return buildCallNode(FACTORY_METHOD_NAME,null,node.getLineno(),node.getCharno());", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_160/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:21.280655967 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -248,8 +244,7 @@\n     @Override\n     public Node reduce(Node node) {\n       if (NodeUtil.isEmptyFunctionExpression(node)) {\n-        return buildCallNode(FACTORY_METHOD_NAME, null,\n-                             node.getLineno(), node.getCharno());\n+        return null;\n       } else {\n         return node;\n       }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1024/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:54.762844422 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_954/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:45:16.550322983 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 139, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_1581/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:51:00.603017655 -0500\n@@ -136,15 +136,13 @@\n      */\n     void apply() {\n       parent.replaceChild(oldChild, newChild);\n-      compiler.reportCodeChange();\n     }\n \n     /**\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 244, 
          "faulty": "return \"free_call\";", 
          "type": "Replace", 
          "seed": "return \"ENTERWITH\";"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_755/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:43:29.992868900 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:32:00.879464183 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_755/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:43:29.996868954 -0500\n@@ -241,7 +241,7 @@\n         case IS_DISPATCHER:      return \"is_dispatcher\";\n         case DIRECTIVES:         return \"directives\";\n         case DIRECT_EVAL:        return \"direct_eval\";\n-        case FREE_CALL:          return \"free_call\";\n+        case FREE_CALL:          return \"ENTERWITH\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 138, 
          "faulty": "parent.replaceChild(oldChild,newChild);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 87, 
          "faulty": "for (Reduction reduction : reductions) {\n  savings+=reduction.estimateSavings();\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 146, 
          "faulty": "return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild);", 
          "type": "Replace", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 427, 
          "faulty": "if (propName.getType() != Token.STRING) {\n  throw new IllegalStateException(\"Expected STRING, got \" + Token.name(propName.getType()));\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_302/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:39:37.533696612 -0500\n@@ -84,10 +84,6 @@\n \n       // Estimate savings\n       int savings = 0;\n-      for (Reduction reduction : reductions) {\n-        savings += reduction.estimateSavings();\n-      }\n-\n       // Compare estimated savings against the helper cost.  Apply\n       // reductions if doing so will result in some savings.\n       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {\n@@ -135,7 +131,6 @@\n      * Apply the reduction by replacing the old child with the new child.\n      */\n     void apply() {\n-      parent.replaceChild(oldChild, newChild);\n       compiler.reportCodeChange();\n     }\n \n@@ -143,8 +138,7 @@\n      * Estimate number of bytes saved by applying this reduction.\n      */\n     int estimateSavings() {\n-      return InlineCostEstimator.getCost(oldChild) -\n-          InlineCostEstimator.getCost(newChild);\n+      return 0;\n     }\n   }\n \n@@ -424,11 +418,6 @@\n \n       Node propName = getGetPropertyName(node);\n       if (propName != null) {\n-        if (propName.getType() != Token.STRING) {\n-          throw new IllegalStateException(\n-              \"Expected STRING, got \" + Token.name(propName.getType()));\n-        }\n-\n         return buildCallNode(FACTORY_METHOD_NAME, propName,\n                              node.getLineno(), node.getCharno());\n       } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/AstValidator.java", 
          "line": 768, 
          "faulty": "violation(\"Expected \" + Node.tokenToName(type) + \" but was \"+ Node.tokenToName(n.getType()),n);", 
          "type": "InsertBefore", 
          "seed": "validateMaximumChildCount(n,1);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/FunctionRewriter.java", 
          "line": 277, 
          "faulty": "return statement.getFirstChild();", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:32:02.543486895 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_139/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2018-12-01 09:38:10.988515506 -0500\n@@ -274,7 +274,6 @@\n \n       Node statement = body.getFirstChild();\n       if (statement.getType() == Token.RETURN) {\n-        return statement.getFirstChild();\n       }\n       return null;\n     }\n\n\n--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:32:00.831463528 -0500\n+++ /tmp/Arja_Defects4J_Closure_55/patches_hugy/Patch_139/patched/tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/AstValidator.java\t2018-12-01 09:38:10.988515506 -0500\n@@ -765,7 +765,8 @@\n \n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n-      violation(\n+      validateMaximumChildCount(n, 1);\n+\tviolation(\n           \"Expected \" + Node.tokenToName(type) + \" but was \"\n               + Node.tokenToName(n.getType()), n);\n     }\n\n\n"
    }
  ]
}