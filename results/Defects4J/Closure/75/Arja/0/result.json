{
  "repair_end": "2018-12-01 15:45:53.070448", 
  "repair_begin": "2018-12-01 15:23:41.083885", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_635/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:35:06.527507276 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_635/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:06.527507276 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1363/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:43.654073563 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1006/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:58.488819179 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1003/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:38:57.264812543 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1003/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:57.268812564 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1264/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:36.581694249 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -370,23 +370,7 @@\n    * Copied from Rhino's ScriptRuntime\n    */\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n-    switch (c) {\n-      case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n-      case ' ': // <SP>\n-      case '\\n': // <LF>\n-      case '\\r': // <CR>\n-      case '\\t': // <TAB>\n-      case '\\u00A0': // <NBSP>\n-      case '\\u000C': // <FF>\n-      case '\\u2028': // <LS>\n-      case '\\u2029': // <PS>\n-      case '\\uFEFF': // <BOM>\n-        return TernaryValue.TRUE;\n-      default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n-    }\n+    return null;\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 373, 
          "faulty": "switch (c) {\ncase '\\u000B':\n  return TernaryValue.TRUE;\ncase ' ':\ncase '\\n':\ncase '\\r':\ncase '\\t':\ncase '\\u00A0':\ncase '\\u000C':\ncase '\\u2028':\ncase '\\u2029':\ncase '\\uFEFF':\nreturn TernaryValue.TRUE;\ndefault :\nreturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1011/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:01.048833067 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_401/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:53.898778330 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_401/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:53.898778330 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_829/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:37:06.744188048 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_829/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:06.744188048 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1325/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:18.113928697 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1100/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:39:46.553081701 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1100/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:46.553081701 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1220/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:41:09.973544877 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1220/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:09.977544899 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1497/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:01.370517073 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_541/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:34:11.543201588 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      sb.setLength(0);\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_541/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:11.543201588 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_541/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:11.543201588 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1016/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:39:03.052843946 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1016/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:03.056843968 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_861/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:37:24.664290659 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      sourcePosition = -1;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n@@ -1410,7 +1411,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_861/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:24.668290682 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1135/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:09.645209044 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1424/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:43:16.622261247 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1424/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:16.622261247 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1384/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:55.274139631 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_420/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:03.390829455 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1627/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:45:37.839071973 -0500\n@@ -356,7 +356,7 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n+          return null;\n         }\n         return n;\n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1627/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:37.839071973 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_552/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:34:20.119248977 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_552/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:20.119248977 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_854/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:21.000269659 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_593/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:42.359372386 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -361,7 +361,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      start = end + 1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "start=end + 1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_453/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:20.194920414 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1032/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:39:11.692890930 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1032/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:11.692890930 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_491/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:33:42.599042527 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_491/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:42.603042549 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -337,16 +326,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1604/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:23.014986448 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_647/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:35:12.107538527 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      sb.setLength(0);\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_647/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:12.107538527 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_129/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:30:21.849980405 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_595/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:34:42.971375792 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      sb.setLength(0);\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_595/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:42.971375792 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1457/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:43:37.546380726 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ENTERWITH\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1457/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:37.546380726 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ENTERWITH\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_96/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:30:02.837870571 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1316/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:13.125900463 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -363,7 +363,7 @@\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n       start++;\n     }\n-    return s.substring(start, end);\n+    return null;\n   }\n \n   /**\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        return null;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 366, 
          "faulty": "return s.substring(start,end);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_605/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:47.859403014 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_605/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:47.859403014 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1276/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:41:42.665728499 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1276/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:42.665728499 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1634/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:40.915089729 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_995/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:53.436791805 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1393/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:42:59.554163990 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1393/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:59.554163990 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_880/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:35.324351813 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1499/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:44:02.166521634 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1499/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:02.166521634 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_298/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:03.530510444 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_298/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:32:03.534510465 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_298/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:03.534510465 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_796/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:36:45.420066279 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1152,10 +1148,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_796/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:45.424066303 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1115/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:59.145151051 -0500\n@@ -1410,7 +1410,9 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1115/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:59.149151072 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_894/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:44.168402611 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_194/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:31:00.078182570 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      sourcePosition = -1;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_194/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:00.078182570 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_785/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:39.160030605 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_785/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:39.160030605 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1155/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:40:21.365273947 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Kit.codeBug();\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1155/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:21.369273969 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_835/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:09.960206445 -0500\n@@ -329,24 +329,8 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_473/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:33:29.178969270 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toStringTreeImpl();\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_473/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:29.182969292 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1506/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:44:05.502540752 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1506/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:05.502540752 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_716/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:55.339781908 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1606/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:45:24.330994037 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1606/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:24.334994060 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_240/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:28.946330260 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_240/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:28.946330260 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_547/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:34:15.235221975 -0500\n@@ -1142,20 +1142,5 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_547/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:15.239221996 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1461/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:39.706393075 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_868/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:37:27.396306324 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_868/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:27.396306324 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_466/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:25.798950872 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1125/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:04.089178338 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_378/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:41.510711898 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_378/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:41.510711898 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1071/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:32.145002628 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,7 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        return null;\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_602/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:46.651396283 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1429/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:19.302276535 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_500/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:33:46.439063548 -0500\n@@ -355,8 +355,7 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n+          return null;\n         }\n         return n;\n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_500/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:46.439063548 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_443/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:33:14.902891708 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      sb.setLength(0);\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_443/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:14.902891708 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1233/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:41:16.509581504 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1233/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:16.509581504 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_78/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:29:52.217809384 -0500\n@@ -355,7 +355,6 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n           return left;\n         }\n         return n;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_78/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:29:52.221809407 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -384,8 +384,7 @@\n       case '\\uFEFF': // <BOM>\n         return TernaryValue.TRUE;\n       default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n+        return null;\n     }\n   }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 387, 
          "faulty": "return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_493/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:43.199045810 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1112/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:39:57.769143462 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1112/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:57.773143484 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_782/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:36:37.860023201 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_782/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:37.860023201 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1306/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:06.053860467 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1024/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:08.080871273 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toStringTreeImpl();\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1024/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:39:08.080871273 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1024/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:08.080871273 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_618/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:56.475451078 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_618/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:56.475451078 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_707/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:50.823756387 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_873/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:37:30.180322293 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_873/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:30.200322409 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1366/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:44.930080814 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_440/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:13.578884535 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_322/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:15.082571346 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_322/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:15.086571367 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_266/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:41.670396164 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_266/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:41.674396184 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_109/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:30:10.569915194 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_109/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:30:10.573915218 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_272/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:31:45.478415977 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ENTERWITH\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_272/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:45.482415998 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ENTERWITH\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_903/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:37:51.812446560 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_903/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:51.852446790 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_841/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:37:12.984223751 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_841/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:12.984223751 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_312/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:32:10.298546083 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_312/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:10.302546104 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -313,22 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +330,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1281/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:41:45.081742109 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1281/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:45.081742109 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_560/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:25.491278719 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_560/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:25.491278719 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1093/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:42.749060794 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1082/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:39:37.033029419 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1082/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:37.037029442 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_410/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:58.362802350 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_410/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:58.366802372 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1439/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:43:23.098298197 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1439/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:23.098298197 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1069/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:39:31.544999342 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1069/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:31.544999342 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_462/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:33:24.002941103 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_462/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:24.006941125 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_732/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:36:03.663829005 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_732/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:03.663829005 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_506/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:48.407074332 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_998/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:38:54.640798325 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_998/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:54.644798346 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_373/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:38.878697827 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_373/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:38.878697827 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1216/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:41:07.837532916 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1216/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:07.837532916 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1551/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:44:37.674725414 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1551/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:37.674725414 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1401/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:03.422186012 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1579/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:44:54.674823185 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"BITOR\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1579/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:54.694823301 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"BITOR\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_122/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:30:18.277959741 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_122/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:30:18.277959741 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_167/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:30:44.426103636 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_167/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:30:44.430103657 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_58/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:29:40.249740580 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_58/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:29:40.253740603 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_405/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:55.718788118 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_405/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:55.722788140 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_336/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:32:21.338604467 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             break;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_336/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:21.338604467 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_355/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:30.282651983 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_355/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:30.282651983 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1398/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:02.106178519 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1564/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:44.830766554 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1177/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:33.685342357 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1224/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:41:11.861555452 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1224/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:41:11.861555452 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1224/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:11.865555475 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_353/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:29.638648555 -0500\n@@ -1013,10 +1013,7 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n+              return sb.toString();\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_353/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:29.642648577 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_343/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:25.038624100 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +361,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        return null;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_693/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:42.415708929 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_808/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:36:53.664113311 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.type = type;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_808/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:36:53.664113311 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_808/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:53.664113311 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.type=type;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_718/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:35:56.047785911 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_718/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:56.051785933 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1227/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:41:13.341563745 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      sb.setLength(0);\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1227/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:41:13.345563767 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1227/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:13.345563767 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1465/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:43:41.514403413 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      sb.setLength(0);\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n@@ -1142,16 +1143,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1465/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:41.518403436 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_187/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:30:56.362163754 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_187/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:30:56.366163774 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "return \"EOL\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_252/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:34.606359518 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_252/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:34.610359539 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_469/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:33:27.086957879 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1152,10 +1148,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_469/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:27.090957901 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1053/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:39:22.768951340 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1053/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:22.768951340 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_691/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:41.783705365 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -337,14 +337,6 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n       return Double.parseDouble(s);\n     } catch (NumberFormatException e) {\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_664/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:35:21.875593328 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_664/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:21.875593328 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1390/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:58.318156954 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1195/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:40:54.625459043 -0500\n@@ -355,7 +355,6 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n           return left;\n         }\n         return n;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1195/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:54.625459043 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1088/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:40.157046560 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1503/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:44:03.958531903 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1503/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:03.958531903 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_300/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:04.238514166 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_300/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:04.238514166 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_332/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:20.094597873 -0500\n@@ -313,22 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +330,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_949/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:25.468640508 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_334/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:20.730601244 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_242/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:31:29.562333441 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_242/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:29.562333441 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_287/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:58.254482744 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_287/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:58.258482765 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1102/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:47.241085483 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1118/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:00.341157648 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_290/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:59.474489143 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_290/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:59.478489164 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_771/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:36:31.191985249 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_771/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:31.191985249 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_649/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:12.703541868 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_201/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:03.182198321 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_201/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:31:03.194198383 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_201/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:03.194198383 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_590/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:34:41.011364885 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_590/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:41.011364885 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_437/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:33:12.362877950 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_437/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:12.366877971 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1138/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:40:10.877215858 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n@@ -356,7 +355,7 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n+          return null;\n         }\n         return n;\n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1138/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:10.877215858 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1582/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:44:56.862835778 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1582/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:56.862835778 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1338/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:27.885984067 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1556/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:44:40.678742681 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1556/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:40.678742681 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_381/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:42.910719388 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1044/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:39:17.808924264 -0500\n@@ -1125,7 +1125,8 @@\n   private static void appendHexJavaScriptRepresentation(\n       StringBuilder sb, char c) {\n     try {\n-      appendHexJavaScriptRepresentation(c, sb);\n+      sb.setLength(0);\n+\tappendHexJavaScriptRepresentation(c, sb);\n     } catch (IOException ex) {\n       // StringBuilder does not throw IOException.\n       throw new RuntimeException(ex);\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1044/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:39:17.808924264 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1044/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:17.808924264 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1128, 
          "faulty": "appendHexJavaScriptRepresentation(c,sb);", 
          "type": "InsertBefore", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_230/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:24.702308386 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        break;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_536/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:34:08.963187353 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_536/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:34:08.967187376 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_536/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:08.967187376 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1437/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:43:22.490294728 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1437/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:22.490294728 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_581/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:37.303344267 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_581/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:37.303344267 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1341/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:42:29.173991371 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1341/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:29.189991461 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_86/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:29:56.761835549 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_86/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:29:56.761835549 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_315/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:11.514552499 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_315/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:11.518552520 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_714/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:35:54.739778515 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_714/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:54.743778539 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1614/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:30.875031785 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_744/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:36:08.799858100 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_744/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:36:08.799858100 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_744/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:08.803858123 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_750/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:12.115876898 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1073/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:39:32.741005893 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             return \"BLOCK\";\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1073/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:32.741005893 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1205/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:40:59.789487894 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1205/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:59.789487894 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        return null;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_890/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:37:42.948395600 -0500\n@@ -356,7 +356,7 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n+          return null;\n         }\n         return n;\n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_890/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:42.948395600 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_40/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:29:28.845675175 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_40/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:29:28.893675449 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_40/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:29:28.893675449 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_747/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:10.199866035 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_747/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:10.203866058 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_735/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:36:04.891835959 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        sourcePosition = -1;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_735/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:04.891835959 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_255/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:35.894366189 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_255/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:35.894366189 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1443/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:43:24.362305412 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1443/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:24.362305412 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_683/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:37.011678468 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -354,7 +354,8 @@\n \n   static String trimJsWhiteSpace(String s) {\n     int start = 0;\n-    int end = s.length();\n+    start = -1;\n+\tint end = s.length();\n     while (end > 0\n         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {\n       end--;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 357, 
          "faulty": "int end=s.length();", 
          "type": "InsertBefore", 
          "seed": "start=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_587/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:34:39.699357588 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_587/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:39.699357588 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_212/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:09.662231309 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_212/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:09.666231329 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1481/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:43:52.358465460 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1481/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:52.362465483 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1034/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:12.320894350 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1034/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:39:12.324894372 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1034/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:12.324894372 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_985/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:47.200758078 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1200/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:57.097472851 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1370/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:46.978092452 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_359/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:31.674659395 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_359/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:31.674659395 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1433/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:43:20.666284318 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1433/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:43:20.670284341 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1433/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:20.670284341 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "case 3:"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1431/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:19.946280210 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_217/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:31:17.782272834 -0500\n@@ -260,9 +260,6 @@\n     } else {\n       replacement = Node.newNumber(value);\n     }\n-\n-    n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_217/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:17.786272855 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_892/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:37:43.568399163 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_892/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:43.568399163 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -370,23 +370,7 @@\n    * Copied from Rhino's ScriptRuntime\n    */\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n-    switch (c) {\n-      case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n-      case ' ': // <SP>\n-      case '\\n': // <LF>\n-      case '\\r': // <CR>\n-      case '\\t': // <TAB>\n-      case '\\u00A0': // <NBSP>\n-      case '\\u000C': // <FF>\n-      case '\\u2028': // <LS>\n-      case '\\u2029': // <PS>\n-      case '\\uFEFF': // <BOM>\n-        return TernaryValue.TRUE;\n-      default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n-    }\n+    return null;\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 373, 
          "faulty": "switch (c) {\ncase '\\u000B':\n  return TernaryValue.TRUE;\ncase ' ':\ncase '\\n':\ncase '\\r':\ncase '\\t':\ncase '\\u00A0':\ncase '\\u000C':\ncase '\\u2028':\ncase '\\u2029':\ncase '\\uFEFF':\nreturn TernaryValue.TRUE;\ndefault :\nreturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_652/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:35:14.111549761 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_652/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:14.119549805 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_794/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:44.760062517 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_794/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:44.760062517 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_674/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:30.383641153 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_676/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:35:31.167645564 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_676/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:31.175645609 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_371/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:38.258694515 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_371/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:38.262694536 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1483/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:53.434471620 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1533/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:44:26.874663367 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1533/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:26.874663367 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_931/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:38:14.860579302 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_931/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:14.864579325 -0500\n@@ -329,24 +329,8 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_434/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:33:11.038870783 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toStringTreeImpl();\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_434/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:11.038870783 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_863/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:37:25.480295338 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_863/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:37:25.480295338 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_863/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:25.480295338 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case EOL:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1171/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:40:30.985327349 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      this.type = type;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1171/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:30.989327371 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "this.type=type;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_811/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:55.376123085 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_318/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:12.730558919 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_318/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:12.734558940 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1037/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:39:13.700901868 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1037/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:13.700901868 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_754/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:14.127888310 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_644/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:35:10.895531736 -0500\n@@ -1013,10 +1013,7 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n+              break;\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_644/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:10.895531736 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_778/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:35.024007054 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_455/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:33:20.834923889 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_455/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:20.834923889 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1585/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:44:58.106842939 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        Kit.codeBug();\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1585/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:44:58.110842962 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1585/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:58.110842962 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "Kit.codeBug();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1067/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:30.936996013 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1485/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:54.338476796 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_328/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:18.266588191 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_328/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:18.266588191 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_576/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:34:35.239332799 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toStringTreeImpl();\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_576/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:35.239332799 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_576/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:35.243332821 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1522/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:44:20.590627291 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1522/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:20.594627314 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_720/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:56.651789326 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1270/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:41:39.149708702 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1270/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:39.149708702 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1455/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:43:36.802376474 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1455/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:36.822376588 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_883/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:37:37.220362696 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_883/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:37.240362811 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_447/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:33:16.866902355 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toStringTreeImpl();\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_447/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:33:16.866902355 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_447/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:16.870902378 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_927/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:38:06.460530884 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"EOL\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_927/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:06.460530884 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"EOL\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_742/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:36:08.175854563 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return toStringTreeImpl();\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_742/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:08.179854587 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_742/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:08.179854587 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return toStringTreeImpl();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1426/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:43:17.230264715 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1426/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:17.234264738 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_917/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:38:00.792498239 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_917/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:00.796498262 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_974/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:40.364721187 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1254/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:41:29.837656325 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1254/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:29.841656347 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1410/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:43:08.654215819 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        parent = null;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1410/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:43:08.654215819 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1410/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:08.658215842 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "parent=null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_257/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:31:36.514369402 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_257/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:36.514369402 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "Kit.codeBug();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1055/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:23.760956760 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      parent = null;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1055/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:23.764956782 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "parent=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_414/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:00.182812155 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_497/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:33:45.079056099 -0500\n@@ -1410,7 +1410,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_497/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:45.079056099 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_238/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:28.330327083 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_238/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:28.330327083 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1293/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:41:52.597784483 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1293/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:52.601784505 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        return null;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1077/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:34.561015866 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_799/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:46.860074490 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_799/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:46.864074514 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_347/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:26.962634322 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_347/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:26.962634322 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_234/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:26.482317554 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_250/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:33.794355315 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        return null;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_579/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:34:36.471339643 -0500\n@@ -1397,7 +1397,8 @@\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n     if (!isEquivalentTo(node2, false, false)) {\n-      return new NodeMismatch(this, node2);\n+      sourcePosition = -1;\n+\treturn new NodeMismatch(this, node2);\n     }\n \n     NodeMismatch res = null;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_579/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:36.471339643 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1400, 
          "faulty": "return new NodeMismatch(this,node2);", 
          "type": "InsertBefore", 
          "seed": "sourcePosition=-1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_622/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:58.383461734 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_622/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:58.383461734 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1489/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:56.590489692 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_738/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:36:06.219843482 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_738/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:06.223843504 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_787/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:39.880034706 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_787/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:39.900034820 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_457/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:33:21.462927300 -0500\n@@ -355,7 +355,6 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n           return left;\n         }\n         return n;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_457/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:21.466927322 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_502/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:33:47.159067491 -0500\n@@ -1410,7 +1410,6 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_502/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:47.159067491 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Delete", 
          "seed": "sourcePosition=-1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_349/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:27.670638087 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_349/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:27.670638087 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1105/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:39:48.441092084 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1105/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:48.441092084 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_276/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:47.262425273 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1632/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:40.319086288 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1173/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:40:31.593330728 -0500\n@@ -1013,10 +1013,7 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n+              return sb.toString();\n             }\n           }\n       }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1173/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:31.593330728 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_989/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:38:49.548770768 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"ENTERWITH\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_989/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:38:49.548770768 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_989/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:49.548770768 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"ENTERWITH\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_640/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:35:09.091521631 -0500\n@@ -1013,10 +1013,6 @@\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n             }\n           }\n       }\n@@ -1142,16 +1138,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_640/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:09.091521631 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1019, 
          "faulty": "appendHexJavaScriptRepresentation(sb,c);", 
          "type": "Delete", 
          "seed": "sb.setLength(0);"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_305/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:06.666526943 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_305/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:06.670526964 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -372,7 +372,7 @@\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n     switch (c) {\n       case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n+        return null;\n       case ' ': // <SP>\n       case '\\n': // <LF>\n       case '\\r': // <CR>\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 375, 
          "faulty": "return TernaryValue.TRUE;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1267/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:41:37.937701880 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1267/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:37.937701880 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_806/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:36:52.996109498 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_806/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:52.996109498 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1026/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:39:08.696874624 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        throw new IllegalArgumentException();\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1026/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:08.696874624 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "throw new IllegalArgumentException();"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_357/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:32:30.914655348 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_357/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:30.918655369 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "break L;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_393/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:49.662755576 -0500\n@@ -356,7 +356,7 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n+          return null;\n         }\n         return n;\n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_393/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:49.666755598 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1188/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:40:50.929438411 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1188/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:40:50.933438434 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1230/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:41:15.281574619 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_655/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:35:15.707558711 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_504/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:33:47.803071021 -0500\n@@ -1142,16 +1142,6 @@\n   private static void appendHexJavaScriptRepresentation(\n       int codePoint, Appendable out)\n       throws IOException {\n-    if (Character.isSupplementaryCodePoint(codePoint)) {\n-      // Handle supplementary unicode values which are not representable in\n-      // javascript.  We deal with these by escaping them as two 4B sequences\n-      // so that they will round-trip properly when sent from java to javascript\n-      // and back.\n-      char[] surrogates = Character.toChars(codePoint);\n-      appendHexJavaScriptRepresentation(surrogates[0], out);\n-      appendHexJavaScriptRepresentation(surrogates[1], out);\n-      return;\n-    }\n     out.append(\"\\\\u\")\n         .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n         .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_504/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:33:47.803071021 -0500\n@@ -356,7 +356,7 @@\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n           reportCodeChange();\n-          return left;\n+          return null;\n         }\n         return n;\n       case Token.NEG:\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_504/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:47.807071043 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 359, 
          "faulty": "return left;", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1145, 
          "faulty": "if (Character.isSupplementaryCodePoint(codePoint)) {\n  char[] surrogates=Character.toChars(codePoint);\n  appendHexJavaScriptRepresentation(surrogates[0],out);\n  appendHexJavaScriptRepresentation(surrogates[1],out);\n  return;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1350/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:35.294026090 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1572/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:50.218797545 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        ;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Delete", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_910/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:56.580473992 -0500\n@@ -313,11 +313,6 @@\n       // vertical tab is not always whitespace\n \n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-      return 0.0;\n-    }\n-\n     if (s.length() > 2\n         && s.charAt(0) == '0'\n         && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n@@ -346,7 +341,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 317, 
          "faulty": "if (s.length() == 0) {\n  return 0.0;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1544/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:44:33.942703966 -0500\n@@ -1410,7 +1410,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        this.type = type;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1544/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:33.942703966 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "this.type=type;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1441/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:43:23.742301873 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1441/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:23.746301896 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_939/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:19.352605211 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_774/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:32.479992576 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_774/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:32.479992576 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1320/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:42:15.385913253 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_866/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:37:26.780302792 -0500\n@@ -352,12 +352,7 @@\n         reportCodeChange();\n         return replacementNode;\n       case Token.POS:\n-        if (NodeUtil.isNumericResult(left)) {\n-          // POS does nothing to numeric values.\n-          parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n-          return left;\n-        }\n+        ;\n         return n;\n       case Token.NEG:\n         try {\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_866/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:37:26.784302815 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 355, 
          "faulty": "if (NodeUtil.isNumericResult(left)) {\n  parent.replaceChild(n,left.detachFromParent());\n  reportCodeChange();\n  return left;\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1575/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:44:52.206808983 -0500\n@@ -1368,11 +1368,7 @@\n   public String checkTreeEquals(Node node2) {\n       NodeMismatch diff = checkTreeEqualsImpl(node2);\n       if (diff != null) {\n-        return \"Node tree inequality:\" +\n-            \"\\nTree1:\\n\" + toStringTree() +\n-            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n-            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n-            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n+        return \"BLOCK\";\n       }\n       return null;\n   }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1575/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:52.214809030 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1371, 
          "faulty": "return \"Node tree inequality:\" + \"\\nTree1:\\n\" + toStringTree() + \"\\n\\nTree2:\\n\"+ node2.toStringTree()+ \"\\n\\nSubtree1: \"+ diff.nodeA.toStringTree()+ \"\\n\\nSubtree2: \"+ diff.nodeB.toStringTree();", 
          "type": "Replace", 
          "seed": "return \"BLOCK\";"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_430/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:33:09.034859943 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_430/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:33:09.038859964 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_292/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:00.278493361 -0500\n@@ -298,7 +298,7 @@\n         break;\n \n       case Token.STRING:\n-        return getStringNumberValue(n.getString());\n+        return null;\n \n       case Token.ARRAYLIT:\n       case Token.OBJECTLIT:\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 301, 
          "faulty": "return getStringNumberValue(n.getString());", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_971/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:38:39.156714676 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_971/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:39.160714697 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_583/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:37.911347646 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n@@ -361,7 +361,8 @@\n     }\n     while (start < end\n         && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {\n-      start++;\n+      start = end + 1;\n+\tstart++;\n     }\n     return s.substring(start, end);\n   }\n@@ -370,23 +371,7 @@\n    * Copied from Rhino's ScriptRuntime\n    */\n   static TernaryValue isStrWhiteSpaceChar(int c) {\n-    switch (c) {\n-      case '\\u000B': // <VT>\n-        return TernaryValue.TRUE;\n-      case ' ': // <SP>\n-      case '\\n': // <LF>\n-      case '\\r': // <CR>\n-      case '\\t': // <TAB>\n-      case '\\u00A0': // <NBSP>\n-      case '\\u000C': // <FF>\n-      case '\\u2028': // <LS>\n-      case '\\u2029': // <PS>\n-      case '\\uFEFF': // <BOM>\n-        return TernaryValue.TRUE;\n-      default:\n-        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n-            ? TernaryValue.TRUE : TernaryValue.FALSE;\n-    }\n+    return null;\n   }\n \n   /**\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 364, 
          "faulty": "start++;", 
          "type": "InsertBefore", 
          "seed": "start=end + 1;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 373, 
          "faulty": "switch (c) {\ncase '\\u000B':\n  return TernaryValue.TRUE;\ncase ' ':\ncase '\\n':\ncase '\\r':\ncase '\\t':\ncase '\\u00A0':\ncase '\\u000C':\ncase '\\u2028':\ncase '\\u2029':\ncase '\\uFEFF':\nreturn TernaryValue.TRUE;\ndefault :\nreturn (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n}", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_361/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:32:32.314662805 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_361/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:32:32.318662826 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_361/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:32:32.318662826 -0500\n@@ -318,17 +318,6 @@\n       return 0.0;\n     }\n \n-    if (s.length() > 2\n-        && s.charAt(0) == '0'\n-        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-      // Attempt to convert hex numbers.\n-      try {\n-        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-      } catch (NumberFormatException e) {\n-        return Double.NaN;\n-      }\n-    }\n-\n     if (s.length() > 3\n         && (s.charAt(0) == '-' || s.charAt(0) == '+')\n         && s.charAt(1) == '0'\n@@ -346,7 +335,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 321, 
          "faulty": "if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n  try {\n    return Double.valueOf(Integer.parseInt(s.substring(2),16));\n  }\n catch (  NumberFormatException e) {\n    return Double.NaN;\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_280/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:31:49.134435037 -0500\n@@ -355,7 +355,6 @@\n         if (NodeUtil.isNumericResult(left)) {\n           // POS does nothing to numeric values.\n           parent.replaceChild(n, left.detachFromParent());\n-          reportCodeChange();\n           return left;\n         }\n         return n;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_280/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:49.138435059 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 358, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_924/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:38:05.224523763 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1567/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:44:46.410775640 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1623/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:36.039061583 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_197/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Node.java\t2018-12-01 09:31:01.326188899 -0500\n@@ -1410,7 +1410,10 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        if (!isEquivalentTo(node2, false, false)) {\n+\t\t\treturn new NodeMismatch(this, node2);\n+\t\t}\n+\t\treturn res;\n       }\n     }\n     return res;\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_197/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:01.330188920 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1413, 
          "faulty": "return res;", 
          "type": "InsertBefore", 
          "seed": "if (!isEquivalentTo(node2,false,false)) {\n  return new NodeMismatch(this,node2);\n}"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_531/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:34:06.855175731 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_531/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:06.859175753 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1014/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:39:02.336840059 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1014/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:39:02.336840059 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_152/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:30:35.842060712 -0500\n@@ -262,7 +262,6 @@\n     }\n \n     n.getParent().replaceChild(n, replacement);\n-    reportCodeChange();\n   }\n \n   /**\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_152/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:30:35.846060732 -0500\n@@ -298,7 +298,7 @@\n           case MUL:             return \"MUL\";\n           case DIV:             return \"DIV\";\n           case MOD:             return \"MOD\";\n-          case NOT:             return \"NOT\";\n+          case NOT:             ;\n           case BITNOT:          return \"BITNOT\";\n           case POS:             return \"POS\";\n           case NEG:             return \"NEG\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_152/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:30:35.846060732 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 265, 
          "faulty": "reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 301, 
          "faulty": "return \"NOT\";", 
          "type": "Delete", 
          "seed": "break L;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:23:24.615726477 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_221/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/CodeGenerator.java\t2018-12-01 09:31:19.698282663 -0500\n@@ -1152,10 +1152,5 @@\n       appendHexJavaScriptRepresentation(surrogates[1], out);\n       return;\n     }\n-    out.append(\"\\\\u\")\n-        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n-        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n-        .append(HEX_CHARS[codePoint & 0xf]);\n   }\n }\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_221/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:31:19.698282663 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java", 
          "line": 1155, 
          "faulty": "out.append(\"\\\\u\").append(HEX_CHARS[(codePoint >>> 12) & 0xf]).append(HEX_CHARS[(codePoint >>> 8) & 0xf]).append(HEX_CHARS[(codePoint >>> 4) & 0xf]).append(HEX_CHARS[codePoint & 0xf]);", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1420/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:43:14.798250844 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1420/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:43:14.802250867 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_792/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:36:43.864057409 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_792/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:36:43.868057432 -0500\n@@ -329,14 +329,6 @@\n       }\n     }\n \n-    if (s.length() > 3\n-        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n-        && s.charAt(1) == '0'\n-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-      // hex numbers with explicit signs vary between browsers.\n-      return null;\n-    }\n-\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n     if (s.equals(\"infinity\")\n@@ -346,7 +338,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 332, 
          "faulty": "if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:23:24.635726572 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1600/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2018-12-01 09:45:14.638938162 -0500\n@@ -261,7 +261,6 @@\n       replacement = Node.newNumber(value);\n     }\n \n-    n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:23:24.659726686 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1600/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/rhino/Token.java\t2018-12-01 09:45:14.642938185 -0500\n@@ -300,7 +300,7 @@\n           case MOD:             return \"MOD\";\n           case NOT:             return \"NOT\";\n           case BITNOT:          return \"BITNOT\";\n-          case POS:             return \"POS\";\n+          case POS:             ;\n           case NEG:             return \"NEG\";\n           case NEW:             return \"NEW\";\n           case DELPROP:         return \"DELPROP\";\n\n\n--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_1600/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:45:14.642938185 -0500\n@@ -346,7 +346,7 @@\n     }\n \n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/Token.java", 
          "line": 303, 
          "faulty": "return \"POS\";", 
          "type": "Delete", 
          "seed": "case 4:"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java", 
          "line": 264, 
          "faulty": "n.getParent().replaceChild(n,replacement);", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:23:26.391734914 -0500\n+++ /tmp/Arja_Defects4J_Closure_75/patches_z70m/Patch_534/patched/tmp/Arja_Defects4J_Closure_75/src/com/google/javascript/jscomp/NodeUtil.java\t2018-12-01 09:34:08.271183538 -0500\n@@ -337,16 +337,8 @@\n       return null;\n     }\n \n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\")\n-        || s.equals(\"-infinity\")\n-        || s.equals(\"+infinity\")) {\n-      return null;\n-    }\n-\n     try {\n-      return Double.parseDouble(s);\n+      return null;\n     } catch (NumberFormatException e) {\n       return Double.NaN;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 349, 
          "faulty": "return Double.parseDouble(s);", 
          "type": "Replace", 
          "seed": "return null;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/NodeUtil.java", 
          "line": 342, 
          "faulty": "if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n  return null;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }
      ]
    }
  ]
}